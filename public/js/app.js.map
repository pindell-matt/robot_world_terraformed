{"version":3,"sources":["node_modules/process/browser.js","elm/Main.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Array.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Basics.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Bitwise.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Char.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Color.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Date.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Debug.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Dict.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Json/Decode.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Json/Encode.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/List.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Maybe.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Array.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Basics.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Bitwise.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Char.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Date.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Debug.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Json.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/List.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Platform.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Regex.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Scheduler.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/String.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Time.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Native/Utils.js","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Platform.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Platform/Cmd.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Platform/Sub.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Process.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Random.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Regex.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Result.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Set.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/String.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Task.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Time.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/src/Tuple.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Main.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Array.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Basics.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Bitwise.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Char.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/CodeGen.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Dict.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Equality.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Json.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/List.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Maybe.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Regex.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Result.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/Set.elm","elm/elm-stuff/packages/elm-lang/core/5.1.1/tests/Test/String.elm","elm/elm-stuff/packages/elm-lang/html/2.0.0/src/Html.elm","elm/elm-stuff/packages/elm-lang/html/2.0.0/src/Html/Attributes.elm","elm/elm-stuff/packages/elm-lang/html/2.0.0/src/Html/Events.elm","elm/elm-stuff/packages/elm-lang/html/2.0.0/src/Html/Keyed.elm","elm/elm-stuff/packages/elm-lang/html/2.0.0/src/Html/Lazy.elm","elm/elm-stuff/packages/elm-lang/http/1.0.0/src/Http.elm","elm/elm-stuff/packages/elm-lang/http/1.0.0/src/Http/Internal.elm","elm/elm-stuff/packages/elm-lang/http/1.0.0/src/Http/Progress.elm","elm/elm-stuff/packages/elm-lang/http/1.0.0/src/Native/Http.js","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/Native/Debug.js","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/Native/VirtualDom.js","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Debug.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Expando.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Helpers.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/History.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Metadata.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Overlay.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/src/VirtualDom/Report.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/tests/Native/TestHelpers.js","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/tests/TestCases/Lazy.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/tests/TestHelpers.elm","elm/elm-stuff/packages/elm-lang/virtual-dom/2.0.4/tests/TestMain.elm","js/app.js","js/main.js"],"names":[],"mappingsxzHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhjelHA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7cttnRA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/YA;AAAA;ACAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3MA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvr/CA;AAAA;ACAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;ACAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AAAA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbr2MA;AAAA","file":"../public/js/app.js","sourcesContent":["\nrequire.register(\"process/browser.js\", function(exports, require, module) {\n  require = __makeRelativeRequire(require, {}, \"process\");\n  (function() {\n    // shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n  })();\n});","","","","","","","","","","","","","","'use strict';\n\n//import Native.List //\n\nvar _elm_lang$core$Native_Array = function () {\n\n\t// A RRB-Tree has two distinct data types.\n\t// Leaf -> \"height\"  is always 0\n\t//         \"table\"   is an array of elements\n\t// Node -> \"height\"  is always greater than 0\n\t//         \"table\"   is an array of child nodes\n\t//         \"lengths\" is an array of accumulated lengths of the child nodes\n\n\t// M is the maximal table size. 32 seems fast. E is the allowed increase\n\t// of search steps when concatting to find an index. Lower values will\n\t// decrease balancing, but will increase search steps.\n\tvar M = 32;\n\tvar E = 2;\n\n\t// An empty array.\n\tvar empty = {\n\t\tctor: '_Array',\n\t\theight: 0,\n\t\ttable: []\n\t};\n\n\tfunction get(i, array) {\n\t\tif (i < 0 || i >= length(array)) {\n\t\t\tthrow new Error('Index ' + i + ' is out of range. Check the length of ' + 'your array first or use getMaybe or getWithDefault.');\n\t\t}\n\t\treturn unsafeGet(i, array);\n\t}\n\n\tfunction unsafeGet(i, array) {\n\t\tfor (var x = array.height; x > 0; x--) {\n\t\t\tvar slot = i >> x * 5;\n\t\t\twhile (array.lengths[slot] <= i) {\n\t\t\t\tslot++;\n\t\t\t}\n\t\t\tif (slot > 0) {\n\t\t\t\ti -= array.lengths[slot - 1];\n\t\t\t}\n\t\t\tarray = array.table[slot];\n\t\t}\n\t\treturn array.table[i];\n\t}\n\n\t// Sets the value at the index i. Only the nodes leading to i will get\n\t// copied and updated.\n\tfunction set(i, item, array) {\n\t\tif (i < 0 || length(array) <= i) {\n\t\t\treturn array;\n\t\t}\n\t\treturn unsafeSet(i, item, array);\n\t}\n\n\tfunction unsafeSet(i, item, array) {\n\t\tarray = nodeCopy(array);\n\n\t\tif (array.height === 0) {\n\t\t\tarray.table[i] = item;\n\t\t} else {\n\t\t\tvar slot = getSlot(i, array);\n\t\t\tif (slot > 0) {\n\t\t\t\ti -= array.lengths[slot - 1];\n\t\t\t}\n\t\t\tarray.table[slot] = unsafeSet(i, item, array.table[slot]);\n\t\t}\n\t\treturn array;\n\t}\n\n\tfunction initialize(len, f) {\n\t\tif (len <= 0) {\n\t\t\treturn empty;\n\t\t}\n\t\tvar h = Math.floor(Math.log(len) / Math.log(M));\n\t\treturn initialize_(f, h, 0, len);\n\t}\n\n\tfunction initialize_(f, h, from, to) {\n\t\tif (h === 0) {\n\t\t\tvar table = new Array((to - from) % (M + 1));\n\t\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\t\ttable[i] = f(from + i);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: 0,\n\t\t\t\ttable: table\n\t\t\t};\n\t\t}\n\n\t\tvar step = Math.pow(M, h);\n\t\tvar table = new Array(Math.ceil((to - from) / step));\n\t\tvar lengths = new Array(table.length);\n\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\ttable[i] = initialize_(f, h - 1, from + i * step, Math.min(from + (i + 1) * step, to));\n\t\t\tlengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);\n\t\t}\n\t\treturn {\n\t\t\tctor: '_Array',\n\t\t\theight: h,\n\t\t\ttable: table,\n\t\t\tlengths: lengths\n\t\t};\n\t}\n\n\tfunction fromList(list) {\n\t\tif (list.ctor === '[]') {\n\t\t\treturn empty;\n\t\t}\n\n\t\t// Allocate M sized blocks (table) and write list elements to it.\n\t\tvar table = new Array(M);\n\t\tvar nodes = [];\n\t\tvar i = 0;\n\n\t\twhile (list.ctor !== '[]') {\n\t\t\ttable[i] = list._0;\n\t\t\tlist = list._1;\n\t\t\ti++;\n\n\t\t\t// table is full, so we can push a leaf containing it into the\n\t\t\t// next node.\n\t\t\tif (i === M) {\n\t\t\t\tvar leaf = {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: table\n\t\t\t\t};\n\t\t\t\tfromListPush(leaf, nodes);\n\t\t\t\ttable = new Array(M);\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Maybe there is something left on the table.\n\t\tif (i > 0) {\n\t\t\tvar leaf = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: 0,\n\t\t\t\ttable: table.splice(0, i)\n\t\t\t};\n\t\t\tfromListPush(leaf, nodes);\n\t\t}\n\n\t\t// Go through all of the nodes and eventually push them into higher nodes.\n\t\tfor (var h = 0; h < nodes.length - 1; h++) {\n\t\t\tif (nodes[h].table.length > 0) {\n\t\t\t\tfromListPush(nodes[h], nodes);\n\t\t\t}\n\t\t}\n\n\t\tvar head = nodes[nodes.length - 1];\n\t\tif (head.height > 0 && head.table.length === 1) {\n\t\t\treturn head.table[0];\n\t\t} else {\n\t\t\treturn head;\n\t\t}\n\t}\n\n\t// Push a node into a higher node as a child.\n\tfunction fromListPush(toPush, nodes) {\n\t\tvar h = toPush.height;\n\n\t\t// Maybe the node on this height does not exist.\n\t\tif (nodes.length === h) {\n\t\t\tvar node = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h + 1,\n\t\t\t\ttable: [],\n\t\t\t\tlengths: []\n\t\t\t};\n\t\t\tnodes.push(node);\n\t\t}\n\n\t\tnodes[h].table.push(toPush);\n\t\tvar len = length(toPush);\n\t\tif (nodes[h].lengths.length > 0) {\n\t\t\tlen += nodes[h].lengths[nodes[h].lengths.length - 1];\n\t\t}\n\t\tnodes[h].lengths.push(len);\n\n\t\tif (nodes[h].table.length === M) {\n\t\t\tfromListPush(nodes[h], nodes);\n\t\t\tnodes[h] = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h + 1,\n\t\t\t\ttable: [],\n\t\t\t\tlengths: []\n\t\t\t};\n\t\t}\n\t}\n\n\t// Pushes an item via push_ to the bottom right of a tree.\n\tfunction push(item, a) {\n\t\tvar pushed = push_(item, a);\n\t\tif (pushed !== null) {\n\t\t\treturn pushed;\n\t\t}\n\n\t\tvar newTree = create(item, a.height);\n\t\treturn siblise(a, newTree);\n\t}\n\n\t// Recursively tries to push an item to the bottom-right most\n\t// tree possible. If there is no space left for the item,\n\t// null will be returned.\n\tfunction push_(item, a) {\n\t\t// Handle resursion stop at leaf level.\n\t\tif (a.height === 0) {\n\t\t\tif (a.table.length < M) {\n\t\t\t\tvar newA = {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: a.table.slice()\n\t\t\t\t};\n\t\t\t\tnewA.table.push(item);\n\t\t\t\treturn newA;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Recursively push\n\t\tvar pushed = push_(item, botRight(a));\n\n\t\t// There was space in the bottom right tree, so the slot will\n\t\t// be updated.\n\t\tif (pushed !== null) {\n\t\t\tvar newA = nodeCopy(a);\n\t\t\tnewA.table[newA.table.length - 1] = pushed;\n\t\t\tnewA.lengths[newA.lengths.length - 1]++;\n\t\t\treturn newA;\n\t\t}\n\n\t\t// When there was no space left, check if there is space left\n\t\t// for a new slot with a tree which contains only the item\n\t\t// at the bottom.\n\t\tif (a.table.length < M) {\n\t\t\tvar newSlot = create(item, a.height - 1);\n\t\t\tvar newA = nodeCopy(a);\n\t\t\tnewA.table.push(newSlot);\n\t\t\tnewA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));\n\t\t\treturn newA;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Converts an array into a list of elements.\n\tfunction toList(a) {\n\t\treturn toList_(_elm_lang$core$Native_List.Nil, a);\n\t}\n\n\tfunction toList_(list, a) {\n\t\tfor (var i = a.table.length - 1; i >= 0; i--) {\n\t\t\tlist = a.height === 0 ? _elm_lang$core$Native_List.Cons(a.table[i], list) : toList_(list, a.table[i]);\n\t\t}\n\t\treturn list;\n\t}\n\n\t// Maps a function over the elements of an array.\n\tfunction map(f, a) {\n\t\tvar newA = {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height,\n\t\t\ttable: new Array(a.table.length)\n\t\t};\n\t\tif (a.height > 0) {\n\t\t\tnewA.lengths = a.lengths;\n\t\t}\n\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\tnewA.table[i] = a.height === 0 ? f(a.table[i]) : map(f, a.table[i]);\n\t\t}\n\t\treturn newA;\n\t}\n\n\t// Maps a function over the elements with their index as first argument.\n\tfunction indexedMap(f, a) {\n\t\treturn indexedMap_(f, a, 0);\n\t}\n\n\tfunction indexedMap_(f, a, from) {\n\t\tvar newA = {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height,\n\t\t\ttable: new Array(a.table.length)\n\t\t};\n\t\tif (a.height > 0) {\n\t\t\tnewA.lengths = a.lengths;\n\t\t}\n\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\tnewA.table[i] = a.height === 0 ? A2(f, from + i, a.table[i]) : indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);\n\t\t}\n\t\treturn newA;\n\t}\n\n\tfunction foldl(f, b, a) {\n\t\tif (a.height === 0) {\n\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\tb = A2(f, a.table[i], b);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\tb = foldl(f, b, a.table[i]);\n\t\t\t}\n\t\t}\n\t\treturn b;\n\t}\n\n\tfunction foldr(f, b, a) {\n\t\tif (a.height === 0) {\n\t\t\tfor (var i = a.table.length; i--;) {\n\t\t\t\tb = A2(f, a.table[i], b);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var i = a.table.length; i--;) {\n\t\t\t\tb = foldr(f, b, a.table[i]);\n\t\t\t}\n\t\t}\n\t\treturn b;\n\t}\n\n\t// TODO: currently, it slices the right, then the left. This can be\n\t// optimized.\n\tfunction slice(from, to, a) {\n\t\tif (from < 0) {\n\t\t\tfrom += length(a);\n\t\t}\n\t\tif (to < 0) {\n\t\t\tto += length(a);\n\t\t}\n\t\treturn sliceLeft(from, sliceRight(to, a));\n\t}\n\n\tfunction sliceRight(to, a) {\n\t\tif (to === length(a)) {\n\t\t\treturn a;\n\t\t}\n\n\t\t// Handle leaf level.\n\t\tif (a.height === 0) {\n\t\t\tvar newA = { ctor: '_Array', height: 0 };\n\t\t\tnewA.table = a.table.slice(0, to);\n\t\t\treturn newA;\n\t\t}\n\n\t\t// Slice the right recursively.\n\t\tvar right = getSlot(to, a);\n\t\tvar sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);\n\n\t\t// Maybe the a node is not even needed, as sliced contains the whole slice.\n\t\tif (right === 0) {\n\t\t\treturn sliced;\n\t\t}\n\n\t\t// Create new node.\n\t\tvar newA = {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height,\n\t\t\ttable: a.table.slice(0, right),\n\t\t\tlengths: a.lengths.slice(0, right)\n\t\t};\n\t\tif (sliced.table.length > 0) {\n\t\t\tnewA.table[right] = sliced;\n\t\t\tnewA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);\n\t\t}\n\t\treturn newA;\n\t}\n\n\tfunction sliceLeft(from, a) {\n\t\tif (from === 0) {\n\t\t\treturn a;\n\t\t}\n\n\t\t// Handle leaf level.\n\t\tif (a.height === 0) {\n\t\t\tvar newA = { ctor: '_Array', height: 0 };\n\t\t\tnewA.table = a.table.slice(from, a.table.length + 1);\n\t\t\treturn newA;\n\t\t}\n\n\t\t// Slice the left recursively.\n\t\tvar left = getSlot(from, a);\n\t\tvar sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);\n\n\t\t// Maybe the a node is not even needed, as sliced contains the whole slice.\n\t\tif (left === a.table.length - 1) {\n\t\t\treturn sliced;\n\t\t}\n\n\t\t// Create new node.\n\t\tvar newA = {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height,\n\t\t\ttable: a.table.slice(left, a.table.length + 1),\n\t\t\tlengths: new Array(a.table.length - left)\n\t\t};\n\t\tnewA.table[0] = sliced;\n\t\tvar len = 0;\n\t\tfor (var i = 0; i < newA.table.length; i++) {\n\t\t\tlen += length(newA.table[i]);\n\t\t\tnewA.lengths[i] = len;\n\t\t}\n\n\t\treturn newA;\n\t}\n\n\t// Appends two trees.\n\tfunction append(a, b) {\n\t\tif (a.table.length === 0) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b.table.length === 0) {\n\t\t\treturn a;\n\t\t}\n\n\t\tvar c = append_(a, b);\n\n\t\t// Check if both nodes can be crunshed together.\n\t\tif (c[0].table.length + c[1].table.length <= M) {\n\t\t\tif (c[0].table.length === 0) {\n\t\t\t\treturn c[1];\n\t\t\t}\n\t\t\tif (c[1].table.length === 0) {\n\t\t\t\treturn c[0];\n\t\t\t}\n\n\t\t\t// Adjust .table and .lengths\n\t\t\tc[0].table = c[0].table.concat(c[1].table);\n\t\t\tif (c[0].height > 0) {\n\t\t\t\tvar len = length(c[0]);\n\t\t\t\tfor (var i = 0; i < c[1].lengths.length; i++) {\n\t\t\t\t\tc[1].lengths[i] += len;\n\t\t\t\t}\n\t\t\t\tc[0].lengths = c[0].lengths.concat(c[1].lengths);\n\t\t\t}\n\n\t\t\treturn c[0];\n\t\t}\n\n\t\tif (c[0].height > 0) {\n\t\t\tvar toRemove = calcToRemove(a, b);\n\t\t\tif (toRemove > E) {\n\t\t\t\tc = shuffle(c[0], c[1], toRemove);\n\t\t\t}\n\t\t}\n\n\t\treturn siblise(c[0], c[1]);\n\t}\n\n\t// Returns an array of two nodes; right and left. One node _may_ be empty.\n\tfunction append_(a, b) {\n\t\tif (a.height === 0 && b.height === 0) {\n\t\t\treturn [a, b];\n\t\t}\n\n\t\tif (a.height !== 1 || b.height !== 1) {\n\t\t\tif (a.height === b.height) {\n\t\t\t\ta = nodeCopy(a);\n\t\t\t\tb = nodeCopy(b);\n\t\t\t\tvar appended = append_(botRight(a), botLeft(b));\n\n\t\t\t\tinsertRight(a, appended[1]);\n\t\t\t\tinsertLeft(b, appended[0]);\n\t\t\t} else if (a.height > b.height) {\n\t\t\t\ta = nodeCopy(a);\n\t\t\t\tvar appended = append_(botRight(a), b);\n\n\t\t\t\tinsertRight(a, appended[0]);\n\t\t\t\tb = parentise(appended[1], appended[1].height + 1);\n\t\t\t} else {\n\t\t\t\tb = nodeCopy(b);\n\t\t\t\tvar appended = append_(a, botLeft(b));\n\n\t\t\t\tvar left = appended[0].table.length === 0 ? 0 : 1;\n\t\t\t\tvar right = left === 0 ? 1 : 0;\n\t\t\t\tinsertLeft(b, appended[left]);\n\t\t\t\ta = parentise(appended[right], appended[right].height + 1);\n\t\t\t}\n\t\t}\n\n\t\t// Check if balancing is needed and return based on that.\n\t\tif (a.table.length === 0 || b.table.length === 0) {\n\t\t\treturn [a, b];\n\t\t}\n\n\t\tvar toRemove = calcToRemove(a, b);\n\t\tif (toRemove <= E) {\n\t\t\treturn [a, b];\n\t\t}\n\t\treturn shuffle(a, b, toRemove);\n\t}\n\n\t// Helperfunctions for append_. Replaces a child node at the side of the parent.\n\tfunction insertRight(parent, node) {\n\t\tvar index = parent.table.length - 1;\n\t\tparent.table[index] = node;\n\t\tparent.lengths[index] = length(node);\n\t\tparent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;\n\t}\n\n\tfunction insertLeft(parent, node) {\n\t\tif (node.table.length > 0) {\n\t\t\tparent.table[0] = node;\n\t\t\tparent.lengths[0] = length(node);\n\n\t\t\tvar len = length(parent.table[0]);\n\t\t\tfor (var i = 1; i < parent.lengths.length; i++) {\n\t\t\t\tlen += length(parent.table[i]);\n\t\t\t\tparent.lengths[i] = len;\n\t\t\t}\n\t\t} else {\n\t\t\tparent.table.shift();\n\t\t\tfor (var i = 1; i < parent.lengths.length; i++) {\n\t\t\t\tparent.lengths[i] = parent.lengths[i] - parent.lengths[0];\n\t\t\t}\n\t\t\tparent.lengths.shift();\n\t\t}\n\t}\n\n\t// Returns the extra search steps for E. Refer to the paper.\n\tfunction calcToRemove(a, b) {\n\t\tvar subLengths = 0;\n\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\tsubLengths += a.table[i].table.length;\n\t\t}\n\t\tfor (var i = 0; i < b.table.length; i++) {\n\t\t\tsubLengths += b.table[i].table.length;\n\t\t}\n\n\t\tvar toRemove = a.table.length + b.table.length;\n\t\treturn toRemove - (Math.floor((subLengths - 1) / M) + 1);\n\t}\n\n\t// get2, set2 and saveSlot are helpers for accessing elements over two arrays.\n\tfunction get2(a, b, index) {\n\t\treturn index < a.length ? a[index] : b[index - a.length];\n\t}\n\n\tfunction set2(a, b, index, value) {\n\t\tif (index < a.length) {\n\t\t\ta[index] = value;\n\t\t} else {\n\t\t\tb[index - a.length] = value;\n\t\t}\n\t}\n\n\tfunction saveSlot(a, b, index, slot) {\n\t\tset2(a.table, b.table, index, slot);\n\n\t\tvar l = index === 0 || index === a.lengths.length ? 0 : get2(a.lengths, a.lengths, index - 1);\n\n\t\tset2(a.lengths, b.lengths, index, l + length(slot));\n\t}\n\n\t// Creates a node or leaf with a given length at their arrays for perfomance.\n\t// Is only used by shuffle.\n\tfunction createNode(h, length) {\n\t\tif (length < 0) {\n\t\t\tlength = 0;\n\t\t}\n\t\tvar a = {\n\t\t\tctor: '_Array',\n\t\t\theight: h,\n\t\t\ttable: new Array(length)\n\t\t};\n\t\tif (h > 0) {\n\t\t\ta.lengths = new Array(length);\n\t\t}\n\t\treturn a;\n\t}\n\n\t// Returns an array of two balanced nodes.\n\tfunction shuffle(a, b, toRemove) {\n\t\tvar newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));\n\t\tvar newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));\n\n\t\t// Skip the slots with size M. More precise: copy the slot references\n\t\t// to the new node\n\t\tvar read = 0;\n\t\twhile (get2(a.table, b.table, read).table.length % M === 0) {\n\t\t\tset2(newA.table, newB.table, read, get2(a.table, b.table, read));\n\t\t\tset2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));\n\t\t\tread++;\n\t\t}\n\n\t\t// Pulling items from left to right, caching in a slot before writing\n\t\t// it into the new nodes.\n\t\tvar write = read;\n\t\tvar slot = new createNode(a.height - 1, 0);\n\t\tvar from = 0;\n\n\t\t// If the current slot is still containing data, then there will be at\n\t\t// least one more write, so we do not break this loop yet.\n\t\twhile (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove) {\n\t\t\t// Find out the max possible items for copying.\n\t\t\tvar source = get2(a.table, b.table, read);\n\t\t\tvar to = Math.min(M - slot.table.length, source.table.length);\n\n\t\t\t// Copy and adjust size table.\n\t\t\tslot.table = slot.table.concat(source.table.slice(from, to));\n\t\t\tif (slot.height > 0) {\n\t\t\t\tvar len = slot.lengths.length;\n\t\t\t\tfor (var i = len; i < len + to - from; i++) {\n\t\t\t\t\tslot.lengths[i] = length(slot.table[i]);\n\t\t\t\t\tslot.lengths[i] += i > 0 ? slot.lengths[i - 1] : 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfrom += to;\n\n\t\t\t// Only proceed to next slots[i] if the current one was\n\t\t\t// fully copied.\n\t\t\tif (source.table.length <= to) {\n\t\t\t\tread++;from = 0;\n\t\t\t}\n\n\t\t\t// Only create a new slot if the current one is filled up.\n\t\t\tif (slot.table.length === M) {\n\t\t\t\tsaveSlot(newA, newB, write, slot);\n\t\t\t\tslot = createNode(a.height - 1, 0);\n\t\t\t\twrite++;\n\t\t\t}\n\t\t}\n\n\t\t// Cleanup after the loop. Copy the last slot into the new nodes.\n\t\tif (slot.table.length > 0) {\n\t\t\tsaveSlot(newA, newB, write, slot);\n\t\t\twrite++;\n\t\t}\n\n\t\t// Shift the untouched slots to the left\n\t\twhile (read < a.table.length + b.table.length) {\n\t\t\tsaveSlot(newA, newB, write, get2(a.table, b.table, read));\n\t\t\tread++;\n\t\t\twrite++;\n\t\t}\n\n\t\treturn [newA, newB];\n\t}\n\n\t// Navigation functions\n\tfunction botRight(a) {\n\t\treturn a.table[a.table.length - 1];\n\t}\n\tfunction botLeft(a) {\n\t\treturn a.table[0];\n\t}\n\n\t// Copies a node for updating. Note that you should not use this if\n\t// only updating only one of \"table\" or \"lengths\" for performance reasons.\n\tfunction nodeCopy(a) {\n\t\tvar newA = {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height,\n\t\t\ttable: a.table.slice()\n\t\t};\n\t\tif (a.height > 0) {\n\t\t\tnewA.lengths = a.lengths.slice();\n\t\t}\n\t\treturn newA;\n\t}\n\n\t// Returns how many items are in the tree.\n\tfunction length(array) {\n\t\tif (array.height === 0) {\n\t\t\treturn array.table.length;\n\t\t} else {\n\t\t\treturn array.lengths[array.lengths.length - 1];\n\t\t}\n\t}\n\n\t// Calculates in which slot of \"table\" the item probably is, then\n\t// find the exact slot via forward searching in  \"lengths\". Returns the index.\n\tfunction getSlot(i, a) {\n\t\tvar slot = i >> 5 * a.height;\n\t\twhile (a.lengths[slot] <= i) {\n\t\t\tslot++;\n\t\t}\n\t\treturn slot;\n\t}\n\n\t// Recursively creates a tree with a given height containing\n\t// only the given item.\n\tfunction create(item, h) {\n\t\tif (h === 0) {\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: 0,\n\t\t\t\ttable: [item]\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tctor: '_Array',\n\t\t\theight: h,\n\t\t\ttable: [create(item, h - 1)],\n\t\t\tlengths: [1]\n\t\t};\n\t}\n\n\t// Recursively creates a tree that contains the given tree.\n\tfunction parentise(tree, h) {\n\t\tif (h === tree.height) {\n\t\t\treturn tree;\n\t\t}\n\n\t\treturn {\n\t\t\tctor: '_Array',\n\t\t\theight: h,\n\t\t\ttable: [parentise(tree, h - 1)],\n\t\t\tlengths: [length(tree)]\n\t\t};\n\t}\n\n\t// Emphasizes blood brotherhood beneath two trees.\n\tfunction siblise(a, b) {\n\t\treturn {\n\t\t\tctor: '_Array',\n\t\t\theight: a.height + 1,\n\t\t\ttable: [a, b],\n\t\t\tlengths: [length(a), length(a) + length(b)]\n\t\t};\n\t}\n\n\tfunction toJSArray(a) {\n\t\tvar jsArray = new Array(length(a));\n\t\ttoJSArray_(jsArray, 0, a);\n\t\treturn jsArray;\n\t}\n\n\tfunction toJSArray_(jsArray, i, a) {\n\t\tfor (var t = 0; t < a.table.length; t++) {\n\t\t\tif (a.height === 0) {\n\t\t\t\tjsArray[i + t] = a.table[t];\n\t\t\t} else {\n\t\t\t\tvar inc = t === 0 ? 0 : a.lengths[t - 1];\n\t\t\t\ttoJSArray_(jsArray, i + inc, a.table[t]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction fromJSArray(jsArray) {\n\t\tif (jsArray.length === 0) {\n\t\t\treturn empty;\n\t\t}\n\t\tvar h = Math.floor(Math.log(jsArray.length) / Math.log(M));\n\t\treturn fromJSArray_(jsArray, h, 0, jsArray.length);\n\t}\n\n\tfunction fromJSArray_(jsArray, h, from, to) {\n\t\tif (h === 0) {\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: 0,\n\t\t\t\ttable: jsArray.slice(from, to)\n\t\t\t};\n\t\t}\n\n\t\tvar step = Math.pow(M, h);\n\t\tvar table = new Array(Math.ceil((to - from) / step));\n\t\tvar lengths = new Array(table.length);\n\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\ttable[i] = fromJSArray_(jsArray, h - 1, from + i * step, Math.min(from + (i + 1) * step, to));\n\t\t\tlengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);\n\t\t}\n\t\treturn {\n\t\t\tctor: '_Array',\n\t\t\theight: h,\n\t\t\ttable: table,\n\t\t\tlengths: lengths\n\t\t};\n\t}\n\n\treturn {\n\t\tempty: empty,\n\t\tfromList: fromList,\n\t\ttoList: toList,\n\t\tinitialize: F2(initialize),\n\t\tappend: F2(append),\n\t\tpush: F2(push),\n\t\tslice: F3(slice),\n\t\tget: F2(get),\n\t\tset: F3(set),\n\t\tmap: F2(map),\n\t\tindexedMap: F2(indexedMap),\n\t\tfoldl: F3(foldl),\n\t\tfoldr: F3(foldr),\n\t\tlength: length,\n\n\t\ttoJSArray: toJSArray,\n\t\tfromJSArray: fromJSArray\n\t};\n}();\n","'use strict';\n\n//import Native.Utils //\n\nvar _elm_lang$core$Native_Basics = function () {\n\n\tfunction div(a, b) {\n\t\treturn a / b | 0;\n\t}\n\tfunction rem(a, b) {\n\t\treturn a % b;\n\t}\n\tfunction mod(a, b) {\n\t\tif (b === 0) {\n\t\t\tthrow new Error('Cannot perform mod 0. Division by zero error.');\n\t\t}\n\t\tvar r = a % b;\n\t\tvar m = a === 0 ? 0 : b > 0 ? a >= 0 ? r : r + b : -mod(-a, -b);\n\n\t\treturn m === b ? 0 : m;\n\t}\n\tfunction logBase(base, n) {\n\t\treturn Math.log(n) / Math.log(base);\n\t}\n\tfunction negate(n) {\n\t\treturn -n;\n\t}\n\tfunction abs(n) {\n\t\treturn n < 0 ? -n : n;\n\t}\n\n\tfunction min(a, b) {\n\t\treturn _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;\n\t}\n\tfunction max(a, b) {\n\t\treturn _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;\n\t}\n\tfunction clamp(lo, hi, n) {\n\t\treturn _elm_lang$core$Native_Utils.cmp(n, lo) < 0 ? lo : _elm_lang$core$Native_Utils.cmp(n, hi) > 0 ? hi : n;\n\t}\n\n\tvar ord = ['LT', 'EQ', 'GT'];\n\n\tfunction compare(x, y) {\n\t\treturn { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };\n\t}\n\n\tfunction xor(a, b) {\n\t\treturn a !== b;\n\t}\n\tfunction not(b) {\n\t\treturn !b;\n\t}\n\tfunction isInfinite(n) {\n\t\treturn n === Infinity || n === -Infinity;\n\t}\n\n\tfunction truncate(n) {\n\t\treturn n | 0;\n\t}\n\n\tfunction degrees(d) {\n\t\treturn d * Math.PI / 180;\n\t}\n\tfunction turns(t) {\n\t\treturn 2 * Math.PI * t;\n\t}\n\tfunction fromPolar(point) {\n\t\tvar r = point._0;\n\t\tvar t = point._1;\n\t\treturn _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));\n\t}\n\tfunction toPolar(point) {\n\t\tvar x = point._0;\n\t\tvar y = point._1;\n\t\treturn _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));\n\t}\n\n\treturn {\n\t\tdiv: F2(div),\n\t\trem: F2(rem),\n\t\tmod: F2(mod),\n\n\t\tpi: Math.PI,\n\t\te: Math.E,\n\t\tcos: Math.cos,\n\t\tsin: Math.sin,\n\t\ttan: Math.tan,\n\t\tacos: Math.acos,\n\t\tasin: Math.asin,\n\t\tatan: Math.atan,\n\t\tatan2: F2(Math.atan2),\n\n\t\tdegrees: degrees,\n\t\tturns: turns,\n\t\tfromPolar: fromPolar,\n\t\ttoPolar: toPolar,\n\n\t\tsqrt: Math.sqrt,\n\t\tlogBase: F2(logBase),\n\t\tnegate: negate,\n\t\tabs: abs,\n\t\tmin: F2(min),\n\t\tmax: F2(max),\n\t\tclamp: F3(clamp),\n\t\tcompare: F2(compare),\n\n\t\txor: F2(xor),\n\t\tnot: not,\n\n\t\ttruncate: truncate,\n\t\tceiling: Math.ceil,\n\t\tfloor: Math.floor,\n\t\tround: Math.round,\n\t\ttoFloat: function toFloat(x) {\n\t\t\treturn x;\n\t\t},\n\t\tisNaN: isNaN,\n\t\tisInfinite: isInfinite\n\t};\n}();\n","\"use strict\";\n\nvar _elm_lang$core$Native_Bitwise = function () {\n\n\treturn {\n\t\tand: F2(function and(a, b) {\n\t\t\treturn a & b;\n\t\t}),\n\t\tor: F2(function or(a, b) {\n\t\t\treturn a | b;\n\t\t}),\n\t\txor: F2(function xor(a, b) {\n\t\t\treturn a ^ b;\n\t\t}),\n\t\tcomplement: function complement(a) {\n\t\t\treturn ~a;\n\t\t},\n\t\tshiftLeftBy: F2(function (offset, a) {\n\t\t\treturn a << offset;\n\t\t}),\n\t\tshiftRightBy: F2(function (offset, a) {\n\t\t\treturn a >> offset;\n\t\t}),\n\t\tshiftRightZfBy: F2(function (offset, a) {\n\t\t\treturn a >>> offset;\n\t\t})\n\t};\n}();\n","\"use strict\";\n\n//import Native.Utils //\n\nvar _elm_lang$core$Native_Char = function () {\n\n\treturn {\n\t\tfromCode: function fromCode(c) {\n\t\t\treturn _elm_lang$core$Native_Utils.chr(String.fromCharCode(c));\n\t\t},\n\t\ttoCode: function toCode(c) {\n\t\t\treturn c.charCodeAt(0);\n\t\t},\n\t\ttoUpper: function toUpper(c) {\n\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toUpperCase());\n\t\t},\n\t\ttoLower: function toLower(c) {\n\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLowerCase());\n\t\t},\n\t\ttoLocaleUpper: function toLocaleUpper(c) {\n\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase());\n\t\t},\n\t\ttoLocaleLower: function toLocaleLower(c) {\n\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase());\n\t\t}\n\t};\n}();\n","'use strict';\n\n//import Result //\n\nvar _elm_lang$core$Native_Date = function () {\n\n\tfunction fromString(str) {\n\t\tvar date = new Date(str);\n\t\treturn isNaN(date.getTime()) ? _elm_lang$core$Result$Err('Unable to parse \\'' + str + '\\' as a date. Dates must be in the ISO 8601 format.') : _elm_lang$core$Result$Ok(date);\n\t}\n\n\tvar dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\tvar monthTable = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n\treturn {\n\t\tfromString: fromString,\n\t\tyear: function year(d) {\n\t\t\treturn d.getFullYear();\n\t\t},\n\t\tmonth: function month(d) {\n\t\t\treturn { ctor: monthTable[d.getMonth()] };\n\t\t},\n\t\tday: function day(d) {\n\t\t\treturn d.getDate();\n\t\t},\n\t\thour: function hour(d) {\n\t\t\treturn d.getHours();\n\t\t},\n\t\tminute: function minute(d) {\n\t\t\treturn d.getMinutes();\n\t\t},\n\t\tsecond: function second(d) {\n\t\t\treturn d.getSeconds();\n\t\t},\n\t\tmillisecond: function millisecond(d) {\n\t\t\treturn d.getMilliseconds();\n\t\t},\n\t\ttoTime: function toTime(d) {\n\t\t\treturn d.getTime();\n\t\t},\n\t\tfromTime: function fromTime(t) {\n\t\t\treturn new Date(t);\n\t\t},\n\t\tdayOfWeek: function dayOfWeek(d) {\n\t\t\treturn { ctor: dayTable[d.getDay()] };\n\t\t}\n\t};\n}();\n","'use strict';\n\n//import Native.Utils //\n\nvar _elm_lang$core$Native_Debug = function () {\n\n\tfunction log(tag, value) {\n\t\tvar msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);\n\t\tvar process = process || {};\n\t\tif (process.stdout) {\n\t\t\tprocess.stdout.write(msg);\n\t\t} else {\n\t\t\tconsole.log(msg);\n\t\t}\n\t\treturn value;\n\t}\n\n\tfunction crash(message) {\n\t\tthrow new Error(message);\n\t}\n\n\treturn {\n\t\tcrash: crash,\n\t\tlog: F2(log)\n\t};\n}();\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//import Maybe, Native.Array, Native.List, Native.Utils, Result //\n\nvar _elm_lang$core$Native_Json = function () {\n\n\t// CORE DECODERS\n\n\tfunction succeed(msg) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'succeed',\n\t\t\tmsg: msg\n\t\t};\n\t}\n\n\tfunction fail(msg) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'fail',\n\t\t\tmsg: msg\n\t\t};\n\t}\n\n\tfunction decodePrimitive(tag) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: tag\n\t\t};\n\t}\n\n\tfunction decodeContainer(tag, decoder) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: tag,\n\t\t\tdecoder: decoder\n\t\t};\n\t}\n\n\tfunction decodeNull(value) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'null',\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tfunction decodeField(field, decoder) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'field',\n\t\t\tfield: field,\n\t\t\tdecoder: decoder\n\t\t};\n\t}\n\n\tfunction decodeIndex(index, decoder) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'index',\n\t\t\tindex: index,\n\t\t\tdecoder: decoder\n\t\t};\n\t}\n\n\tfunction decodeKeyValuePairs(decoder) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'key-value',\n\t\t\tdecoder: decoder\n\t\t};\n\t}\n\n\tfunction mapMany(f, decoders) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'map-many',\n\t\t\tfunc: f,\n\t\t\tdecoders: decoders\n\t\t};\n\t}\n\n\tfunction andThen(callback, decoder) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'andThen',\n\t\t\tdecoder: decoder,\n\t\t\tcallback: callback\n\t\t};\n\t}\n\n\tfunction oneOf(decoders) {\n\t\treturn {\n\t\t\tctor: '<decoder>',\n\t\t\ttag: 'oneOf',\n\t\t\tdecoders: decoders\n\t\t};\n\t}\n\n\t// DECODING OBJECTS\n\n\tfunction map1(f, d1) {\n\t\treturn mapMany(f, [d1]);\n\t}\n\n\tfunction map2(f, d1, d2) {\n\t\treturn mapMany(f, [d1, d2]);\n\t}\n\n\tfunction map3(f, d1, d2, d3) {\n\t\treturn mapMany(f, [d1, d2, d3]);\n\t}\n\n\tfunction map4(f, d1, d2, d3, d4) {\n\t\treturn mapMany(f, [d1, d2, d3, d4]);\n\t}\n\n\tfunction map5(f, d1, d2, d3, d4, d5) {\n\t\treturn mapMany(f, [d1, d2, d3, d4, d5]);\n\t}\n\n\tfunction map6(f, d1, d2, d3, d4, d5, d6) {\n\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6]);\n\t}\n\n\tfunction map7(f, d1, d2, d3, d4, d5, d6, d7) {\n\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);\n\t}\n\n\tfunction map8(f, d1, d2, d3, d4, d5, d6, d7, d8) {\n\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);\n\t}\n\n\t// DECODE HELPERS\n\n\tfunction ok(value) {\n\t\treturn { tag: 'ok', value: value };\n\t}\n\n\tfunction badPrimitive(type, value) {\n\t\treturn { tag: 'primitive', type: type, value: value };\n\t}\n\n\tfunction badIndex(index, nestedProblems) {\n\t\treturn { tag: 'index', index: index, rest: nestedProblems };\n\t}\n\n\tfunction badField(field, nestedProblems) {\n\t\treturn { tag: 'field', field: field, rest: nestedProblems };\n\t}\n\n\tfunction badIndex(index, nestedProblems) {\n\t\treturn { tag: 'index', index: index, rest: nestedProblems };\n\t}\n\n\tfunction badOneOf(problems) {\n\t\treturn { tag: 'oneOf', problems: problems };\n\t}\n\n\tfunction bad(msg) {\n\t\treturn { tag: 'fail', msg: msg };\n\t}\n\n\tfunction badToString(problem) {\n\t\tvar context = '_';\n\t\twhile (problem) {\n\t\t\tswitch (problem.tag) {\n\t\t\t\tcase 'primitive':\n\t\t\t\t\treturn 'Expecting ' + problem.type + (context === '_' ? '' : ' at ' + context) + ' but instead got: ' + jsToString(problem.value);\n\n\t\t\t\tcase 'index':\n\t\t\t\t\tcontext += '[' + problem.index + ']';\n\t\t\t\t\tproblem = problem.rest;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'field':\n\t\t\t\t\tcontext += '.' + problem.field;\n\t\t\t\t\tproblem = problem.rest;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'oneOf':\n\t\t\t\t\tvar problems = problem.problems;\n\t\t\t\t\tfor (var i = 0; i < problems.length; i++) {\n\t\t\t\t\t\tproblems[i] = badToString(problems[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn 'I ran into the following problems' + (context === '_' ? '' : ' at ' + context) + ':\\n\\n' + problems.join('\\n');\n\n\t\t\t\tcase 'fail':\n\t\t\t\t\treturn 'I ran into a `fail` decoder' + (context === '_' ? '' : ' at ' + context) + ': ' + problem.msg;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction jsToString(value) {\n\t\treturn value === undefined ? 'undefined' : JSON.stringify(value);\n\t}\n\n\t// DECODE\n\n\tfunction runOnString(decoder, string) {\n\t\tvar json;\n\t\ttry {\n\t\t\tjson = JSON.parse(string);\n\t\t} catch (e) {\n\t\t\treturn _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);\n\t\t}\n\t\treturn run(decoder, json);\n\t}\n\n\tfunction run(decoder, value) {\n\t\tvar result = runHelp(decoder, value);\n\t\treturn result.tag === 'ok' ? _elm_lang$core$Result$Ok(result.value) : _elm_lang$core$Result$Err(badToString(result));\n\t}\n\n\tfunction runHelp(decoder, value) {\n\t\tswitch (decoder.tag) {\n\t\t\tcase 'bool':\n\t\t\t\treturn typeof value === 'boolean' ? ok(value) : badPrimitive('a Bool', value);\n\n\t\t\tcase 'int':\n\t\t\t\tif (typeof value !== 'number') {\n\t\t\t\t\treturn badPrimitive('an Int', value);\n\t\t\t\t}\n\n\t\t\t\tif (-2147483647 < value && value < 2147483647 && (value | 0) === value) {\n\t\t\t\t\treturn ok(value);\n\t\t\t\t}\n\n\t\t\t\tif (isFinite(value) && !(value % 1)) {\n\t\t\t\t\treturn ok(value);\n\t\t\t\t}\n\n\t\t\t\treturn badPrimitive('an Int', value);\n\n\t\t\tcase 'float':\n\t\t\t\treturn typeof value === 'number' ? ok(value) : badPrimitive('a Float', value);\n\n\t\t\tcase 'string':\n\t\t\t\treturn typeof value === 'string' ? ok(value) : value instanceof String ? ok(value + '') : badPrimitive('a String', value);\n\n\t\t\tcase 'null':\n\t\t\t\treturn value === null ? ok(decoder.value) : badPrimitive('null', value);\n\n\t\t\tcase 'value':\n\t\t\t\treturn ok(value);\n\n\t\t\tcase 'list':\n\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\treturn badPrimitive('a List', value);\n\t\t\t\t}\n\n\t\t\t\tvar list = _elm_lang$core$Native_List.Nil;\n\t\t\t\tfor (var i = value.length; i--;) {\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value[i]);\n\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\treturn badIndex(i, result);\n\t\t\t\t\t}\n\t\t\t\t\tlist = _elm_lang$core$Native_List.Cons(result.value, list);\n\t\t\t\t}\n\t\t\t\treturn ok(list);\n\n\t\t\tcase 'array':\n\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\treturn badPrimitive('an Array', value);\n\t\t\t\t}\n\n\t\t\t\tvar len = value.length;\n\t\t\t\tvar array = new Array(len);\n\t\t\t\tfor (var i = len; i--;) {\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value[i]);\n\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\treturn badIndex(i, result);\n\t\t\t\t\t}\n\t\t\t\t\tarray[i] = result.value;\n\t\t\t\t}\n\t\t\t\treturn ok(_elm_lang$core$Native_Array.fromJSArray(array));\n\n\t\t\tcase 'maybe':\n\t\t\t\tvar result = runHelp(decoder.decoder, value);\n\t\t\t\treturn result.tag === 'ok' ? ok(_elm_lang$core$Maybe$Just(result.value)) : ok(_elm_lang$core$Maybe$Nothing);\n\n\t\t\tcase 'field':\n\t\t\t\tvar field = decoder.field;\n\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || !(field in value)) {\n\t\t\t\t\treturn badPrimitive('an object with a field named `' + field + '`', value);\n\t\t\t\t}\n\n\t\t\t\tvar result = runHelp(decoder.decoder, value[field]);\n\t\t\t\treturn result.tag === 'ok' ? result : badField(field, result);\n\n\t\t\tcase 'index':\n\t\t\t\tvar index = decoder.index;\n\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\treturn badPrimitive('an array', value);\n\t\t\t\t}\n\t\t\t\tif (index >= value.length) {\n\t\t\t\t\treturn badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);\n\t\t\t\t}\n\n\t\t\t\tvar result = runHelp(decoder.decoder, value[index]);\n\t\t\t\treturn result.tag === 'ok' ? result : badIndex(index, result);\n\n\t\t\tcase 'key-value':\n\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || value instanceof Array) {\n\t\t\t\t\treturn badPrimitive('an object', value);\n\t\t\t\t}\n\n\t\t\t\tvar keyValuePairs = _elm_lang$core$Native_List.Nil;\n\t\t\t\tfor (var key in value) {\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value[key]);\n\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\treturn badField(key, result);\n\t\t\t\t\t}\n\t\t\t\t\tvar pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);\n\t\t\t\t\tkeyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);\n\t\t\t\t}\n\t\t\t\treturn ok(keyValuePairs);\n\n\t\t\tcase 'map-many':\n\t\t\t\tvar answer = decoder.func;\n\t\t\t\tvar decoders = decoder.decoders;\n\t\t\t\tfor (var i = 0; i < decoders.length; i++) {\n\t\t\t\t\tvar result = runHelp(decoders[i], value);\n\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t\tanswer = answer(result.value);\n\t\t\t\t}\n\t\t\t\treturn ok(answer);\n\n\t\t\tcase 'andThen':\n\t\t\t\tvar result = runHelp(decoder.decoder, value);\n\t\t\t\treturn result.tag !== 'ok' ? result : runHelp(decoder.callback(result.value), value);\n\n\t\t\tcase 'oneOf':\n\t\t\t\tvar errors = [];\n\t\t\t\tvar temp = decoder.decoders;\n\t\t\t\twhile (temp.ctor !== '[]') {\n\t\t\t\t\tvar result = runHelp(temp._0, value);\n\n\t\t\t\t\tif (result.tag === 'ok') {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\terrors.push(result);\n\n\t\t\t\t\ttemp = temp._1;\n\t\t\t\t}\n\t\t\t\treturn badOneOf(errors);\n\n\t\t\tcase 'fail':\n\t\t\t\treturn bad(decoder.msg);\n\n\t\t\tcase 'succeed':\n\t\t\t\treturn ok(decoder.msg);\n\t\t}\n\t}\n\n\t// EQUALITY\n\n\tfunction equality(a, b) {\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (a.tag !== b.tag) {\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (a.tag) {\n\t\t\tcase 'succeed':\n\t\t\tcase 'fail':\n\t\t\t\treturn a.msg === b.msg;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'int':\n\t\t\tcase 'float':\n\t\t\tcase 'string':\n\t\t\tcase 'value':\n\t\t\t\treturn true;\n\n\t\t\tcase 'null':\n\t\t\t\treturn a.value === b.value;\n\n\t\t\tcase 'list':\n\t\t\tcase 'array':\n\t\t\tcase 'maybe':\n\t\t\tcase 'key-value':\n\t\t\t\treturn equality(a.decoder, b.decoder);\n\n\t\t\tcase 'field':\n\t\t\t\treturn a.field === b.field && equality(a.decoder, b.decoder);\n\n\t\t\tcase 'index':\n\t\t\t\treturn a.index === b.index && equality(a.decoder, b.decoder);\n\n\t\t\tcase 'map-many':\n\t\t\t\tif (a.func !== b.func) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn listEquality(a.decoders, b.decoders);\n\n\t\t\tcase 'andThen':\n\t\t\t\treturn a.callback === b.callback && equality(a.decoder, b.decoder);\n\n\t\t\tcase 'oneOf':\n\t\t\t\treturn listEquality(a.decoders, b.decoders);\n\t\t}\n\t}\n\n\tfunction listEquality(aDecoders, bDecoders) {\n\t\tvar len = aDecoders.length;\n\t\tif (len !== bDecoders.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif (!equality(aDecoders[i], bDecoders[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// ENCODE\n\n\tfunction encode(indentLevel, value) {\n\t\treturn JSON.stringify(value, null, indentLevel);\n\t}\n\n\tfunction identity(value) {\n\t\treturn value;\n\t}\n\n\tfunction encodeObject(keyValuePairs) {\n\t\tvar obj = {};\n\t\twhile (keyValuePairs.ctor !== '[]') {\n\t\t\tvar pair = keyValuePairs._0;\n\t\t\tobj[pair._0] = pair._1;\n\t\t\tkeyValuePairs = keyValuePairs._1;\n\t\t}\n\t\treturn obj;\n\t}\n\n\treturn {\n\t\tencode: F2(encode),\n\t\trunOnString: F2(runOnString),\n\t\trun: F2(run),\n\n\t\tdecodeNull: decodeNull,\n\t\tdecodePrimitive: decodePrimitive,\n\t\tdecodeContainer: F2(decodeContainer),\n\n\t\tdecodeField: F2(decodeField),\n\t\tdecodeIndex: F2(decodeIndex),\n\n\t\tmap1: F2(map1),\n\t\tmap2: F3(map2),\n\t\tmap3: F4(map3),\n\t\tmap4: F5(map4),\n\t\tmap5: F6(map5),\n\t\tmap6: F7(map6),\n\t\tmap7: F8(map7),\n\t\tmap8: F9(map8),\n\t\tdecodeKeyValuePairs: decodeKeyValuePairs,\n\n\t\tandThen: F2(andThen),\n\t\tfail: fail,\n\t\tsucceed: succeed,\n\t\toneOf: oneOf,\n\n\t\tidentity: identity,\n\t\tencodeNull: null,\n\t\tencodeArray: _elm_lang$core$Native_Array.toJSArray,\n\t\tencodeList: _elm_lang$core$Native_List.toArray,\n\t\tencodeObject: encodeObject,\n\n\t\tequality: equality\n\t};\n}();\n","'use strict';\n\n//import Native.Utils //\n\nvar _elm_lang$core$Native_List = function () {\n\n\tvar Nil = { ctor: '[]' };\n\n\tfunction Cons(hd, tl) {\n\t\treturn { ctor: '::', _0: hd, _1: tl };\n\t}\n\n\tfunction fromArray(arr) {\n\t\tvar out = Nil;\n\t\tfor (var i = arr.length; i--;) {\n\t\t\tout = Cons(arr[i], out);\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction toArray(xs) {\n\t\tvar out = [];\n\t\twhile (xs.ctor !== '[]') {\n\t\t\tout.push(xs._0);\n\t\t\txs = xs._1;\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction foldr(f, b, xs) {\n\t\tvar arr = toArray(xs);\n\t\tvar acc = b;\n\t\tfor (var i = arr.length; i--;) {\n\t\t\tacc = A2(f, arr[i], acc);\n\t\t}\n\t\treturn acc;\n\t}\n\n\tfunction map2(f, xs, ys) {\n\t\tvar arr = [];\n\t\twhile (xs.ctor !== '[]' && ys.ctor !== '[]') {\n\t\t\tarr.push(A2(f, xs._0, ys._0));\n\t\t\txs = xs._1;\n\t\t\tys = ys._1;\n\t\t}\n\t\treturn fromArray(arr);\n\t}\n\n\tfunction map3(f, xs, ys, zs) {\n\t\tvar arr = [];\n\t\twhile (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\tarr.push(A3(f, xs._0, ys._0, zs._0));\n\t\t\txs = xs._1;\n\t\t\tys = ys._1;\n\t\t\tzs = zs._1;\n\t\t}\n\t\treturn fromArray(arr);\n\t}\n\n\tfunction map4(f, ws, xs, ys, zs) {\n\t\tvar arr = [];\n\t\twhile (ws.ctor !== '[]' && xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\tarr.push(A4(f, ws._0, xs._0, ys._0, zs._0));\n\t\t\tws = ws._1;\n\t\t\txs = xs._1;\n\t\t\tys = ys._1;\n\t\t\tzs = zs._1;\n\t\t}\n\t\treturn fromArray(arr);\n\t}\n\n\tfunction map5(f, vs, ws, xs, ys, zs) {\n\t\tvar arr = [];\n\t\twhile (vs.ctor !== '[]' && ws.ctor !== '[]' && xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\tarr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));\n\t\t\tvs = vs._1;\n\t\t\tws = ws._1;\n\t\t\txs = xs._1;\n\t\t\tys = ys._1;\n\t\t\tzs = zs._1;\n\t\t}\n\t\treturn fromArray(arr);\n\t}\n\n\tfunction sortBy(f, xs) {\n\t\treturn fromArray(toArray(xs).sort(function (a, b) {\n\t\t\treturn _elm_lang$core$Native_Utils.cmp(f(a), f(b));\n\t\t}));\n\t}\n\n\tfunction sortWith(f, xs) {\n\t\treturn fromArray(toArray(xs).sort(function (a, b) {\n\t\t\tvar ord = f(a)(b).ctor;\n\t\t\treturn ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;\n\t\t}));\n\t}\n\n\treturn {\n\t\tNil: Nil,\n\t\tCons: Cons,\n\t\tcons: F2(Cons),\n\t\ttoArray: toArray,\n\t\tfromArray: fromArray,\n\n\t\tfoldr: F3(foldr),\n\n\t\tmap2: F3(map2),\n\t\tmap3: F4(map3),\n\t\tmap4: F5(map4),\n\t\tmap5: F6(map5),\n\t\tsortBy: F2(sortBy),\n\t\tsortWith: F2(sortWith)\n\t};\n}();\n","'use strict';\n\n//import //\n\nvar _elm_lang$core$Native_Platform = function () {\n\n\t// PROGRAMS\n\n\tfunction program(impl) {\n\t\treturn function (flagDecoder) {\n\t\t\treturn function (object, moduleName) {\n\t\t\t\tobject['worker'] = function worker(flags) {\n\t\t\t\t\tif (typeof flags !== 'undefined') {\n\t\t\t\t\t\tthrow new Error('The `' + moduleName + '` module does not need flags.\\n' + 'Call ' + moduleName + '.worker() with no arguments and you should be all set!');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn initialize(impl.init, impl.update, impl.subscriptions, renderer);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction programWithFlags(impl) {\n\t\treturn function (flagDecoder) {\n\t\t\treturn function (object, moduleName) {\n\t\t\t\tobject['worker'] = function worker(flags) {\n\t\t\t\t\tif (typeof flagDecoder === 'undefined') {\n\t\t\t\t\t\tthrow new Error('Are you trying to sneak a Never value into Elm? Trickster!\\n' + 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\\n' + 'Use `program` instead if you do not want flags.');\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);\n\t\t\t\t\tif (result.ctor === 'Err') {\n\t\t\t\t\t\tthrow new Error(moduleName + '.worker(...) was called with an unexpected argument.\\n' + 'I tried to convert it to an Elm value, but ran into this problem:\\n\\n' + result._0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn initialize(impl.init(result._0), impl.update, impl.subscriptions, renderer);\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction renderer(enqueue, _) {\n\t\treturn function (_) {};\n\t}\n\n\t// HTML TO PROGRAM\n\n\tfunction htmlToProgram(vnode) {\n\t\tvar emptyBag = batch(_elm_lang$core$Native_List.Nil);\n\t\tvar noChange = _elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.Tuple0, emptyBag);\n\n\t\treturn _elm_lang$virtual_dom$VirtualDom$program({\n\t\t\tinit: noChange,\n\t\t\tview: function view(model) {\n\t\t\t\treturn main;\n\t\t\t},\n\t\t\tupdate: F2(function (msg, model) {\n\t\t\t\treturn noChange;\n\t\t\t}),\n\t\t\tsubscriptions: function subscriptions(model) {\n\t\t\t\treturn emptyBag;\n\t\t\t}\n\t\t});\n\t}\n\n\t// INITIALIZE A PROGRAM\n\n\tfunction initialize(init, update, subscriptions, renderer) {\n\t\t// ambient state\n\t\tvar managers = {};\n\t\tvar updateView;\n\n\t\t// init and update state in main process\n\t\tvar initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\tvar model = init._0;\n\t\t\tupdateView = renderer(enqueue, model);\n\t\t\tvar cmds = init._1;\n\t\t\tvar subs = subscriptions(model);\n\t\t\tdispatchEffects(managers, cmds, subs);\n\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(model));\n\t\t});\n\n\t\tfunction onMessage(msg, model) {\n\t\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\t\tvar results = A2(update, msg, model);\n\t\t\t\tmodel = results._0;\n\t\t\t\tupdateView(model);\n\t\t\t\tvar cmds = results._1;\n\t\t\t\tvar subs = subscriptions(model);\n\t\t\t\tdispatchEffects(managers, cmds, subs);\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(model));\n\t\t\t});\n\t\t}\n\n\t\tvar mainProcess = spawnLoop(initApp, onMessage);\n\n\t\tfunction enqueue(msg) {\n\t\t\t_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);\n\t\t}\n\n\t\tvar ports = setupEffects(managers, enqueue);\n\n\t\treturn ports ? { ports: ports } : {};\n\t}\n\n\t// EFFECT MANAGERS\n\n\tvar effectManagers = {};\n\n\tfunction setupEffects(managers, callback) {\n\t\tvar ports;\n\n\t\t// setup all necessary effect managers\n\t\tfor (var key in effectManagers) {\n\t\t\tvar manager = effectManagers[key];\n\n\t\t\tif (manager.isForeign) {\n\t\t\t\tports = ports || {};\n\t\t\t\tports[key] = manager.tag === 'cmd' ? setupOutgoingPort(key) : setupIncomingPort(key, callback);\n\t\t\t}\n\n\t\t\tmanagers[key] = makeManager(manager, callback);\n\t\t}\n\n\t\treturn ports;\n\t}\n\n\tfunction makeManager(info, callback) {\n\t\tvar router = {\n\t\t\tmain: callback,\n\t\t\tself: undefined\n\t\t};\n\n\t\tvar tag = info.tag;\n\t\tvar onEffects = info.onEffects;\n\t\tvar onSelfMsg = info.onSelfMsg;\n\n\t\tfunction onMessage(msg, state) {\n\t\t\tif (msg.ctor === 'self') {\n\t\t\t\treturn A3(onSelfMsg, router, msg._0, state);\n\t\t\t}\n\n\t\t\tvar fx = msg._0;\n\t\t\tswitch (tag) {\n\t\t\t\tcase 'cmd':\n\t\t\t\t\treturn A3(onEffects, router, fx.cmds, state);\n\n\t\t\t\tcase 'sub':\n\t\t\t\t\treturn A3(onEffects, router, fx.subs, state);\n\n\t\t\t\tcase 'fx':\n\t\t\t\t\treturn A4(onEffects, router, fx.cmds, fx.subs, state);\n\t\t\t}\n\t\t}\n\n\t\tvar process = spawnLoop(info.init, onMessage);\n\t\trouter.self = process;\n\t\treturn process;\n\t}\n\n\tfunction sendToApp(router, msg) {\n\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\trouter.main(msg);\n\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t});\n\t}\n\n\tfunction sendToSelf(router, msg) {\n\t\treturn A2(_elm_lang$core$Native_Scheduler.send, router.self, {\n\t\t\tctor: 'self',\n\t\t\t_0: msg\n\t\t});\n\t}\n\n\t// HELPER for STATEFUL LOOPS\n\n\tfunction spawnLoop(init, onMessage) {\n\t\tvar andThen = _elm_lang$core$Native_Scheduler.andThen;\n\n\t\tfunction loop(state) {\n\t\t\tvar handleMsg = _elm_lang$core$Native_Scheduler.receive(function (msg) {\n\t\t\t\treturn onMessage(msg, state);\n\t\t\t});\n\t\t\treturn A2(andThen, loop, handleMsg);\n\t\t}\n\n\t\tvar task = A2(andThen, loop, init);\n\n\t\treturn _elm_lang$core$Native_Scheduler.rawSpawn(task);\n\t}\n\n\t// BAGS\n\n\tfunction leaf(home) {\n\t\treturn function (value) {\n\t\t\treturn {\n\t\t\t\ttype: 'leaf',\n\t\t\t\thome: home,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction batch(list) {\n\t\treturn {\n\t\t\ttype: 'node',\n\t\t\tbranches: list\n\t\t};\n\t}\n\n\tfunction map(tagger, bag) {\n\t\treturn {\n\t\t\ttype: 'map',\n\t\t\ttagger: tagger,\n\t\t\ttree: bag\n\t\t};\n\t}\n\n\t// PIPE BAGS INTO EFFECT MANAGERS\n\n\tfunction dispatchEffects(managers, cmdBag, subBag) {\n\t\tvar effectsDict = {};\n\t\tgatherEffects(true, cmdBag, effectsDict, null);\n\t\tgatherEffects(false, subBag, effectsDict, null);\n\n\t\tfor (var home in managers) {\n\t\t\tvar fx = home in effectsDict ? effectsDict[home] : {\n\t\t\t\tcmds: _elm_lang$core$Native_List.Nil,\n\t\t\t\tsubs: _elm_lang$core$Native_List.Nil\n\t\t\t};\n\n\t\t\t_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });\n\t\t}\n\t}\n\n\tfunction gatherEffects(isCmd, bag, effectsDict, taggers) {\n\t\tswitch (bag.type) {\n\t\t\tcase 'leaf':\n\t\t\t\tvar home = bag.home;\n\t\t\t\tvar effect = toEffect(isCmd, home, taggers, bag.value);\n\t\t\t\teffectsDict[home] = insert(isCmd, effect, effectsDict[home]);\n\t\t\t\treturn;\n\n\t\t\tcase 'node':\n\t\t\t\tvar list = bag.branches;\n\t\t\t\twhile (list.ctor !== '[]') {\n\t\t\t\t\tgatherEffects(isCmd, list._0, effectsDict, taggers);\n\t\t\t\t\tlist = list._1;\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\tcase 'map':\n\t\t\t\tgatherEffects(isCmd, bag.tree, effectsDict, {\n\t\t\t\t\ttagger: bag.tagger,\n\t\t\t\t\trest: taggers\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction toEffect(isCmd, home, taggers, value) {\n\t\tfunction applyTaggers(x) {\n\t\t\tvar temp = taggers;\n\t\t\twhile (temp) {\n\t\t\t\tx = temp.tagger(x);\n\t\t\t\ttemp = temp.rest;\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\n\t\tvar map = isCmd ? effectManagers[home].cmdMap : effectManagers[home].subMap;\n\n\t\treturn A2(map, applyTaggers, value);\n\t}\n\n\tfunction insert(isCmd, newEffect, effects) {\n\t\teffects = effects || {\n\t\t\tcmds: _elm_lang$core$Native_List.Nil,\n\t\t\tsubs: _elm_lang$core$Native_List.Nil\n\t\t};\n\t\tif (isCmd) {\n\t\t\teffects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);\n\t\t\treturn effects;\n\t\t}\n\t\teffects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);\n\t\treturn effects;\n\t}\n\n\t// PORTS\n\n\tfunction checkPortName(name) {\n\t\tif (name in effectManagers) {\n\t\t\tthrow new Error('There can only be one port named `' + name + '`, but your program has multiple.');\n\t\t}\n\t}\n\n\t// OUTGOING PORTS\n\n\tfunction outgoingPort(name, converter) {\n\t\tcheckPortName(name);\n\t\teffectManagers[name] = {\n\t\t\ttag: 'cmd',\n\t\t\tcmdMap: outgoingPortMap,\n\t\t\tconverter: converter,\n\t\t\tisForeign: true\n\t\t};\n\t\treturn leaf(name);\n\t}\n\n\tvar outgoingPortMap = F2(function cmdMap(tagger, value) {\n\t\treturn value;\n\t});\n\n\tfunction setupOutgoingPort(name) {\n\t\tvar subs = [];\n\t\tvar converter = effectManagers[name].converter;\n\n\t\t// CREATE MANAGER\n\n\t\tvar init = _elm_lang$core$Native_Scheduler.succeed(null);\n\n\t\tfunction onEffects(router, cmdList, state) {\n\t\t\twhile (cmdList.ctor !== '[]') {\n\t\t\t\t// grab a separate reference to subs in case unsubscribe is called\n\t\t\t\tvar currentSubs = subs;\n\t\t\t\tvar value = converter(cmdList._0);\n\t\t\t\tfor (var i = 0; i < currentSubs.length; i++) {\n\t\t\t\t\tcurrentSubs[i](value);\n\t\t\t\t}\n\t\t\t\tcmdList = cmdList._1;\n\t\t\t}\n\t\t\treturn init;\n\t\t}\n\n\t\teffectManagers[name].init = init;\n\t\teffectManagers[name].onEffects = F3(onEffects);\n\n\t\t// PUBLIC API\n\n\t\tfunction subscribe(callback) {\n\t\t\tsubs.push(callback);\n\t\t}\n\n\t\tfunction unsubscribe(callback) {\n\t\t\t// copy subs into a new array in case unsubscribe is called within a\n\t\t\t// subscribed callback\n\t\t\tsubs = subs.slice();\n\t\t\tvar index = subs.indexOf(callback);\n\t\t\tif (index >= 0) {\n\t\t\t\tsubs.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsubscribe: subscribe,\n\t\t\tunsubscribe: unsubscribe\n\t\t};\n\t}\n\n\t// INCOMING PORTS\n\n\tfunction incomingPort(name, converter) {\n\t\tcheckPortName(name);\n\t\teffectManagers[name] = {\n\t\t\ttag: 'sub',\n\t\t\tsubMap: incomingPortMap,\n\t\t\tconverter: converter,\n\t\t\tisForeign: true\n\t\t};\n\t\treturn leaf(name);\n\t}\n\n\tvar incomingPortMap = F2(function subMap(tagger, finalTagger) {\n\t\treturn function (value) {\n\t\t\treturn tagger(finalTagger(value));\n\t\t};\n\t});\n\n\tfunction setupIncomingPort(name, callback) {\n\t\tvar sentBeforeInit = [];\n\t\tvar subs = _elm_lang$core$Native_List.Nil;\n\t\tvar converter = effectManagers[name].converter;\n\t\tvar currentOnEffects = preInitOnEffects;\n\t\tvar currentSend = preInitSend;\n\n\t\t// CREATE MANAGER\n\n\t\tvar init = _elm_lang$core$Native_Scheduler.succeed(null);\n\n\t\tfunction preInitOnEffects(router, subList, state) {\n\t\t\tvar postInitResult = postInitOnEffects(router, subList, state);\n\n\t\t\tfor (var i = 0; i < sentBeforeInit.length; i++) {\n\t\t\t\tpostInitSend(sentBeforeInit[i]);\n\t\t\t}\n\n\t\t\tsentBeforeInit = null; // to release objects held in queue\n\t\t\tcurrentSend = postInitSend;\n\t\t\tcurrentOnEffects = postInitOnEffects;\n\t\t\treturn postInitResult;\n\t\t}\n\n\t\tfunction postInitOnEffects(router, subList, state) {\n\t\t\tsubs = subList;\n\t\t\treturn init;\n\t\t}\n\n\t\tfunction onEffects(router, subList, state) {\n\t\t\treturn currentOnEffects(router, subList, state);\n\t\t}\n\n\t\teffectManagers[name].init = init;\n\t\teffectManagers[name].onEffects = F3(onEffects);\n\n\t\t// PUBLIC API\n\n\t\tfunction preInitSend(value) {\n\t\t\tsentBeforeInit.push(value);\n\t\t}\n\n\t\tfunction postInitSend(value) {\n\t\t\tvar temp = subs;\n\t\t\twhile (temp.ctor !== '[]') {\n\t\t\t\tcallback(temp._0(value));\n\t\t\t\ttemp = temp._1;\n\t\t\t}\n\t\t}\n\n\t\tfunction send(incomingValue) {\n\t\t\tvar result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);\n\t\t\tif (result.ctor === 'Err') {\n\t\t\t\tthrow new Error('Trying to send an unexpected type of value through port `' + name + '`:\\n' + result._0);\n\t\t\t}\n\n\t\t\tcurrentSend(result._0);\n\t\t}\n\n\t\treturn { send: send };\n\t}\n\n\treturn {\n\t\t// routers\n\t\tsendToApp: F2(sendToApp),\n\t\tsendToSelf: F2(sendToSelf),\n\n\t\t// global setup\n\t\teffectManagers: effectManagers,\n\t\toutgoingPort: outgoingPort,\n\t\tincomingPort: incomingPort,\n\n\t\thtmlToProgram: htmlToProgram,\n\t\tprogram: program,\n\t\tprogramWithFlags: programWithFlags,\n\t\tinitialize: initialize,\n\n\t\t// effect bags\n\t\tleaf: leaf,\n\t\tbatch: batch,\n\t\tmap: F2(map)\n\t};\n}();\n","'use strict';\n\n//import Maybe, Native.List //\n\nvar _elm_lang$core$Native_Regex = function () {\n\n\tfunction escape(str) {\n\t\treturn str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t}\n\tfunction caseInsensitive(re) {\n\t\treturn new RegExp(re.source, 'gi');\n\t}\n\tfunction regex(raw) {\n\t\treturn new RegExp(raw, 'g');\n\t}\n\n\tfunction contains(re, string) {\n\t\treturn string.match(re) !== null;\n\t}\n\n\tfunction find(n, re, str) {\n\t\tn = n.ctor === 'All' ? Infinity : n._0;\n\t\tvar out = [];\n\t\tvar number = 0;\n\t\tvar string = str;\n\t\tvar lastIndex = re.lastIndex;\n\t\tvar prevLastIndex = -1;\n\t\tvar result;\n\t\twhile (number++ < n && (result = re.exec(string))) {\n\t\t\tif (prevLastIndex === re.lastIndex) break;\n\t\t\tvar i = result.length - 1;\n\t\t\tvar subs = new Array(i);\n\t\t\twhile (i > 0) {\n\t\t\t\tvar submatch = result[i];\n\t\t\t\tsubs[--i] = submatch === undefined ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(submatch);\n\t\t\t}\n\t\t\tout.push({\n\t\t\t\tmatch: result[0],\n\t\t\t\tsubmatches: _elm_lang$core$Native_List.fromArray(subs),\n\t\t\t\tindex: result.index,\n\t\t\t\tnumber: number\n\t\t\t});\n\t\t\tprevLastIndex = re.lastIndex;\n\t\t}\n\t\tre.lastIndex = lastIndex;\n\t\treturn _elm_lang$core$Native_List.fromArray(out);\n\t}\n\n\tfunction replace(n, re, replacer, string) {\n\t\tn = n.ctor === 'All' ? Infinity : n._0;\n\t\tvar count = 0;\n\t\tfunction jsReplacer(match) {\n\t\t\tif (count++ >= n) {\n\t\t\t\treturn match;\n\t\t\t}\n\t\t\tvar i = arguments.length - 3;\n\t\t\tvar submatches = new Array(i);\n\t\t\twhile (i > 0) {\n\t\t\t\tvar submatch = arguments[i];\n\t\t\t\tsubmatches[--i] = submatch === undefined ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(submatch);\n\t\t\t}\n\t\t\treturn replacer({\n\t\t\t\tmatch: match,\n\t\t\t\tsubmatches: _elm_lang$core$Native_List.fromArray(submatches),\n\t\t\t\tindex: arguments[arguments.length - 2],\n\t\t\t\tnumber: count\n\t\t\t});\n\t\t}\n\t\treturn string.replace(re, jsReplacer);\n\t}\n\n\tfunction split(n, re, str) {\n\t\tn = n.ctor === 'All' ? Infinity : n._0;\n\t\tif (n === Infinity) {\n\t\t\treturn _elm_lang$core$Native_List.fromArray(str.split(re));\n\t\t}\n\t\tvar string = str;\n\t\tvar result;\n\t\tvar out = [];\n\t\tvar start = re.lastIndex;\n\t\tvar restoreLastIndex = re.lastIndex;\n\t\twhile (n--) {\n\t\t\tif (!(result = re.exec(string))) break;\n\t\t\tout.push(string.slice(start, result.index));\n\t\t\tstart = re.lastIndex;\n\t\t}\n\t\tout.push(string.slice(start));\n\t\tre.lastIndex = restoreLastIndex;\n\t\treturn _elm_lang$core$Native_List.fromArray(out);\n\t}\n\n\treturn {\n\t\tregex: regex,\n\t\tcaseInsensitive: caseInsensitive,\n\t\tescape: escape,\n\n\t\tcontains: F2(contains),\n\t\tfind: F3(find),\n\t\treplace: F4(replace),\n\t\tsplit: F3(split)\n\t};\n}();\n","'use strict';\n\n//import Native.Utils //\n\nvar _elm_lang$core$Native_Scheduler = function () {\n\n\tvar MAX_STEPS = 10000;\n\n\t// TASKS\n\n\tfunction succeed(value) {\n\t\treturn {\n\t\t\tctor: '_Task_succeed',\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tfunction fail(error) {\n\t\treturn {\n\t\t\tctor: '_Task_fail',\n\t\t\tvalue: error\n\t\t};\n\t}\n\n\tfunction nativeBinding(callback) {\n\t\treturn {\n\t\t\tctor: '_Task_nativeBinding',\n\t\t\tcallback: callback,\n\t\t\tcancel: null\n\t\t};\n\t}\n\n\tfunction andThen(callback, task) {\n\t\treturn {\n\t\t\tctor: '_Task_andThen',\n\t\t\tcallback: callback,\n\t\t\ttask: task\n\t\t};\n\t}\n\n\tfunction onError(callback, task) {\n\t\treturn {\n\t\t\tctor: '_Task_onError',\n\t\t\tcallback: callback,\n\t\t\ttask: task\n\t\t};\n\t}\n\n\tfunction receive(callback) {\n\t\treturn {\n\t\t\tctor: '_Task_receive',\n\t\t\tcallback: callback\n\t\t};\n\t}\n\n\t// PROCESSES\n\n\tfunction rawSpawn(task) {\n\t\tvar process = {\n\t\t\tctor: '_Process',\n\t\t\tid: _elm_lang$core$Native_Utils.guid(),\n\t\t\troot: task,\n\t\t\tstack: null,\n\t\t\tmailbox: []\n\t\t};\n\n\t\tenqueue(process);\n\n\t\treturn process;\n\t}\n\n\tfunction spawn(task) {\n\t\treturn nativeBinding(function (callback) {\n\t\t\tvar process = rawSpawn(task);\n\t\t\tcallback(succeed(process));\n\t\t});\n\t}\n\n\tfunction rawSend(process, msg) {\n\t\tprocess.mailbox.push(msg);\n\t\tenqueue(process);\n\t}\n\n\tfunction send(process, msg) {\n\t\treturn nativeBinding(function (callback) {\n\t\t\trawSend(process, msg);\n\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t});\n\t}\n\n\tfunction kill(process) {\n\t\treturn nativeBinding(function (callback) {\n\t\t\tvar root = process.root;\n\t\t\tif (root.ctor === '_Task_nativeBinding' && root.cancel) {\n\t\t\t\troot.cancel();\n\t\t\t}\n\n\t\t\tprocess.root = null;\n\n\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t});\n\t}\n\n\tfunction sleep(time) {\n\t\treturn nativeBinding(function (callback) {\n\t\t\tvar id = setTimeout(function () {\n\t\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t}, time);\n\n\t\t\treturn function () {\n\t\t\t\tclearTimeout(id);\n\t\t\t};\n\t\t});\n\t}\n\n\t// STEP PROCESSES\n\n\tfunction step(numSteps, process) {\n\t\twhile (numSteps < MAX_STEPS) {\n\t\t\tvar ctor = process.root.ctor;\n\n\t\t\tif (ctor === '_Task_succeed') {\n\t\t\t\twhile (process.stack && process.stack.ctor === '_Task_onError') {\n\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t}\n\t\t\t\tif (process.stack === null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tprocess.root = process.stack.callback(process.root.value);\n\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t++numSteps;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ctor === '_Task_fail') {\n\t\t\t\twhile (process.stack && process.stack.ctor === '_Task_andThen') {\n\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t}\n\t\t\t\tif (process.stack === null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tprocess.root = process.stack.callback(process.root.value);\n\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t++numSteps;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ctor === '_Task_andThen') {\n\t\t\t\tprocess.stack = {\n\t\t\t\t\tctor: '_Task_andThen',\n\t\t\t\t\tcallback: process.root.callback,\n\t\t\t\t\trest: process.stack\n\t\t\t\t};\n\t\t\t\tprocess.root = process.root.task;\n\t\t\t\t++numSteps;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ctor === '_Task_onError') {\n\t\t\t\tprocess.stack = {\n\t\t\t\t\tctor: '_Task_onError',\n\t\t\t\t\tcallback: process.root.callback,\n\t\t\t\t\trest: process.stack\n\t\t\t\t};\n\t\t\t\tprocess.root = process.root.task;\n\t\t\t\t++numSteps;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ctor === '_Task_nativeBinding') {\n\t\t\t\tprocess.root.cancel = process.root.callback(function (newRoot) {\n\t\t\t\t\tprocess.root = newRoot;\n\t\t\t\t\tenqueue(process);\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (ctor === '_Task_receive') {\n\t\t\t\tvar mailbox = process.mailbox;\n\t\t\t\tif (mailbox.length === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprocess.root = process.root.callback(mailbox.shift());\n\t\t\t\t++numSteps;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow new Error(ctor);\n\t\t}\n\n\t\tif (numSteps < MAX_STEPS) {\n\t\t\treturn numSteps + 1;\n\t\t}\n\t\tenqueue(process);\n\n\t\treturn numSteps;\n\t}\n\n\t// WORK QUEUE\n\n\tvar working = false;\n\tvar workQueue = [];\n\n\tfunction enqueue(process) {\n\t\tworkQueue.push(process);\n\n\t\tif (!working) {\n\t\t\tsetTimeout(work, 0);\n\t\t\tworking = true;\n\t\t}\n\t}\n\n\tfunction work() {\n\t\tvar numSteps = 0;\n\t\tvar process;\n\t\twhile (numSteps < MAX_STEPS && (process = workQueue.shift())) {\n\t\t\tif (process.root) {\n\t\t\t\tnumSteps = step(numSteps, process);\n\t\t\t}\n\t\t}\n\t\tif (!process) {\n\t\t\tworking = false;\n\t\t\treturn;\n\t\t}\n\t\tsetTimeout(work, 0);\n\t}\n\n\treturn {\n\t\tsucceed: succeed,\n\t\tfail: fail,\n\t\tnativeBinding: nativeBinding,\n\t\tandThen: F2(andThen),\n\t\tonError: F2(onError),\n\t\treceive: receive,\n\n\t\tspawn: spawn,\n\t\tkill: kill,\n\t\tsleep: sleep,\n\t\tsend: F2(send),\n\n\t\trawSpawn: rawSpawn,\n\t\trawSend: rawSend\n\t};\n}();\n","'use strict';\n\n//import Maybe, Native.List, Native.Utils, Result //\n\nvar _elm_lang$core$Native_String = function () {\n\n\tfunction isEmpty(str) {\n\t\treturn str.length === 0;\n\t}\n\tfunction cons(chr, str) {\n\t\treturn chr + str;\n\t}\n\tfunction uncons(str) {\n\t\tvar hd = str[0];\n\t\tif (hd) {\n\t\t\treturn _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));\n\t\t}\n\t\treturn _elm_lang$core$Maybe$Nothing;\n\t}\n\tfunction append(a, b) {\n\t\treturn a + b;\n\t}\n\tfunction concat(strs) {\n\t\treturn _elm_lang$core$Native_List.toArray(strs).join('');\n\t}\n\tfunction length(str) {\n\t\treturn str.length;\n\t}\n\tfunction map(f, str) {\n\t\tvar out = str.split('');\n\t\tfor (var i = out.length; i--;) {\n\t\t\tout[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));\n\t\t}\n\t\treturn out.join('');\n\t}\n\tfunction filter(pred, str) {\n\t\treturn str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');\n\t}\n\tfunction reverse(str) {\n\t\treturn str.split('').reverse().join('');\n\t}\n\tfunction foldl(f, b, str) {\n\t\tvar len = str.length;\n\t\tfor (var i = 0; i < len; ++i) {\n\t\t\tb = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);\n\t\t}\n\t\treturn b;\n\t}\n\tfunction foldr(f, b, str) {\n\t\tfor (var i = str.length; i--;) {\n\t\t\tb = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);\n\t\t}\n\t\treturn b;\n\t}\n\tfunction split(sep, str) {\n\t\treturn _elm_lang$core$Native_List.fromArray(str.split(sep));\n\t}\n\tfunction join(sep, strs) {\n\t\treturn _elm_lang$core$Native_List.toArray(strs).join(sep);\n\t}\n\tfunction repeat(n, str) {\n\t\tvar result = '';\n\t\twhile (n > 0) {\n\t\t\tif (n & 1) {\n\t\t\t\tresult += str;\n\t\t\t}\n\t\t\tn >>= 1, str += str;\n\t\t}\n\t\treturn result;\n\t}\n\tfunction slice(start, end, str) {\n\t\treturn str.slice(start, end);\n\t}\n\tfunction left(n, str) {\n\t\treturn n < 1 ? '' : str.slice(0, n);\n\t}\n\tfunction right(n, str) {\n\t\treturn n < 1 ? '' : str.slice(-n);\n\t}\n\tfunction dropLeft(n, str) {\n\t\treturn n < 1 ? str : str.slice(n);\n\t}\n\tfunction dropRight(n, str) {\n\t\treturn n < 1 ? str : str.slice(0, -n);\n\t}\n\tfunction pad(n, chr, str) {\n\t\tvar half = (n - str.length) / 2;\n\t\treturn repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);\n\t}\n\tfunction padRight(n, chr, str) {\n\t\treturn str + repeat(n - str.length, chr);\n\t}\n\tfunction padLeft(n, chr, str) {\n\t\treturn repeat(n - str.length, chr) + str;\n\t}\n\n\tfunction trim(str) {\n\t\treturn str.trim();\n\t}\n\tfunction trimLeft(str) {\n\t\treturn str.replace(/^\\s+/, '');\n\t}\n\tfunction trimRight(str) {\n\t\treturn str.replace(/\\s+$/, '');\n\t}\n\n\tfunction words(str) {\n\t\treturn _elm_lang$core$Native_List.fromArray(str.trim().split(/\\s+/g));\n\t}\n\tfunction lines(str) {\n\t\treturn _elm_lang$core$Native_List.fromArray(str.split(/\\r\\n|\\r|\\n/g));\n\t}\n\n\tfunction toUpper(str) {\n\t\treturn str.toUpperCase();\n\t}\n\tfunction toLower(str) {\n\t\treturn str.toLowerCase();\n\t}\n\n\tfunction any(pred, str) {\n\t\tfor (var i = str.length; i--;) {\n\t\t\tif (pred(_elm_lang$core$Native_Utils.chr(str[i]))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tfunction all(pred, str) {\n\t\tfor (var i = str.length; i--;) {\n\t\t\tif (!pred(_elm_lang$core$Native_Utils.chr(str[i]))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction contains(sub, str) {\n\t\treturn str.indexOf(sub) > -1;\n\t}\n\tfunction startsWith(sub, str) {\n\t\treturn str.indexOf(sub) === 0;\n\t}\n\tfunction endsWith(sub, str) {\n\t\treturn str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;\n\t}\n\tfunction indexes(sub, str) {\n\t\tvar subLen = sub.length;\n\n\t\tif (subLen < 1) {\n\t\t\treturn _elm_lang$core$Native_List.Nil;\n\t\t}\n\n\t\tvar i = 0;\n\t\tvar is = [];\n\n\t\twhile ((i = str.indexOf(sub, i)) > -1) {\n\t\t\tis.push(i);\n\t\t\ti = i + subLen;\n\t\t}\n\n\t\treturn _elm_lang$core$Native_List.fromArray(is);\n\t}\n\n\tfunction toInt(s) {\n\t\tvar len = s.length;\n\n\t\t// if empty\n\t\tif (len === 0) {\n\t\t\treturn intErr(s);\n\t\t}\n\n\t\t// if hex\n\t\tvar c = s[0];\n\t\tif (c === '0' && s[1] === 'x') {\n\t\t\tfor (var i = 2; i < len; ++i) {\n\t\t\t\tvar c = s[i];\n\t\t\t\tif ('0' <= c && c <= '9' || 'A' <= c && c <= 'F' || 'a' <= c && c <= 'f') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\treturn intErr(s);\n\t\t\t}\n\t\t\treturn _elm_lang$core$Result$Ok(parseInt(s, 16));\n\t\t}\n\n\t\t// is decimal\n\t\tif (c > '9' || c < '0' && c !== '-' && c !== '+') {\n\t\t\treturn intErr(s);\n\t\t}\n\t\tfor (var i = 1; i < len; ++i) {\n\t\t\tvar c = s[i];\n\t\t\tif (c < '0' || '9' < c) {\n\t\t\t\treturn intErr(s);\n\t\t\t}\n\t\t}\n\n\t\treturn _elm_lang$core$Result$Ok(parseInt(s, 10));\n\t}\n\n\tfunction intErr(s) {\n\t\treturn _elm_lang$core$Result$Err(\"could not convert string '\" + s + \"' to an Int\");\n\t}\n\n\tfunction toFloat(s) {\n\t\t// check if it is a hex, octal, or binary number\n\t\tif (s.length === 0 || /[\\sxbo]/.test(s)) {\n\t\t\treturn floatErr(s);\n\t\t}\n\t\tvar n = +s;\n\t\t// faster isNaN check\n\t\treturn n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);\n\t}\n\n\tfunction floatErr(s) {\n\t\treturn _elm_lang$core$Result$Err(\"could not convert string '\" + s + \"' to a Float\");\n\t}\n\n\tfunction toList(str) {\n\t\treturn _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));\n\t}\n\tfunction fromList(chars) {\n\t\treturn _elm_lang$core$Native_List.toArray(chars).join('');\n\t}\n\n\treturn {\n\t\tisEmpty: isEmpty,\n\t\tcons: F2(cons),\n\t\tuncons: uncons,\n\t\tappend: F2(append),\n\t\tconcat: concat,\n\t\tlength: length,\n\t\tmap: F2(map),\n\t\tfilter: F2(filter),\n\t\treverse: reverse,\n\t\tfoldl: F3(foldl),\n\t\tfoldr: F3(foldr),\n\n\t\tsplit: F2(split),\n\t\tjoin: F2(join),\n\t\trepeat: F2(repeat),\n\n\t\tslice: F3(slice),\n\t\tleft: F2(left),\n\t\tright: F2(right),\n\t\tdropLeft: F2(dropLeft),\n\t\tdropRight: F2(dropRight),\n\n\t\tpad: F3(pad),\n\t\tpadLeft: F3(padLeft),\n\t\tpadRight: F3(padRight),\n\n\t\ttrim: trim,\n\t\ttrimLeft: trimLeft,\n\t\ttrimRight: trimRight,\n\n\t\twords: words,\n\t\tlines: lines,\n\n\t\ttoUpper: toUpper,\n\t\ttoLower: toLower,\n\n\t\tany: F2(any),\n\t\tall: F2(all),\n\n\t\tcontains: F2(contains),\n\t\tstartsWith: F2(startsWith),\n\t\tendsWith: F2(endsWith),\n\t\tindexes: F2(indexes),\n\n\t\ttoInt: toInt,\n\t\ttoFloat: toFloat,\n\t\ttoList: toList,\n\t\tfromList: fromList\n\t};\n}();\n","\"use strict\";\n\n//import Native.Scheduler //\n\nvar _elm_lang$core$Native_Time = function () {\n\n\tvar now = _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));\n\t});\n\n\tfunction setInterval_(interval, task) {\n\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\tvar id = setInterval(function () {\n\t\t\t\t_elm_lang$core$Native_Scheduler.rawSpawn(task);\n\t\t\t}, interval);\n\n\t\t\treturn function () {\n\t\t\t\tclearInterval(id);\n\t\t\t};\n\t\t});\n\t}\n\n\treturn {\n\t\tnow: now,\n\t\tsetInterval_: F2(setInterval_)\n\t};\n}();\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//import //\n\nvar _elm_lang$core$Native_Utils = function () {\n\n\t// COMPARISONS\n\n\tfunction eq(x, y) {\n\t\tvar stack = [];\n\t\tvar isEqual = eqHelp(x, y, 0, stack);\n\t\tvar pair;\n\t\twhile (isEqual && (pair = stack.pop())) {\n\t\t\tisEqual = eqHelp(pair.x, pair.y, 0, stack);\n\t\t}\n\t\treturn isEqual;\n\t}\n\n\tfunction eqHelp(x, y, depth, stack) {\n\t\tif (depth > 100) {\n\t\t\tstack.push({ x: x, y: y });\n\t\t\treturn true;\n\t\t}\n\n\t\tif (x === y) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object') {\n\t\t\tif (typeof x === 'function') {\n\t\t\t\tthrow new Error('Trying to use `(==)` on functions. There is no way to know if functions are \"the same\" in the Elm sense.' + ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#==' + ' which describes why it is this way and what the better version will look like.');\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tif (x === null || y === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (x instanceof Date) {\n\t\t\treturn x.getTime() === y.getTime();\n\t\t}\n\n\t\tif (!('ctor' in x)) {\n\t\t\tfor (var key in x) {\n\t\t\t\tif (!eqHelp(x[key], y[key], depth + 1, stack)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// convert Dicts and Sets to lists\n\t\tif (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin') {\n\t\t\tx = _elm_lang$core$Dict$toList(x);\n\t\t\ty = _elm_lang$core$Dict$toList(y);\n\t\t}\n\t\tif (x.ctor === 'Set_elm_builtin') {\n\t\t\tx = _elm_lang$core$Set$toList(x);\n\t\t\ty = _elm_lang$core$Set$toList(y);\n\t\t}\n\n\t\t// check if lists are equal without recursion\n\t\tif (x.ctor === '::') {\n\t\t\tvar a = x;\n\t\t\tvar b = y;\n\t\t\twhile (a.ctor === '::' && b.ctor === '::') {\n\t\t\t\tif (!eqHelp(a._0, b._0, depth + 1, stack)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ta = a._1;\n\t\t\t\tb = b._1;\n\t\t\t}\n\t\t\treturn a.ctor === b.ctor;\n\t\t}\n\n\t\t// check if Arrays are equal\n\t\tif (x.ctor === '_Array') {\n\t\t\tvar xs = _elm_lang$core$Native_Array.toJSArray(x);\n\t\t\tvar ys = _elm_lang$core$Native_Array.toJSArray(y);\n\t\t\tif (xs.length !== ys.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (var i = 0; i < xs.length; i++) {\n\t\t\t\tif (!eqHelp(xs[i], ys[i], depth + 1, stack)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!eqHelp(x.ctor, y.ctor, depth + 1, stack)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var key in x) {\n\t\t\tif (!eqHelp(x[key], y[key], depth + 1, stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on\n\t// the particular integer values assigned to LT, EQ, and GT.\n\n\tvar LT = -1,\n\t    EQ = 0,\n\t    GT = 1;\n\n\tfunction cmp(x, y) {\n\t\tif ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object') {\n\t\t\treturn x === y ? EQ : x < y ? LT : GT;\n\t\t}\n\n\t\tif (x instanceof String) {\n\t\t\tvar a = x.valueOf();\n\t\t\tvar b = y.valueOf();\n\t\t\treturn a === b ? EQ : a < b ? LT : GT;\n\t\t}\n\n\t\tif (x.ctor === '::' || x.ctor === '[]') {\n\t\t\twhile (x.ctor === '::' && y.ctor === '::') {\n\t\t\t\tvar ord = cmp(x._0, y._0);\n\t\t\t\tif (ord !== EQ) {\n\t\t\t\t\treturn ord;\n\t\t\t\t}\n\t\t\t\tx = x._1;\n\t\t\t\ty = y._1;\n\t\t\t}\n\t\t\treturn x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;\n\t\t}\n\n\t\tif (x.ctor.slice(0, 6) === '_Tuple') {\n\t\t\tvar ord;\n\t\t\tvar n = x.ctor.slice(6) - 0;\n\t\t\tvar err = 'cannot compare tuples with more than 6 elements.';\n\t\t\tif (n === 0) return EQ;\n\t\t\tif (n >= 1) {\n\t\t\t\tord = cmp(x._0, y._0);if (ord !== EQ) return ord;\n\t\t\t\tif (n >= 2) {\n\t\t\t\t\tord = cmp(x._1, y._1);if (ord !== EQ) return ord;\n\t\t\t\t\tif (n >= 3) {\n\t\t\t\t\t\tord = cmp(x._2, y._2);if (ord !== EQ) return ord;\n\t\t\t\t\t\tif (n >= 4) {\n\t\t\t\t\t\t\tord = cmp(x._3, y._3);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\tif (n >= 5) {\n\t\t\t\t\t\t\t\tord = cmp(x._4, y._4);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\t\tif (n >= 6) {\n\t\t\t\t\t\t\t\t\tord = cmp(x._5, y._5);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\t\t\tif (n >= 7) throw new Error('Comparison error: ' + err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn EQ;\n\t\t}\n\n\t\tthrow new Error('Comparison error: comparison is only defined on ints, ' + 'floats, times, chars, strings, lists of comparable values, ' + 'and tuples of comparable values.');\n\t}\n\n\t// COMMON VALUES\n\n\tvar Tuple0 = {\n\t\tctor: '_Tuple0'\n\t};\n\n\tfunction Tuple2(x, y) {\n\t\treturn {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: x,\n\t\t\t_1: y\n\t\t};\n\t}\n\n\tfunction chr(c) {\n\t\treturn new String(c);\n\t}\n\n\t// GUID\n\n\tvar count = 0;\n\tfunction guid(_) {\n\t\treturn count++;\n\t}\n\n\t// RECORDS\n\n\tfunction update(oldRecord, updatedFields) {\n\t\tvar newRecord = {};\n\n\t\tfor (var key in oldRecord) {\n\t\t\tnewRecord[key] = oldRecord[key];\n\t\t}\n\n\t\tfor (var key in updatedFields) {\n\t\t\tnewRecord[key] = updatedFields[key];\n\t\t}\n\n\t\treturn newRecord;\n\t}\n\n\t//// LIST STUFF ////\n\n\tvar Nil = { ctor: '[]' };\n\n\tfunction Cons(hd, tl) {\n\t\treturn {\n\t\t\tctor: '::',\n\t\t\t_0: hd,\n\t\t\t_1: tl\n\t\t};\n\t}\n\n\tfunction append(xs, ys) {\n\t\t// append Strings\n\t\tif (typeof xs === 'string') {\n\t\t\treturn xs + ys;\n\t\t}\n\n\t\t// append Lists\n\t\tif (xs.ctor === '[]') {\n\t\t\treturn ys;\n\t\t}\n\t\tvar root = Cons(xs._0, Nil);\n\t\tvar curr = root;\n\t\txs = xs._1;\n\t\twhile (xs.ctor !== '[]') {\n\t\t\tcurr._1 = Cons(xs._0, Nil);\n\t\t\txs = xs._1;\n\t\t\tcurr = curr._1;\n\t\t}\n\t\tcurr._1 = ys;\n\t\treturn root;\n\t}\n\n\t// CRASHES\n\n\tfunction crash(moduleName, region) {\n\t\treturn function (message) {\n\t\t\tthrow new Error('Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\\n' + 'The message provided by the code author is:\\n\\n    ' + message);\n\t\t};\n\t}\n\n\tfunction crashCase(moduleName, region, value) {\n\t\treturn function (message) {\n\t\t\tthrow new Error('Ran into a `Debug.crash` in module `' + moduleName + '`\\n\\n' + 'This was caused by the `case` expression ' + regionToString(region) + '.\\n' + 'One of the branches ended with a crash and the following value got through:\\n\\n    ' + toString(value) + '\\n\\n' + 'The message provided by the code author is:\\n\\n    ' + message);\n\t\t};\n\t}\n\n\tfunction regionToString(region) {\n\t\tif (region.start.line == region.end.line) {\n\t\t\treturn 'on line ' + region.start.line;\n\t\t}\n\t\treturn 'between lines ' + region.start.line + ' and ' + region.end.line;\n\t}\n\n\t// TO STRING\n\n\tfunction toString(v) {\n\t\tvar type = typeof v === 'undefined' ? 'undefined' : _typeof(v);\n\t\tif (type === 'function') {\n\t\t\treturn '<function>';\n\t\t}\n\n\t\tif (type === 'boolean') {\n\t\t\treturn v ? 'True' : 'False';\n\t\t}\n\n\t\tif (type === 'number') {\n\t\t\treturn v + '';\n\t\t}\n\n\t\tif (v instanceof String) {\n\t\t\treturn '\\'' + addSlashes(v, true) + '\\'';\n\t\t}\n\n\t\tif (type === 'string') {\n\t\t\treturn '\"' + addSlashes(v, false) + '\"';\n\t\t}\n\n\t\tif (v === null) {\n\t\t\treturn 'null';\n\t\t}\n\n\t\tif (type === 'object' && 'ctor' in v) {\n\t\t\tvar ctorStarter = v.ctor.substring(0, 5);\n\n\t\t\tif (ctorStarter === '_Tupl') {\n\t\t\t\tvar output = [];\n\t\t\t\tfor (var k in v) {\n\t\t\t\t\tif (k === 'ctor') continue;\n\t\t\t\t\toutput.push(toString(v[k]));\n\t\t\t\t}\n\t\t\t\treturn '(' + output.join(',') + ')';\n\t\t\t}\n\n\t\t\tif (ctorStarter === '_Task') {\n\t\t\t\treturn '<task>';\n\t\t\t}\n\n\t\t\tif (v.ctor === '_Array') {\n\t\t\t\tvar list = _elm_lang$core$Array$toList(v);\n\t\t\t\treturn 'Array.fromList ' + toString(list);\n\t\t\t}\n\n\t\t\tif (v.ctor === '<decoder>') {\n\t\t\t\treturn '<decoder>';\n\t\t\t}\n\n\t\t\tif (v.ctor === '_Process') {\n\t\t\t\treturn '<process:' + v.id + '>';\n\t\t\t}\n\n\t\t\tif (v.ctor === '::') {\n\t\t\t\tvar output = '[' + toString(v._0);\n\t\t\t\tv = v._1;\n\t\t\t\twhile (v.ctor === '::') {\n\t\t\t\t\toutput += ',' + toString(v._0);\n\t\t\t\t\tv = v._1;\n\t\t\t\t}\n\t\t\t\treturn output + ']';\n\t\t\t}\n\n\t\t\tif (v.ctor === '[]') {\n\t\t\t\treturn '[]';\n\t\t\t}\n\n\t\t\tif (v.ctor === 'Set_elm_builtin') {\n\t\t\t\treturn 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));\n\t\t\t}\n\n\t\t\tif (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));\n\t\t\t}\n\n\t\t\tvar output = '';\n\t\t\tfor (var i in v) {\n\t\t\t\tif (i === 'ctor') continue;\n\t\t\t\tvar str = toString(v[i]);\n\t\t\t\tvar c0 = str[0];\n\t\t\t\tvar parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '\"' || str.indexOf(' ') < 0;\n\t\t\t\toutput += ' ' + (parenless ? str : '(' + str + ')');\n\t\t\t}\n\t\t\treturn v.ctor + output;\n\t\t}\n\n\t\tif (type === 'object') {\n\t\t\tif (v instanceof Date) {\n\t\t\t\treturn '<' + v.toString() + '>';\n\t\t\t}\n\n\t\t\tif (v.elm_web_socket) {\n\t\t\t\treturn '<websocket>';\n\t\t\t}\n\n\t\t\tvar output = [];\n\t\t\tfor (var k in v) {\n\t\t\t\toutput.push(k + ' = ' + toString(v[k]));\n\t\t\t}\n\t\t\tif (output.length === 0) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{ ' + output.join(', ') + ' }';\n\t\t}\n\n\t\treturn '<internal structure>';\n\t}\n\n\tfunction addSlashes(str, isChar) {\n\t\tvar s = str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\t\tif (isChar) {\n\t\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t\t} else {\n\t\t\treturn s.replace(/\\\"/g, '\\\\\"');\n\t\t}\n\t}\n\n\treturn {\n\t\teq: eq,\n\t\tcmp: cmp,\n\t\tTuple0: Tuple0,\n\t\tTuple2: Tuple2,\n\t\tchr: chr,\n\t\tupdate: update,\n\t\tguid: guid,\n\n\t\tappend: F2(append),\n\n\t\tcrash: crash,\n\t\tcrashCase: crashCase,\n\n\t\ttoString: toString\n\t};\n}();\n","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","'use strict';\n\nvar _elm_lang$http$Native_Http = function () {\n\n\t// ENCODING AND DECODING\n\n\tfunction encodeUri(string) {\n\t\treturn encodeURIComponent(string);\n\t}\n\n\tfunction decodeUri(string) {\n\t\ttry {\n\t\t\treturn _elm_lang$core$Maybe$Just(decodeURIComponent(string));\n\t\t} catch (e) {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t}\n\n\t// SEND REQUEST\n\n\tfunction toTask(request, maybeProgress) {\n\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\tconfigureProgress(xhr, maybeProgress);\n\n\t\t\txhr.addEventListener('error', function () {\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'NetworkError' }));\n\t\t\t});\n\t\t\txhr.addEventListener('timeout', function () {\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'Timeout' }));\n\t\t\t});\n\t\t\txhr.addEventListener('load', function () {\n\t\t\t\tcallback(handleResponse(xhr, request.expect.responseToResult));\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\txhr.open(request.method, request.url, true);\n\t\t\t} catch (e) {\n\t\t\t\treturn callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'BadUrl', _0: request.url }));\n\t\t\t}\n\n\t\t\tconfigureRequest(xhr, request);\n\t\t\tsend(xhr, request.body);\n\n\t\t\treturn function () {\n\t\t\t\txhr.abort();\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction configureProgress(xhr, maybeProgress) {\n\t\tif (maybeProgress.ctor === 'Nothing') {\n\t\t\treturn;\n\t\t}\n\n\t\txhr.addEventListener('progress', function (event) {\n\t\t\tif (!event.lengthComputable) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t_elm_lang$core$Native_Scheduler.rawSpawn(maybeProgress._0({\n\t\t\t\tbytes: event.loaded,\n\t\t\t\tbytesExpected: event.total\n\t\t\t}));\n\t\t});\n\t}\n\n\tfunction configureRequest(xhr, request) {\n\t\tfunction setHeader(pair) {\n\t\t\txhr.setRequestHeader(pair._0, pair._1);\n\t\t}\n\n\t\tA2(_elm_lang$core$List$map, setHeader, request.headers);\n\t\txhr.responseType = request.expect.responseType;\n\t\txhr.withCredentials = request.withCredentials;\n\n\t\tif (request.timeout.ctor === 'Just') {\n\t\t\txhr.timeout = request.timeout._0;\n\t\t}\n\t}\n\n\tfunction send(xhr, body) {\n\t\tswitch (body.ctor) {\n\t\t\tcase 'EmptyBody':\n\t\t\t\txhr.send();\n\t\t\t\treturn;\n\n\t\t\tcase 'StringBody':\n\t\t\t\txhr.setRequestHeader('Content-Type', body._0);\n\t\t\t\txhr.send(body._1);\n\t\t\t\treturn;\n\n\t\t\tcase 'FormDataBody':\n\t\t\t\txhr.send(body._0);\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// RESPONSES\n\n\tfunction handleResponse(xhr, responseToResult) {\n\t\tvar response = toResponse(xhr);\n\n\t\tif (xhr.status < 200 || 300 <= xhr.status) {\n\t\t\tresponse.body = xhr.responseText;\n\t\t\treturn _elm_lang$core$Native_Scheduler.fail({\n\t\t\t\tctor: 'BadStatus',\n\t\t\t\t_0: response\n\t\t\t});\n\t\t}\n\n\t\tvar result = responseToResult(response);\n\n\t\tif (result.ctor === 'Ok') {\n\t\t\treturn _elm_lang$core$Native_Scheduler.succeed(result._0);\n\t\t} else {\n\t\t\tresponse.body = xhr.responseText;\n\t\t\treturn _elm_lang$core$Native_Scheduler.fail({\n\t\t\t\tctor: 'BadPayload',\n\t\t\t\t_0: result._0,\n\t\t\t\t_1: response\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction toResponse(xhr) {\n\t\treturn {\n\t\t\tstatus: { code: xhr.status, message: xhr.statusText },\n\t\t\theaders: parseHeaders(xhr.getAllResponseHeaders()),\n\t\t\turl: xhr.responseURL,\n\t\t\tbody: xhr.response\n\t\t};\n\t}\n\n\tfunction parseHeaders(rawHeaders) {\n\t\tvar headers = _elm_lang$core$Dict$empty;\n\n\t\tif (!rawHeaders) {\n\t\t\treturn headers;\n\t\t}\n\n\t\tvar headerPairs = rawHeaders.split('\\r\\n');\n\t\tfor (var i = headerPairs.length; i--;) {\n\t\t\tvar headerPair = headerPairs[i];\n\t\t\tvar index = headerPair.indexOf(': ');\n\t\t\tif (index > 0) {\n\t\t\t\tvar key = headerPair.substring(0, index);\n\t\t\t\tvar value = headerPair.substring(index + 2);\n\n\t\t\t\theaders = A3(_elm_lang$core$Dict$update, key, function (oldValue) {\n\t\t\t\t\tif (oldValue.ctor === 'Just') {\n\t\t\t\t\t\treturn _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);\n\t\t\t\t\t}\n\t\t\t\t\treturn _elm_lang$core$Maybe$Just(value);\n\t\t\t\t}, headers);\n\t\t\t}\n\t\t}\n\n\t\treturn headers;\n\t}\n\n\t// EXPECTORS\n\n\tfunction expectStringResponse(responseToResult) {\n\t\treturn {\n\t\t\tresponseType: 'text',\n\t\t\tresponseToResult: responseToResult\n\t\t};\n\t}\n\n\tfunction mapExpect(func, expect) {\n\t\treturn {\n\t\t\tresponseType: expect.responseType,\n\t\t\tresponseToResult: function responseToResult(response) {\n\t\t\t\tvar convertedResponse = expect.responseToResult(response);\n\t\t\t\treturn A2(_elm_lang$core$Result$map, func, convertedResponse);\n\t\t\t}\n\t\t};\n\t}\n\n\t// BODY\n\n\tfunction multipart(parts) {\n\t\tvar formData = new FormData();\n\n\t\twhile (parts.ctor !== '[]') {\n\t\t\tvar part = parts._0;\n\t\t\tformData.append(part._0, part._1);\n\t\t\tparts = parts._1;\n\t\t}\n\n\t\treturn { ctor: 'FormDataBody', _0: formData };\n\t}\n\n\treturn {\n\t\ttoTask: F2(toTask),\n\t\texpectStringResponse: expectStringResponse,\n\t\tmapExpect: F2(mapExpect),\n\t\tmultipart: multipart,\n\t\tencodeUri: encodeUri,\n\t\tdecodeUri: decodeUri\n\t};\n}();\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _elm_lang$virtual_dom$Native_Debug = function () {\n\n\t// IMPORT / EXPORT\n\n\tfunction unsafeCoerce(value) {\n\t\treturn value;\n\t}\n\n\tvar upload = _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\tvar element = document.createElement('input');\n\t\telement.setAttribute('type', 'file');\n\t\telement.setAttribute('accept', 'text/json');\n\t\telement.style.display = 'none';\n\t\telement.addEventListener('change', function (event) {\n\t\t\tvar fileReader = new FileReader();\n\t\t\tfileReader.onload = function (e) {\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(e.target.result));\n\t\t\t};\n\t\t\tfileReader.readAsText(event.target.files[0]);\n\t\t\tdocument.body.removeChild(element);\n\t\t});\n\t\tdocument.body.appendChild(element);\n\t\telement.click();\n\t});\n\n\tfunction download(historyLength, json) {\n\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\tvar fileName = 'history-' + historyLength + '.txt';\n\t\t\tvar jsonString = JSON.stringify(json);\n\t\t\tvar mime = 'text/plain;charset=utf-8';\n\t\t\tvar done = _elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0);\n\n\t\t\t// for IE10+\n\t\t\tif (navigator.msSaveBlob) {\n\t\t\t\tnavigator.msSaveBlob(new Blob([jsonString], { type: mime }), fileName);\n\t\t\t\treturn callback(done);\n\t\t\t}\n\n\t\t\t// for HTML5\n\t\t\tvar element = document.createElement('a');\n\t\t\telement.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));\n\t\t\telement.setAttribute('download', fileName);\n\t\t\telement.style.display = 'none';\n\t\t\tdocument.body.appendChild(element);\n\t\t\telement.click();\n\t\t\tdocument.body.removeChild(element);\n\t\t\tcallback(done);\n\t\t});\n\t}\n\n\t// POPOUT\n\n\tfunction messageToString(value) {\n\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\tcase 'boolean':\n\t\t\t\treturn value ? 'True' : 'False';\n\t\t\tcase 'number':\n\t\t\t\treturn value + '';\n\t\t\tcase 'string':\n\t\t\t\treturn '\"' + addSlashes(value, false) + '\"';\n\t\t}\n\t\tif (value instanceof String) {\n\t\t\treturn '\\'' + addSlashes(value, true) + '\\'';\n\t\t}\n\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || !('ctor' in value)) {\n\t\t\treturn '…';\n\t\t}\n\n\t\tvar ctorStarter = value.ctor.substring(0, 5);\n\t\tif (ctorStarter === '_Tupl' || ctorStarter === '_Task') {\n\t\t\treturn '…';\n\t\t}\n\t\tif (['_Array', '<decoder>', '_Process', '::', '[]', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.ctor) >= 0) {\n\t\t\treturn '…';\n\t\t}\n\n\t\tvar keys = Object.keys(value);\n\t\tswitch (keys.length) {\n\t\t\tcase 1:\n\t\t\t\treturn value.ctor;\n\t\t\tcase 2:\n\t\t\t\treturn value.ctor + ' ' + messageToString(value._0);\n\t\t\tdefault:\n\t\t\t\treturn value.ctor + ' … ' + messageToString(value[keys[keys.length - 1]]);\n\t\t}\n\t}\n\n\tfunction primitive(str) {\n\t\treturn { ctor: 'Primitive', _0: str };\n\t}\n\n\tfunction init(value) {\n\t\tvar type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n\t\tif (type === 'boolean') {\n\t\t\treturn {\n\t\t\t\tctor: 'Constructor',\n\t\t\t\t_0: _elm_lang$core$Maybe$Just(value ? 'True' : 'False'),\n\t\t\t\t_1: true,\n\t\t\t\t_2: _elm_lang$core$Native_List.Nil\n\t\t\t};\n\t\t}\n\n\t\tif (type === 'number') {\n\t\t\treturn primitive(value + '');\n\t\t}\n\n\t\tif (type === 'string') {\n\t\t\treturn { ctor: 'S', _0: '\"' + addSlashes(value, false) + '\"' };\n\t\t}\n\n\t\tif (value instanceof String) {\n\t\t\treturn { ctor: 'S', _0: \"'\" + addSlashes(value, true) + \"'\" };\n\t\t}\n\n\t\tif (value instanceof Date) {\n\t\t\treturn primitive('<' + value.toString() + '>');\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn primitive('XXX');\n\t\t}\n\n\t\tif (type === 'object' && 'ctor' in value) {\n\t\t\tvar ctor = value.ctor;\n\n\t\t\tif (ctor === '::' || ctor === '[]') {\n\t\t\t\treturn {\n\t\t\t\t\tctor: 'Sequence',\n\t\t\t\t\t_0: { ctor: 'ListSeq' },\n\t\t\t\t\t_1: true,\n\t\t\t\t\t_2: A2(_elm_lang$core$List$map, init, value)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (ctor === 'Set_elm_builtin') {\n\t\t\t\treturn {\n\t\t\t\t\tctor: 'Sequence',\n\t\t\t\t\t_0: { ctor: 'SetSeq' },\n\t\t\t\t\t_1: true,\n\t\t\t\t\t_2: A3(_elm_lang$core$Set$foldr, initCons, _elm_lang$core$Native_List.Nil, value)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (ctor === 'RBNode_elm_builtin' || ctor == 'RBEmpty_elm_builtin') {\n\t\t\t\treturn {\n\t\t\t\t\tctor: 'Dictionary',\n\t\t\t\t\t_0: true,\n\t\t\t\t\t_1: A3(_elm_lang$core$Dict$foldr, initKeyValueCons, _elm_lang$core$Native_List.Nil, value)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (ctor === '_Array') {\n\t\t\t\treturn {\n\t\t\t\t\tctor: 'Sequence',\n\t\t\t\t\t_0: { ctor: 'ArraySeq' },\n\t\t\t\t\t_1: true,\n\t\t\t\t\t_2: A3(_elm_lang$core$Array$foldr, initCons, _elm_lang$core$Native_List.Nil, value)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar ctorStarter = value.ctor.substring(0, 5);\n\t\t\tif (ctorStarter === '_Task') {\n\t\t\t\treturn primitive('<task>');\n\t\t\t}\n\n\t\t\tif (ctor === '<decoder>') {\n\t\t\t\treturn primitive(ctor);\n\t\t\t}\n\n\t\t\tif (ctor === '_Process') {\n\t\t\t\treturn primitive('<process>');\n\t\t\t}\n\n\t\t\tvar list = _elm_lang$core$Native_List.Nil;\n\t\t\tfor (var i in value) {\n\t\t\t\tif (i === 'ctor') continue;\n\t\t\t\tlist = _elm_lang$core$Native_List.Cons(init(value[i]), list);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tctor: 'Constructor',\n\t\t\t\t_0: ctorStarter === '_Tupl' ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(ctor),\n\t\t\t\t_1: true,\n\t\t\t\t_2: _elm_lang$core$List$reverse(list)\n\t\t\t};\n\t\t}\n\n\t\tif (type === 'object') {\n\t\t\tvar dict = _elm_lang$core$Dict$empty;\n\t\t\tfor (var i in value) {\n\t\t\t\tdict = A3(_elm_lang$core$Dict$insert, i, init(value[i]), dict);\n\t\t\t}\n\t\t\treturn { ctor: 'Record', _0: true, _1: dict };\n\t\t}\n\n\t\treturn primitive('XXX');\n\t}\n\n\tvar initCons = F2(initConsHelp);\n\n\tfunction initConsHelp(value, list) {\n\t\treturn _elm_lang$core$Native_List.Cons(init(value), list);\n\t}\n\n\tvar initKeyValueCons = F3(initKeyValueConsHelp);\n\n\tfunction initKeyValueConsHelp(key, value, list) {\n\t\treturn _elm_lang$core$Native_List.Cons(_elm_lang$core$Native_Utils.Tuple2(init(key), init(value)), list);\n\t}\n\n\tfunction addSlashes(str, isChar) {\n\t\tvar s = str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\t\tif (isChar) {\n\t\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t\t} else {\n\t\t\treturn s.replace(/\\\"/g, '\\\\\"');\n\t\t}\n\t}\n\n\treturn {\n\t\tupload: upload,\n\t\tdownload: F2(download),\n\t\tunsafeCoerce: unsafeCoerce,\n\t\tmessageToString: messageToString,\n\t\tinit: init\n\t};\n}();\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _elm_lang$virtual_dom$VirtualDom_Debug$wrap;\nvar _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;\n\nvar _elm_lang$virtual_dom$Native_VirtualDom = function () {\n\n\tvar STYLE_KEY = 'STYLE';\n\tvar EVENT_KEY = 'EVENT';\n\tvar ATTR_KEY = 'ATTR';\n\tvar ATTR_NS_KEY = 'ATTR_NS';\n\n\tvar localDoc = typeof document !== 'undefined' ? document : {};\n\n\t////////////  VIRTUAL DOM NODES  ////////////\n\n\n\tfunction text(string) {\n\t\treturn {\n\t\t\ttype: 'text',\n\t\t\ttext: string\n\t\t};\n\t}\n\n\tfunction node(tag) {\n\t\treturn F2(function (factList, kidList) {\n\t\t\treturn nodeHelp(tag, factList, kidList);\n\t\t});\n\t}\n\n\tfunction nodeHelp(tag, factList, kidList) {\n\t\tvar organized = organizeFacts(factList);\n\t\tvar namespace = organized.namespace;\n\t\tvar facts = organized.facts;\n\n\t\tvar children = [];\n\t\tvar descendantsCount = 0;\n\t\twhile (kidList.ctor !== '[]') {\n\t\t\tvar kid = kidList._0;\n\t\t\tdescendantsCount += kid.descendantsCount || 0;\n\t\t\tchildren.push(kid);\n\t\t\tkidList = kidList._1;\n\t\t}\n\t\tdescendantsCount += children.length;\n\n\t\treturn {\n\t\t\ttype: 'node',\n\t\t\ttag: tag,\n\t\t\tfacts: facts,\n\t\t\tchildren: children,\n\t\t\tnamespace: namespace,\n\t\t\tdescendantsCount: descendantsCount\n\t\t};\n\t}\n\n\tfunction keyedNode(tag, factList, kidList) {\n\t\tvar organized = organizeFacts(factList);\n\t\tvar namespace = organized.namespace;\n\t\tvar facts = organized.facts;\n\n\t\tvar children = [];\n\t\tvar descendantsCount = 0;\n\t\twhile (kidList.ctor !== '[]') {\n\t\t\tvar kid = kidList._0;\n\t\t\tdescendantsCount += kid._1.descendantsCount || 0;\n\t\t\tchildren.push(kid);\n\t\t\tkidList = kidList._1;\n\t\t}\n\t\tdescendantsCount += children.length;\n\n\t\treturn {\n\t\t\ttype: 'keyed-node',\n\t\t\ttag: tag,\n\t\t\tfacts: facts,\n\t\t\tchildren: children,\n\t\t\tnamespace: namespace,\n\t\t\tdescendantsCount: descendantsCount\n\t\t};\n\t}\n\n\tfunction custom(factList, model, impl) {\n\t\tvar facts = organizeFacts(factList).facts;\n\n\t\treturn {\n\t\t\ttype: 'custom',\n\t\t\tfacts: facts,\n\t\t\tmodel: model,\n\t\t\timpl: impl\n\t\t};\n\t}\n\n\tfunction map(tagger, node) {\n\t\treturn {\n\t\t\ttype: 'tagger',\n\t\t\ttagger: tagger,\n\t\t\tnode: node,\n\t\t\tdescendantsCount: 1 + (node.descendantsCount || 0)\n\t\t};\n\t}\n\n\tfunction thunk(func, args, thunk) {\n\t\treturn {\n\t\t\ttype: 'thunk',\n\t\t\tfunc: func,\n\t\t\targs: args,\n\t\t\tthunk: thunk,\n\t\t\tnode: undefined\n\t\t};\n\t}\n\n\tfunction lazy(fn, a) {\n\t\treturn thunk(fn, [a], function () {\n\t\t\treturn fn(a);\n\t\t});\n\t}\n\n\tfunction lazy2(fn, a, b) {\n\t\treturn thunk(fn, [a, b], function () {\n\t\t\treturn A2(fn, a, b);\n\t\t});\n\t}\n\n\tfunction lazy3(fn, a, b, c) {\n\t\treturn thunk(fn, [a, b, c], function () {\n\t\t\treturn A3(fn, a, b, c);\n\t\t});\n\t}\n\n\t// FACTS\n\n\n\tfunction organizeFacts(factList) {\n\t\tvar namespace,\n\t\t    facts = {};\n\n\t\twhile (factList.ctor !== '[]') {\n\t\t\tvar entry = factList._0;\n\t\t\tvar key = entry.key;\n\n\t\t\tif (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY) {\n\t\t\t\tvar subFacts = facts[key] || {};\n\t\t\t\tsubFacts[entry.realKey] = entry.value;\n\t\t\t\tfacts[key] = subFacts;\n\t\t\t} else if (key === STYLE_KEY) {\n\t\t\t\tvar styles = facts[key] || {};\n\t\t\t\tvar styleList = entry.value;\n\t\t\t\twhile (styleList.ctor !== '[]') {\n\t\t\t\t\tvar style = styleList._0;\n\t\t\t\t\tstyles[style._0] = style._1;\n\t\t\t\t\tstyleList = styleList._1;\n\t\t\t\t}\n\t\t\t\tfacts[key] = styles;\n\t\t\t} else if (key === 'namespace') {\n\t\t\t\tnamespace = entry.value;\n\t\t\t} else if (key === 'className') {\n\t\t\t\tvar classes = facts[key];\n\t\t\t\tfacts[key] = typeof classes === 'undefined' ? entry.value : classes + ' ' + entry.value;\n\t\t\t} else {\n\t\t\t\tfacts[key] = entry.value;\n\t\t\t}\n\t\t\tfactList = factList._1;\n\t\t}\n\n\t\treturn {\n\t\t\tfacts: facts,\n\t\t\tnamespace: namespace\n\t\t};\n\t}\n\n\t////////////  PROPERTIES AND ATTRIBUTES  ////////////\n\n\n\tfunction style(value) {\n\t\treturn {\n\t\t\tkey: STYLE_KEY,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tfunction property(key, value) {\n\t\treturn {\n\t\t\tkey: key,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tfunction attribute(key, value) {\n\t\treturn {\n\t\t\tkey: ATTR_KEY,\n\t\t\trealKey: key,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tfunction attributeNS(namespace, key, value) {\n\t\treturn {\n\t\t\tkey: ATTR_NS_KEY,\n\t\t\trealKey: key,\n\t\t\tvalue: {\n\t\t\t\tvalue: value,\n\t\t\t\tnamespace: namespace\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction on(name, options, decoder) {\n\t\treturn {\n\t\t\tkey: EVENT_KEY,\n\t\t\trealKey: name,\n\t\t\tvalue: {\n\t\t\t\toptions: options,\n\t\t\t\tdecoder: decoder\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction equalEvents(a, b) {\n\t\tif (a.options !== b.options) {\n\t\t\tif (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);\n\t}\n\n\tfunction mapProperty(func, property) {\n\t\tif (property.key !== EVENT_KEY) {\n\t\t\treturn property;\n\t\t}\n\t\treturn on(property.realKey, property.value.options, A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder));\n\t}\n\n\t////////////  RENDER  ////////////\n\n\n\tfunction render(vNode, eventNode) {\n\t\tswitch (vNode.type) {\n\t\t\tcase 'thunk':\n\t\t\t\tif (!vNode.node) {\n\t\t\t\t\tvNode.node = vNode.thunk();\n\t\t\t\t}\n\t\t\t\treturn render(vNode.node, eventNode);\n\n\t\t\tcase 'tagger':\n\t\t\t\tvar subNode = vNode.node;\n\t\t\t\tvar tagger = vNode.tagger;\n\n\t\t\t\twhile (subNode.type === 'tagger') {\n\t\t\t\t\t(typeof tagger === 'undefined' ? 'undefined' : _typeof(tagger)) !== 'object' ? tagger = [tagger, subNode.tagger] : tagger.push(subNode.tagger);\n\n\t\t\t\t\tsubNode = subNode.node;\n\t\t\t\t}\n\n\t\t\t\tvar subEventRoot = { tagger: tagger, parent: eventNode };\n\t\t\t\tvar domNode = render(subNode, subEventRoot);\n\t\t\t\tdomNode.elm_event_node_ref = subEventRoot;\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'text':\n\t\t\t\treturn localDoc.createTextNode(vNode.text);\n\n\t\t\tcase 'node':\n\t\t\t\tvar domNode = vNode.namespace ? localDoc.createElementNS(vNode.namespace, vNode.tag) : localDoc.createElement(vNode.tag);\n\n\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\n\t\t\t\tvar children = vNode.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tdomNode.appendChild(render(children[i], eventNode));\n\t\t\t\t}\n\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'keyed-node':\n\t\t\t\tvar domNode = vNode.namespace ? localDoc.createElementNS(vNode.namespace, vNode.tag) : localDoc.createElement(vNode.tag);\n\n\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\n\t\t\t\tvar children = vNode.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tdomNode.appendChild(render(children[i]._1, eventNode));\n\t\t\t\t}\n\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'custom':\n\t\t\t\tvar domNode = vNode.impl.render(vNode.model);\n\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\t\t\t\treturn domNode;\n\t\t}\n\t}\n\n\t////////////  APPLY FACTS  ////////////\n\n\n\tfunction applyFacts(domNode, eventNode, facts) {\n\t\tfor (var key in facts) {\n\t\t\tvar value = facts[key];\n\n\t\t\tswitch (key) {\n\t\t\t\tcase STYLE_KEY:\n\t\t\t\t\tapplyStyles(domNode, value);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EVENT_KEY:\n\t\t\t\t\tapplyEvents(domNode, eventNode, value);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ATTR_KEY:\n\t\t\t\t\tapplyAttrs(domNode, value);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ATTR_NS_KEY:\n\t\t\t\t\tapplyAttrsNS(domNode, value);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'value':\n\t\t\t\t\tif (domNode[key] !== value) {\n\t\t\t\t\t\tdomNode[key] = value;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tdomNode[key] = value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction applyStyles(domNode, styles) {\n\t\tvar domNodeStyle = domNode.style;\n\n\t\tfor (var key in styles) {\n\t\t\tdomNodeStyle[key] = styles[key];\n\t\t}\n\t}\n\n\tfunction applyEvents(domNode, eventNode, events) {\n\t\tvar allHandlers = domNode.elm_handlers || {};\n\n\t\tfor (var key in events) {\n\t\t\tvar handler = allHandlers[key];\n\t\t\tvar value = events[key];\n\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tdomNode.removeEventListener(key, handler);\n\t\t\t\tallHandlers[key] = undefined;\n\t\t\t} else if (typeof handler === 'undefined') {\n\t\t\t\tvar handler = makeEventHandler(eventNode, value);\n\t\t\t\tdomNode.addEventListener(key, handler);\n\t\t\t\tallHandlers[key] = handler;\n\t\t\t} else {\n\t\t\t\thandler.info = value;\n\t\t\t}\n\t\t}\n\n\t\tdomNode.elm_handlers = allHandlers;\n\t}\n\n\tfunction makeEventHandler(eventNode, info) {\n\t\tfunction eventHandler(event) {\n\t\t\tvar info = eventHandler.info;\n\n\t\t\tvar value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);\n\n\t\t\tif (value.ctor === 'Ok') {\n\t\t\t\tvar options = info.options;\n\t\t\t\tif (options.stopPropagation) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\t\t\t\tif (options.preventDefault) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar message = value._0;\n\n\t\t\t\tvar currentEventNode = eventNode;\n\t\t\t\twhile (currentEventNode) {\n\t\t\t\t\tvar tagger = currentEventNode.tagger;\n\t\t\t\t\tif (typeof tagger === 'function') {\n\t\t\t\t\t\tmessage = tagger(message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var i = tagger.length; i--;) {\n\t\t\t\t\t\t\tmessage = tagger[i](message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentEventNode = currentEventNode.parent;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\teventHandler.info = info;\n\n\t\treturn eventHandler;\n\t}\n\n\tfunction applyAttrs(domNode, attrs) {\n\t\tfor (var key in attrs) {\n\t\t\tvar value = attrs[key];\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tdomNode.removeAttribute(key);\n\t\t\t} else {\n\t\t\t\tdomNode.setAttribute(key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction applyAttrsNS(domNode, nsAttrs) {\n\t\tfor (var key in nsAttrs) {\n\t\t\tvar pair = nsAttrs[key];\n\t\t\tvar namespace = pair.namespace;\n\t\t\tvar value = pair.value;\n\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tdomNode.removeAttributeNS(namespace, key);\n\t\t\t} else {\n\t\t\t\tdomNode.setAttributeNS(namespace, key, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t////////////  DIFF  ////////////\n\n\n\tfunction diff(a, b) {\n\t\tvar patches = [];\n\t\tdiffHelp(a, b, patches, 0);\n\t\treturn patches;\n\t}\n\n\tfunction makePatch(type, index, data) {\n\t\treturn {\n\t\t\tindex: index,\n\t\t\ttype: type,\n\t\t\tdata: data,\n\t\t\tdomNode: undefined,\n\t\t\teventNode: undefined\n\t\t};\n\t}\n\n\tfunction diffHelp(a, b, patches, index) {\n\t\tif (a === b) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar aType = a.type;\n\t\tvar bType = b.type;\n\n\t\t// Bail if you run into different types of nodes. Implies that the\n\t\t// structure has changed significantly and it's not worth a diff.\n\t\tif (aType !== bType) {\n\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\treturn;\n\t\t}\n\n\t\t// Now we know that both nodes are the same type.\n\t\tswitch (bType) {\n\t\t\tcase 'thunk':\n\t\t\t\tvar aArgs = a.args;\n\t\t\t\tvar bArgs = b.args;\n\t\t\t\tvar i = aArgs.length;\n\t\t\t\tvar same = a.func === b.func && i === bArgs.length;\n\t\t\t\twhile (same && i--) {\n\t\t\t\t\tsame = aArgs[i] === bArgs[i];\n\t\t\t\t}\n\t\t\t\tif (same) {\n\t\t\t\t\tb.node = a.node;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tb.node = b.thunk();\n\t\t\t\tvar subPatches = [];\n\t\t\t\tdiffHelp(a.node, b.node, subPatches, 0);\n\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\tpatches.push(makePatch('p-thunk', index, subPatches));\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\tcase 'tagger':\n\t\t\t\t// gather nested taggers\n\t\t\t\tvar aTaggers = a.tagger;\n\t\t\t\tvar bTaggers = b.tagger;\n\t\t\t\tvar nesting = false;\n\n\t\t\t\tvar aSubNode = a.node;\n\t\t\t\twhile (aSubNode.type === 'tagger') {\n\t\t\t\t\tnesting = true;\n\n\t\t\t\t\t(typeof aTaggers === 'undefined' ? 'undefined' : _typeof(aTaggers)) !== 'object' ? aTaggers = [aTaggers, aSubNode.tagger] : aTaggers.push(aSubNode.tagger);\n\n\t\t\t\t\taSubNode = aSubNode.node;\n\t\t\t\t}\n\n\t\t\t\tvar bSubNode = b.node;\n\t\t\t\twhile (bSubNode.type === 'tagger') {\n\t\t\t\t\tnesting = true;\n\n\t\t\t\t\t(typeof bTaggers === 'undefined' ? 'undefined' : _typeof(bTaggers)) !== 'object' ? bTaggers = [bTaggers, bSubNode.tagger] : bTaggers.push(bSubNode.tagger);\n\n\t\t\t\t\tbSubNode = bSubNode.node;\n\t\t\t\t}\n\n\t\t\t\t// Just bail if different numbers of taggers. This implies the\n\t\t\t\t// structure of the virtual DOM has changed.\n\t\t\t\tif (nesting && aTaggers.length !== bTaggers.length) {\n\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// check if taggers are \"the same\"\n\t\t\t\tif (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers) {\n\t\t\t\t\tpatches.push(makePatch('p-tagger', index, bTaggers));\n\t\t\t\t}\n\n\t\t\t\t// diff everything below the taggers\n\t\t\t\tdiffHelp(aSubNode, bSubNode, patches, index + 1);\n\t\t\t\treturn;\n\n\t\t\tcase 'text':\n\t\t\t\tif (a.text !== b.text) {\n\t\t\t\t\tpatches.push(makePatch('p-text', index, b.text));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\tcase 'node':\n\t\t\t\t// Bail if obvious indicators have changed. Implies more serious\n\t\t\t\t// structural changes such that it's not worth it to diff.\n\t\t\t\tif (a.tag !== b.tag || a.namespace !== b.namespace) {\n\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\n\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t}\n\n\t\t\t\tdiffChildren(a, b, patches, index);\n\t\t\t\treturn;\n\n\t\t\tcase 'keyed-node':\n\t\t\t\t// Bail if obvious indicators have changed. Implies more serious\n\t\t\t\t// structural changes such that it's not worth it to diff.\n\t\t\t\tif (a.tag !== b.tag || a.namespace !== b.namespace) {\n\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\n\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t}\n\n\t\t\t\tdiffKeyedChildren(a, b, patches, index);\n\t\t\t\treturn;\n\n\t\t\tcase 'custom':\n\t\t\t\tif (a.impl !== b.impl) {\n\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t}\n\n\t\t\t\tvar patch = b.impl.diff(a, b);\n\t\t\t\tif (patch) {\n\t\t\t\t\tpatches.push(makePatch('p-custom', index, patch));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t// assumes the incoming arrays are the same length\n\tfunction pairwiseRefEqual(as, bs) {\n\t\tfor (var i = 0; i < as.length; i++) {\n\t\t\tif (as[i] !== bs[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// TODO Instead of creating a new diff object, it's possible to just test if\n\t// there *is* a diff. During the actual patch, do the diff again and make the\n\t// modifications directly. This way, there's no new allocations. Worth it?\n\tfunction diffFacts(a, b, category) {\n\t\tvar diff;\n\n\t\t// look for changes and removals\n\t\tfor (var aKey in a) {\n\t\t\tif (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY) {\n\t\t\t\tvar subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);\n\t\t\t\tif (subDiff) {\n\t\t\t\t\tdiff = diff || {};\n\t\t\t\t\tdiff[aKey] = subDiff;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// remove if not in the new facts\n\t\t\tif (!(aKey in b)) {\n\t\t\t\tdiff = diff || {};\n\t\t\t\tdiff[aKey] = typeof category === 'undefined' ? typeof a[aKey] === 'string' ? '' : null : category === STYLE_KEY ? '' : category === EVENT_KEY || category === ATTR_KEY ? undefined : { namespace: a[aKey].namespace, value: undefined };\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar aValue = a[aKey];\n\t\t\tvar bValue = b[aKey];\n\n\t\t\t// reference equal, so don't worry about it\n\t\t\tif (aValue === bValue && aKey !== 'value' || category === EVENT_KEY && equalEvents(aValue, bValue)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdiff = diff || {};\n\t\t\tdiff[aKey] = bValue;\n\t\t}\n\n\t\t// add new stuff\n\t\tfor (var bKey in b) {\n\t\t\tif (!(bKey in a)) {\n\t\t\t\tdiff = diff || {};\n\t\t\t\tdiff[bKey] = b[bKey];\n\t\t\t}\n\t\t}\n\n\t\treturn diff;\n\t}\n\n\tfunction diffChildren(aParent, bParent, patches, rootIndex) {\n\t\tvar aChildren = aParent.children;\n\t\tvar bChildren = bParent.children;\n\n\t\tvar aLen = aChildren.length;\n\t\tvar bLen = bChildren.length;\n\n\t\t// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS\n\n\t\tif (aLen > bLen) {\n\t\t\tpatches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));\n\t\t} else if (aLen < bLen) {\n\t\t\tpatches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));\n\t\t}\n\n\t\t// PAIRWISE DIFF EVERYTHING ELSE\n\n\t\tvar index = rootIndex;\n\t\tvar minLen = aLen < bLen ? aLen : bLen;\n\t\tfor (var i = 0; i < minLen; i++) {\n\t\t\tindex++;\n\t\t\tvar aChild = aChildren[i];\n\t\t\tdiffHelp(aChild, bChildren[i], patches, index);\n\t\t\tindex += aChild.descendantsCount || 0;\n\t\t}\n\t}\n\n\t////////////  KEYED DIFF  ////////////\n\n\n\tfunction diffKeyedChildren(aParent, bParent, patches, rootIndex) {\n\t\tvar localPatches = [];\n\n\t\tvar changes = {}; // Dict String Entry\n\t\tvar inserts = []; // Array { index : Int, entry : Entry }\n\t\t// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }\n\n\t\tvar aChildren = aParent.children;\n\t\tvar bChildren = bParent.children;\n\t\tvar aLen = aChildren.length;\n\t\tvar bLen = bChildren.length;\n\t\tvar aIndex = 0;\n\t\tvar bIndex = 0;\n\n\t\tvar index = rootIndex;\n\n\t\twhile (aIndex < aLen && bIndex < bLen) {\n\t\t\tvar a = aChildren[aIndex];\n\t\t\tvar b = bChildren[bIndex];\n\n\t\t\tvar aKey = a._0;\n\t\t\tvar bKey = b._0;\n\t\t\tvar aNode = a._1;\n\t\t\tvar bNode = b._1;\n\n\t\t\t// check if keys match\n\n\t\t\tif (aKey === bKey) {\n\t\t\t\tindex++;\n\t\t\t\tdiffHelp(aNode, bNode, localPatches, index);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\taIndex++;\n\t\t\t\tbIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// look ahead 1 to detect insertions and removals.\n\n\t\t\tvar aLookAhead = aIndex + 1 < aLen;\n\t\t\tvar bLookAhead = bIndex + 1 < bLen;\n\n\t\t\tif (aLookAhead) {\n\t\t\t\tvar aNext = aChildren[aIndex + 1];\n\t\t\t\tvar aNextKey = aNext._0;\n\t\t\t\tvar aNextNode = aNext._1;\n\t\t\t\tvar oldMatch = bKey === aNextKey;\n\t\t\t}\n\n\t\t\tif (bLookAhead) {\n\t\t\t\tvar bNext = bChildren[bIndex + 1];\n\t\t\t\tvar bNextKey = bNext._0;\n\t\t\t\tvar bNextNode = bNext._1;\n\t\t\t\tvar newMatch = aKey === bNextKey;\n\t\t\t}\n\n\t\t\t// swap a and b\n\t\t\tif (aLookAhead && bLookAhead && newMatch && oldMatch) {\n\t\t\t\tindex++;\n\t\t\t\tdiffHelp(aNode, bNextNode, localPatches, index);\n\t\t\t\tinsertNode(changes, localPatches, aKey, bNode, bIndex, inserts);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\tindex++;\n\t\t\t\tremoveNode(changes, localPatches, aKey, aNextNode, index);\n\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\taIndex += 2;\n\t\t\t\tbIndex += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// insert b\n\t\t\tif (bLookAhead && newMatch) {\n\t\t\t\tindex++;\n\t\t\t\tinsertNode(changes, localPatches, bKey, bNode, bIndex, inserts);\n\t\t\t\tdiffHelp(aNode, bNextNode, localPatches, index);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\taIndex += 1;\n\t\t\t\tbIndex += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// remove a\n\t\t\tif (aLookAhead && oldMatch) {\n\t\t\t\tindex++;\n\t\t\t\tremoveNode(changes, localPatches, aKey, aNode, index);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\tindex++;\n\t\t\t\tdiffHelp(aNextNode, bNode, localPatches, index);\n\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\taIndex += 2;\n\t\t\t\tbIndex += 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// remove a, insert b\n\t\t\tif (aLookAhead && bLookAhead && aNextKey === bNextKey) {\n\t\t\t\tindex++;\n\t\t\t\tremoveNode(changes, localPatches, aKey, aNode, index);\n\t\t\t\tinsertNode(changes, localPatches, bKey, bNode, bIndex, inserts);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\tindex++;\n\t\t\t\tdiffHelp(aNextNode, bNextNode, localPatches, index);\n\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\taIndex += 2;\n\t\t\t\tbIndex += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\t// eat up any remaining nodes with removeNode and insertNode\n\n\t\twhile (aIndex < aLen) {\n\t\t\tindex++;\n\t\t\tvar a = aChildren[aIndex];\n\t\t\tvar aNode = a._1;\n\t\t\tremoveNode(changes, localPatches, a._0, aNode, index);\n\t\t\tindex += aNode.descendantsCount || 0;\n\t\t\taIndex++;\n\t\t}\n\n\t\tvar endInserts;\n\t\twhile (bIndex < bLen) {\n\t\t\tendInserts = endInserts || [];\n\t\t\tvar b = bChildren[bIndex];\n\t\t\tinsertNode(changes, localPatches, b._0, b._1, undefined, endInserts);\n\t\t\tbIndex++;\n\t\t}\n\n\t\tif (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined') {\n\t\t\tpatches.push(makePatch('p-reorder', rootIndex, {\n\t\t\t\tpatches: localPatches,\n\t\t\t\tinserts: inserts,\n\t\t\t\tendInserts: endInserts\n\t\t\t}));\n\t\t}\n\t}\n\n\t////////////  CHANGES FROM KEYED DIFF  ////////////\n\n\n\tvar POSTFIX = '_elmW6BL';\n\n\tfunction insertNode(changes, localPatches, key, vnode, bIndex, inserts) {\n\t\tvar entry = changes[key];\n\n\t\t// never seen this key before\n\t\tif (typeof entry === 'undefined') {\n\t\t\tentry = {\n\t\t\t\ttag: 'insert',\n\t\t\t\tvnode: vnode,\n\t\t\t\tindex: bIndex,\n\t\t\t\tdata: undefined\n\t\t\t};\n\n\t\t\tinserts.push({ index: bIndex, entry: entry });\n\t\t\tchanges[key] = entry;\n\n\t\t\treturn;\n\t\t}\n\n\t\t// this key was removed earlier, a match!\n\t\tif (entry.tag === 'remove') {\n\t\t\tinserts.push({ index: bIndex, entry: entry });\n\n\t\t\tentry.tag = 'move';\n\t\t\tvar subPatches = [];\n\t\t\tdiffHelp(entry.vnode, vnode, subPatches, entry.index);\n\t\t\tentry.index = bIndex;\n\t\t\tentry.data.data = {\n\t\t\t\tpatches: subPatches,\n\t\t\t\tentry: entry\n\t\t\t};\n\n\t\t\treturn;\n\t\t}\n\n\t\t// this key has already been inserted or moved, a duplicate!\n\t\tinsertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);\n\t}\n\n\tfunction removeNode(changes, localPatches, key, vnode, index) {\n\t\tvar entry = changes[key];\n\n\t\t// never seen this key before\n\t\tif (typeof entry === 'undefined') {\n\t\t\tvar patch = makePatch('p-remove', index, undefined);\n\t\t\tlocalPatches.push(patch);\n\n\t\t\tchanges[key] = {\n\t\t\t\ttag: 'remove',\n\t\t\t\tvnode: vnode,\n\t\t\t\tindex: index,\n\t\t\t\tdata: patch\n\t\t\t};\n\n\t\t\treturn;\n\t\t}\n\n\t\t// this key was inserted earlier, a match!\n\t\tif (entry.tag === 'insert') {\n\t\t\tentry.tag = 'move';\n\t\t\tvar subPatches = [];\n\t\t\tdiffHelp(vnode, entry.vnode, subPatches, index);\n\n\t\t\tvar patch = makePatch('p-remove', index, {\n\t\t\t\tpatches: subPatches,\n\t\t\t\tentry: entry\n\t\t\t});\n\t\t\tlocalPatches.push(patch);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// this key has already been removed or moved, a duplicate!\n\t\tremoveNode(changes, localPatches, key + POSTFIX, vnode, index);\n\t}\n\n\t////////////  ADD DOM NODES  ////////////\n\t//\n\t// Each DOM node has an \"index\" assigned in order of traversal. It is important\n\t// to minimize our crawl over the actual DOM, so these indexes (along with the\n\t// descendantsCount of virtual nodes) let us skip touching entire subtrees of\n\t// the DOM if we know there are no patches there.\n\n\n\tfunction addDomNodes(domNode, vNode, patches, eventNode) {\n\t\taddDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);\n\t}\n\n\t// assumes `patches` is non-empty and indexes increase monotonically.\n\tfunction addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {\n\t\tvar patch = patches[i];\n\t\tvar index = patch.index;\n\n\t\twhile (index === low) {\n\t\t\tvar patchType = patch.type;\n\n\t\t\tif (patchType === 'p-thunk') {\n\t\t\t\taddDomNodes(domNode, vNode.node, patch.data, eventNode);\n\t\t\t} else if (patchType === 'p-reorder') {\n\t\t\t\tpatch.domNode = domNode;\n\t\t\t\tpatch.eventNode = eventNode;\n\n\t\t\t\tvar subPatches = patch.data.patches;\n\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\taddDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t}\n\t\t\t} else if (patchType === 'p-remove') {\n\t\t\t\tpatch.domNode = domNode;\n\t\t\t\tpatch.eventNode = eventNode;\n\n\t\t\t\tvar data = patch.data;\n\t\t\t\tif (typeof data !== 'undefined') {\n\t\t\t\t\tdata.entry.data = domNode;\n\t\t\t\t\tvar subPatches = data.patches;\n\t\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\t\taddDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpatch.domNode = domNode;\n\t\t\t\tpatch.eventNode = eventNode;\n\t\t\t}\n\n\t\t\ti++;\n\n\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\tswitch (vNode.type) {\n\t\t\tcase 'tagger':\n\t\t\t\tvar subNode = vNode.node;\n\n\t\t\t\twhile (subNode.type === \"tagger\") {\n\t\t\t\t\tsubNode = subNode.node;\n\t\t\t\t}\n\n\t\t\t\treturn addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);\n\n\t\t\tcase 'node':\n\t\t\t\tvar vChildren = vNode.children;\n\t\t\t\tvar childNodes = domNode.childNodes;\n\t\t\t\tfor (var j = 0; j < vChildren.length; j++) {\n\t\t\t\t\tlow++;\n\t\t\t\t\tvar vChild = vChildren[j];\n\t\t\t\t\tvar nextLow = low + (vChild.descendantsCount || 0);\n\t\t\t\t\tif (low <= index && index <= nextLow) {\n\t\t\t\t\t\ti = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);\n\t\t\t\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlow = nextLow;\n\t\t\t\t}\n\t\t\t\treturn i;\n\n\t\t\tcase 'keyed-node':\n\t\t\t\tvar vChildren = vNode.children;\n\t\t\t\tvar childNodes = domNode.childNodes;\n\t\t\t\tfor (var j = 0; j < vChildren.length; j++) {\n\t\t\t\t\tlow++;\n\t\t\t\t\tvar vChild = vChildren[j]._1;\n\t\t\t\t\tvar nextLow = low + (vChild.descendantsCount || 0);\n\t\t\t\t\tif (low <= index && index <= nextLow) {\n\t\t\t\t\t\ti = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);\n\t\t\t\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlow = nextLow;\n\t\t\t\t}\n\t\t\t\treturn i;\n\n\t\t\tcase 'text':\n\t\t\tcase 'thunk':\n\t\t\t\tthrow new Error('should never traverse `text` or `thunk` nodes like this');\n\t\t}\n\t}\n\n\t////////////  APPLY PATCHES  ////////////\n\n\n\tfunction applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {\n\t\tif (patches.length === 0) {\n\t\t\treturn rootDomNode;\n\t\t}\n\n\t\taddDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);\n\t\treturn applyPatchesHelp(rootDomNode, patches);\n\t}\n\n\tfunction applyPatchesHelp(rootDomNode, patches) {\n\t\tfor (var i = 0; i < patches.length; i++) {\n\t\t\tvar patch = patches[i];\n\t\t\tvar localDomNode = patch.domNode;\n\t\t\tvar newNode = applyPatch(localDomNode, patch);\n\t\t\tif (localDomNode === rootDomNode) {\n\t\t\t\trootDomNode = newNode;\n\t\t\t}\n\t\t}\n\t\treturn rootDomNode;\n\t}\n\n\tfunction applyPatch(domNode, patch) {\n\t\tswitch (patch.type) {\n\t\t\tcase 'p-redraw':\n\t\t\t\treturn applyPatchRedraw(domNode, patch.data, patch.eventNode);\n\n\t\t\tcase 'p-facts':\n\t\t\t\tapplyFacts(domNode, patch.eventNode, patch.data);\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-text':\n\t\t\t\tdomNode.replaceData(0, domNode.length, patch.data);\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-thunk':\n\t\t\t\treturn applyPatchesHelp(domNode, patch.data);\n\n\t\t\tcase 'p-tagger':\n\t\t\t\tif (typeof domNode.elm_event_node_ref !== 'undefined') {\n\t\t\t\t\tdomNode.elm_event_node_ref.tagger = patch.data;\n\t\t\t\t} else {\n\t\t\t\t\tdomNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };\n\t\t\t\t}\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-remove-last':\n\t\t\t\tvar i = patch.data;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tdomNode.removeChild(domNode.lastChild);\n\t\t\t\t}\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-append':\n\t\t\t\tvar newNodes = patch.data;\n\t\t\t\tfor (var i = 0; i < newNodes.length; i++) {\n\t\t\t\t\tdomNode.appendChild(render(newNodes[i], patch.eventNode));\n\t\t\t\t}\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-remove':\n\t\t\t\tvar data = patch.data;\n\t\t\t\tif (typeof data === 'undefined') {\n\t\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\t\treturn domNode;\n\t\t\t\t}\n\t\t\t\tvar entry = data.entry;\n\t\t\t\tif (typeof entry.index !== 'undefined') {\n\t\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\t}\n\t\t\t\tentry.data = applyPatchesHelp(domNode, data.patches);\n\t\t\t\treturn domNode;\n\n\t\t\tcase 'p-reorder':\n\t\t\t\treturn applyPatchReorder(domNode, patch);\n\n\t\t\tcase 'p-custom':\n\t\t\t\tvar impl = patch.data;\n\t\t\t\treturn impl.applyPatch(domNode, impl.data);\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Ran into an unknown patch!');\n\t\t}\n\t}\n\n\tfunction applyPatchRedraw(domNode, vNode, eventNode) {\n\t\tvar parentNode = domNode.parentNode;\n\t\tvar newNode = render(vNode, eventNode);\n\n\t\tif (typeof newNode.elm_event_node_ref === 'undefined') {\n\t\t\tnewNode.elm_event_node_ref = domNode.elm_event_node_ref;\n\t\t}\n\n\t\tif (parentNode && newNode !== domNode) {\n\t\t\tparentNode.replaceChild(newNode, domNode);\n\t\t}\n\t\treturn newNode;\n\t}\n\n\tfunction applyPatchReorder(domNode, patch) {\n\t\tvar data = patch.data;\n\n\t\t// remove end inserts\n\t\tvar frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);\n\n\t\t// removals\n\t\tdomNode = applyPatchesHelp(domNode, data.patches);\n\n\t\t// inserts\n\t\tvar inserts = data.inserts;\n\t\tfor (var i = 0; i < inserts.length; i++) {\n\t\t\tvar insert = inserts[i];\n\t\t\tvar entry = insert.entry;\n\t\t\tvar node = entry.tag === 'move' ? entry.data : render(entry.vnode, patch.eventNode);\n\t\t\tdomNode.insertBefore(node, domNode.childNodes[insert.index]);\n\t\t}\n\n\t\t// add end inserts\n\t\tif (typeof frag !== 'undefined') {\n\t\t\tdomNode.appendChild(frag);\n\t\t}\n\n\t\treturn domNode;\n\t}\n\n\tfunction applyPatchReorderEndInsertsHelp(endInserts, patch) {\n\t\tif (typeof endInserts === 'undefined') {\n\t\t\treturn;\n\t\t}\n\n\t\tvar frag = localDoc.createDocumentFragment();\n\t\tfor (var i = 0; i < endInserts.length; i++) {\n\t\t\tvar insert = endInserts[i];\n\t\t\tvar entry = insert.entry;\n\t\t\tfrag.appendChild(entry.tag === 'move' ? entry.data : render(entry.vnode, patch.eventNode));\n\t\t}\n\t\treturn frag;\n\t}\n\n\t// PROGRAMS\n\n\tvar program = makeProgram(checkNoFlags);\n\tvar programWithFlags = makeProgram(checkYesFlags);\n\n\tfunction makeProgram(flagChecker) {\n\t\treturn F2(function (debugWrap, impl) {\n\t\t\treturn function (flagDecoder) {\n\t\t\t\treturn function (object, moduleName, debugMetadata) {\n\t\t\t\t\tvar checker = flagChecker(flagDecoder, moduleName);\n\t\t\t\t\tif (typeof debugMetadata === 'undefined') {\n\t\t\t\t\t\tnormalSetup(impl, object, moduleName, checker);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdebugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t});\n\t}\n\n\tfunction staticProgram(vNode) {\n\t\tvar nothing = _elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.Tuple0, _elm_lang$core$Platform_Cmd$none);\n\t\treturn A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {\n\t\t\tinit: nothing,\n\t\t\tview: function view() {\n\t\t\t\treturn vNode;\n\t\t\t},\n\t\t\tupdate: F2(function () {\n\t\t\t\treturn nothing;\n\t\t\t}),\n\t\t\tsubscriptions: function subscriptions() {\n\t\t\t\treturn _elm_lang$core$Platform_Sub$none;\n\t\t\t}\n\t\t})();\n\t}\n\n\t// FLAG CHECKERS\n\n\tfunction checkNoFlags(flagDecoder, moduleName) {\n\t\treturn function (init, flags, domNode) {\n\t\t\tif (typeof flags === 'undefined') {\n\t\t\t\treturn init;\n\t\t\t}\n\n\t\t\tvar errorMessage = 'The `' + moduleName + '` module does not need flags.\\n' + 'Initialize it with no arguments and you should be all set!';\n\n\t\t\tcrash(errorMessage, domNode);\n\t\t};\n\t}\n\n\tfunction checkYesFlags(flagDecoder, moduleName) {\n\t\treturn function (init, flags, domNode) {\n\t\t\tif (typeof flagDecoder === 'undefined') {\n\t\t\t\tvar errorMessage = 'Are you trying to sneak a Never value into Elm? Trickster!\\n' + 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\\n' + 'Use `program` instead if you do not want flags.';\n\n\t\t\t\tcrash(errorMessage, domNode);\n\t\t\t}\n\n\t\t\tvar result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);\n\t\t\tif (result.ctor === 'Ok') {\n\t\t\t\treturn init(result._0);\n\t\t\t}\n\n\t\t\tvar errorMessage = 'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\\n' + 'I tried to convert it to an Elm value, but ran into this problem:\\n\\n' + result._0;\n\n\t\t\tcrash(errorMessage, domNode);\n\t\t};\n\t}\n\n\tfunction crash(errorMessage, domNode) {\n\t\tif (domNode) {\n\t\t\tdomNode.innerHTML = '<div style=\"padding-left:1em;\">' + '<h2 style=\"font-weight:normal;\"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>' + '<pre style=\"padding-left:1em;\">' + errorMessage + '</pre>' + '</div>';\n\t\t}\n\n\t\tthrow new Error(errorMessage);\n\t}\n\n\t//  NORMAL SETUP\n\n\tfunction normalSetup(impl, object, moduleName, flagChecker) {\n\t\tobject['embed'] = function embed(node, flags) {\n\t\t\twhile (node.lastChild) {\n\t\t\t\tnode.removeChild(node.lastChild);\n\t\t\t}\n\n\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, node), impl.update, impl.subscriptions, normalRenderer(node, impl.view));\n\t\t};\n\n\t\tobject['fullscreen'] = function fullscreen(flags) {\n\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, document.body), impl.update, impl.subscriptions, normalRenderer(document.body, impl.view));\n\t\t};\n\t}\n\n\tfunction normalRenderer(parentNode, view) {\n\t\treturn function (tagger, initialModel) {\n\t\t\tvar eventNode = { tagger: tagger, parent: undefined };\n\t\t\tvar initialVirtualNode = view(initialModel);\n\t\t\tvar domNode = render(initialVirtualNode, eventNode);\n\t\t\tparentNode.appendChild(domNode);\n\t\t\treturn makeStepper(domNode, view, initialVirtualNode, eventNode);\n\t\t};\n\t}\n\n\t// STEPPER\n\n\tvar rAF = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : function (callback) {\n\t\tsetTimeout(callback, 1000 / 60);\n\t};\n\n\tfunction makeStepper(domNode, view, initialVirtualNode, eventNode) {\n\t\tvar state = 'NO_REQUEST';\n\t\tvar currNode = initialVirtualNode;\n\t\tvar nextModel;\n\n\t\tfunction updateIfNeeded() {\n\t\t\tswitch (state) {\n\t\t\t\tcase 'NO_REQUEST':\n\t\t\t\t\tthrow new Error('Unexpected draw callback.\\n' + 'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.');\n\n\t\t\t\tcase 'PENDING_REQUEST':\n\t\t\t\t\trAF(updateIfNeeded);\n\t\t\t\t\tstate = 'EXTRA_REQUEST';\n\n\t\t\t\t\tvar nextNode = view(nextModel);\n\t\t\t\t\tvar patches = diff(currNode, nextNode);\n\t\t\t\t\tdomNode = applyPatches(domNode, currNode, patches, eventNode);\n\t\t\t\t\tcurrNode = nextNode;\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'EXTRA_REQUEST':\n\t\t\t\t\tstate = 'NO_REQUEST';\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\treturn function stepper(model) {\n\t\t\tif (state === 'NO_REQUEST') {\n\t\t\t\trAF(updateIfNeeded);\n\t\t\t}\n\t\t\tstate = 'PENDING_REQUEST';\n\t\t\tnextModel = model;\n\t\t};\n\t}\n\n\t// DEBUG SETUP\n\n\tfunction debugSetup(impl, object, moduleName, flagChecker) {\n\t\tobject['fullscreen'] = function fullscreen(flags) {\n\t\t\tvar popoutRef = { doc: undefined };\n\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, document.body), impl.update(scrollTask(popoutRef)), impl.subscriptions, debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut));\n\t\t};\n\n\t\tobject['embed'] = function fullscreen(node, flags) {\n\t\t\tvar popoutRef = { doc: undefined };\n\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, node), impl.update(scrollTask(popoutRef)), impl.subscriptions, debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut));\n\t\t};\n\t}\n\n\tfunction scrollTask(popoutRef) {\n\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\tvar doc = popoutRef.doc;\n\t\t\tif (doc) {\n\t\t\t\tvar msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];\n\t\t\t\tif (msgs) {\n\t\t\t\t\tmsgs.scrollTop = msgs.scrollHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t});\n\t}\n\n\tfunction debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut) {\n\t\treturn function (tagger, initialModel) {\n\t\t\tvar appEventNode = { tagger: tagger, parent: undefined };\n\t\t\tvar eventNode = { tagger: tagger, parent: undefined };\n\n\t\t\t// make normal stepper\n\t\t\tvar appVirtualNode = view(initialModel);\n\t\t\tvar appNode = render(appVirtualNode, appEventNode);\n\t\t\tparentNode.appendChild(appNode);\n\t\t\tvar appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);\n\n\t\t\t// make overlay stepper\n\t\t\tvar overVirtualNode = viewIn(initialModel)._1;\n\t\t\tvar overNode = render(overVirtualNode, eventNode);\n\t\t\tparentNode.appendChild(overNode);\n\t\t\tvar wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);\n\t\t\tvar overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);\n\n\t\t\t// make debugger stepper\n\t\t\tvar debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);\n\n\t\t\treturn function stepper(model) {\n\t\t\t\tappStepper(model);\n\t\t\t\toverStepper(model);\n\t\t\t\tdebugStepper(model);\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef) {\n\t\tvar curr;\n\t\tvar domNode;\n\n\t\treturn function stepper(model) {\n\t\t\tif (!model.isDebuggerOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!popoutRef.doc) {\n\t\t\t\tcurr = view(model);\n\t\t\t\tdomNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// switch to document of popout\n\t\t\tlocalDoc = popoutRef.doc;\n\n\t\t\tvar next = view(model);\n\t\t\tvar patches = diff(curr, next);\n\t\t\tdomNode = applyPatches(domNode, curr, patches, eventNode);\n\t\t\tcurr = next;\n\n\t\t\t// switch back to normal document\n\t\t\tlocalDoc = document;\n\t\t};\n\t}\n\n\tfunction openDebugWindow(moduleName, popoutRef, virtualNode, eventNode) {\n\t\tvar w = 900;\n\t\tvar h = 360;\n\t\tvar x = screen.width - w;\n\t\tvar y = screen.height - h;\n\t\tvar debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);\n\n\t\t// switch to window document\n\t\tlocalDoc = debugWindow.document;\n\n\t\tpopoutRef.doc = localDoc;\n\t\tlocalDoc.title = 'Debugger - ' + moduleName;\n\t\tlocalDoc.body.style.margin = '0';\n\t\tlocalDoc.body.style.padding = '0';\n\t\tvar domNode = render(virtualNode, eventNode);\n\t\tlocalDoc.body.appendChild(domNode);\n\n\t\tlocalDoc.addEventListener('keydown', function (event) {\n\t\t\tif (event.metaKey && event.which === 82) {\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t\tif (event.which === 38) {\n\t\t\t\teventNode.tagger({ ctor: 'Up' });\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tif (event.which === 40) {\n\t\t\t\teventNode.tagger({ ctor: 'Down' });\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\tfunction close() {\n\t\t\tpopoutRef.doc = undefined;\n\t\t\tdebugWindow.close();\n\t\t}\n\t\twindow.addEventListener('unload', close);\n\t\tdebugWindow.addEventListener('unload', function () {\n\t\t\tpopoutRef.doc = undefined;\n\t\t\twindow.removeEventListener('unload', close);\n\t\t\teventNode.tagger({ ctor: 'Close' });\n\t\t});\n\n\t\t// switch back to the normal document\n\t\tlocalDoc = document;\n\n\t\treturn domNode;\n\t}\n\n\t// BLOCK EVENTS\n\n\tfunction wrapViewIn(appEventNode, overlayNode, viewIn) {\n\t\tvar ignorer = makeIgnorer(overlayNode);\n\t\tvar blocking = 'Normal';\n\t\tvar overflow;\n\n\t\tvar normalTagger = appEventNode.tagger;\n\t\tvar blockTagger = function blockTagger() {};\n\n\t\treturn function (model) {\n\t\t\tvar tuple = viewIn(model);\n\t\t\tvar newBlocking = tuple._0.ctor;\n\t\t\tappEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;\n\t\t\tif (blocking !== newBlocking) {\n\t\t\t\ttraverse('removeEventListener', ignorer, blocking);\n\t\t\t\ttraverse('addEventListener', ignorer, newBlocking);\n\n\t\t\t\tif (blocking === 'Normal') {\n\t\t\t\t\toverflow = document.body.style.overflow;\n\t\t\t\t\tdocument.body.style.overflow = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (newBlocking === 'Normal') {\n\t\t\t\t\tdocument.body.style.overflow = overflow;\n\t\t\t\t}\n\n\t\t\t\tblocking = newBlocking;\n\t\t\t}\n\t\t\treturn tuple._1;\n\t\t};\n\t}\n\n\tfunction traverse(verbEventListener, ignorer, blocking) {\n\t\tswitch (blocking) {\n\t\t\tcase 'Normal':\n\t\t\t\treturn;\n\n\t\t\tcase 'Pause':\n\t\t\t\treturn traverseHelp(verbEventListener, ignorer, mostEvents);\n\n\t\t\tcase 'Message':\n\t\t\t\treturn traverseHelp(verbEventListener, ignorer, allEvents);\n\t\t}\n\t}\n\n\tfunction traverseHelp(verbEventListener, handler, eventNames) {\n\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\tdocument.body[verbEventListener](eventNames[i], handler, true);\n\t\t}\n\t}\n\n\tfunction makeIgnorer(overlayNode) {\n\t\treturn function (event) {\n\t\t\tif (event.type === 'keydown' && event.metaKey && event.which === 82) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar isScroll = event.type === 'scroll' || event.type === 'wheel';\n\n\t\t\tvar node = event.target;\n\t\t\twhile (node !== null) {\n\t\t\t\tif (node.className === 'elm-overlay-message-details' && isScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (node === overlayNode && !isScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tnode = node.parentNode;\n\t\t\t}\n\n\t\t\tevent.stopPropagation();\n\t\t\tevent.preventDefault();\n\t\t};\n\t}\n\n\tvar mostEvents = ['click', 'dblclick', 'mousemove', 'mouseup', 'mousedown', 'mouseenter', 'mouseleave', 'touchstart', 'touchend', 'touchcancel', 'touchmove', 'pointerdown', 'pointerup', 'pointerover', 'pointerout', 'pointerenter', 'pointerleave', 'pointermove', 'pointercancel', 'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop', 'keyup', 'keydown', 'keypress', 'input', 'change', 'focus', 'blur'];\n\n\tvar allEvents = mostEvents.concat('wheel', 'scroll');\n\n\treturn {\n\t\tnode: node,\n\t\ttext: text,\n\t\tcustom: custom,\n\t\tmap: F2(map),\n\n\t\ton: F3(on),\n\t\tstyle: style,\n\t\tproperty: F2(property),\n\t\tattribute: F2(attribute),\n\t\tattributeNS: F3(attributeNS),\n\t\tmapProperty: F2(mapProperty),\n\n\t\tlazy: F2(lazy),\n\t\tlazy2: F3(lazy2),\n\t\tlazy3: F4(lazy3),\n\t\tkeyedNode: F3(keyedNode),\n\n\t\tprogram: program,\n\t\tprogramWithFlags: programWithFlags,\n\t\tstaticProgram: staticProgram\n\t};\n}();\n","","","","","","","","","\"use strict\";\n\nElm.Native.TestHelpers = {};\nElm.Native.TestHelpers.make = function (localRuntime) {\n\tlocalRuntime.Native = localRuntime.Native || {};\n\tlocalRuntime.Native.TestHelpers = localRuntime.Native.TestHelpers || {};\n\tif (localRuntime.Native.TestHelpers.values) {\n\t\treturn localRuntime.Native.TestHelpers.values;\n\t}\n\n\tvar VirtualDom = Elm.Native.VirtualDom.make(localRuntime);\n\n\tfunction unsafeRecordCallCount(f) {\n\t\tfunction wrapper(a) {\n\t\t\twrapper.__elm_test_call_count += 1;\n\t\t\treturn f(a);\n\t\t}\n\t\twrapper.__elm_test_call_count = 0;\n\t\treturn wrapper;\n\t}\n\n\tfunction unsafeQueryCallCount(f) {\n\t\tif (f.__elm_test_call_count === undefined) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn f.__elm_test_call_count;\n\t}\n\n\tElm.Native.TestHelpers.values = {\n\t\tunsafeRecordCallCount: unsafeRecordCallCount,\n\t\tunsafeQueryCallCount: unsafeQueryCallCount,\n\t\tupdateAndReplace: F3(VirtualDom.updateAndReplace)\n\t};\n\treturn localRuntime.Native.TestHelpers.values = Elm.Native.TestHelpers.values;\n};\n","","","","'use strict';\n\nvar _main = require('./main');\n\nvar _main2 = _interopRequireDefault(_main);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar elmDiv = document.querySelector('#elm-container');\n\nif (elmDiv) {\n  _main2.default.Main.embed(elmDiv);\n}\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function () {\n\t'use strict';\n\n\tfunction F2(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn fun(a, b);\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 2;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F3(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn fun(a, b, c);\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 3;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F4(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn fun(a, b, c, d);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 4;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F5(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\t\treturn fun(a, b, c, d, e);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 5;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F6(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\t\treturn function (f) {\n\t\t\t\t\t\t\t\treturn fun(a, b, c, d, e, f);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 6;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F7(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\t\treturn function (f) {\n\t\t\t\t\t\t\t\treturn function (g) {\n\t\t\t\t\t\t\t\t\treturn fun(a, b, c, d, e, f, g);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 7;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F8(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\t\treturn function (f) {\n\t\t\t\t\t\t\t\treturn function (g) {\n\t\t\t\t\t\t\t\t\treturn function (h) {\n\t\t\t\t\t\t\t\t\t\treturn fun(a, b, c, d, e, f, g, h);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 8;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction F9(fun) {\n\t\tfunction wrapper(a) {\n\t\t\treturn function (b) {\n\t\t\t\treturn function (c) {\n\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\treturn function (e) {\n\t\t\t\t\t\t\treturn function (f) {\n\t\t\t\t\t\t\t\treturn function (g) {\n\t\t\t\t\t\t\t\t\treturn function (h) {\n\t\t\t\t\t\t\t\t\t\treturn function (i) {\n\t\t\t\t\t\t\t\t\t\t\treturn fun(a, b, c, d, e, f, g, h, i);\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t\twrapper.arity = 9;\n\t\twrapper.func = fun;\n\t\treturn wrapper;\n\t}\n\n\tfunction A2(fun, a, b) {\n\t\treturn fun.arity === 2 ? fun.func(a, b) : fun(a)(b);\n\t}\n\tfunction A3(fun, a, b, c) {\n\t\treturn fun.arity === 3 ? fun.func(a, b, c) : fun(a)(b)(c);\n\t}\n\tfunction A4(fun, a, b, c, d) {\n\t\treturn fun.arity === 4 ? fun.func(a, b, c, d) : fun(a)(b)(c)(d);\n\t}\n\tfunction A5(fun, a, b, c, d, e) {\n\t\treturn fun.arity === 5 ? fun.func(a, b, c, d, e) : fun(a)(b)(c)(d)(e);\n\t}\n\tfunction A6(fun, a, b, c, d, e, f) {\n\t\treturn fun.arity === 6 ? fun.func(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);\n\t}\n\tfunction A7(fun, a, b, c, d, e, f, g) {\n\t\treturn fun.arity === 7 ? fun.func(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);\n\t}\n\tfunction A8(fun, a, b, c, d, e, f, g, h) {\n\t\treturn fun.arity === 8 ? fun.func(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);\n\t}\n\tfunction A9(fun, a, b, c, d, e, f, g, h, i) {\n\t\treturn fun.arity === 9 ? fun.func(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);\n\t}\n\n\t//import Native.List //\n\n\tvar _elm_lang$core$Native_Array = function () {\n\n\t\t// A RRB-Tree has two distinct data types.\n\t\t// Leaf -> \"height\"  is always 0\n\t\t//         \"table\"   is an array of elements\n\t\t// Node -> \"height\"  is always greater than 0\n\t\t//         \"table\"   is an array of child nodes\n\t\t//         \"lengths\" is an array of accumulated lengths of the child nodes\n\n\t\t// M is the maximal table size. 32 seems fast. E is the allowed increase\n\t\t// of search steps when concatting to find an index. Lower values will\n\t\t// decrease balancing, but will increase search steps.\n\t\tvar M = 32;\n\t\tvar E = 2;\n\n\t\t// An empty array.\n\t\tvar empty = {\n\t\t\tctor: '_Array',\n\t\t\theight: 0,\n\t\t\ttable: []\n\t\t};\n\n\t\tfunction get(i, array) {\n\t\t\tif (i < 0 || i >= length(array)) {\n\t\t\t\tthrow new Error('Index ' + i + ' is out of range. Check the length of ' + 'your array first or use getMaybe or getWithDefault.');\n\t\t\t}\n\t\t\treturn unsafeGet(i, array);\n\t\t}\n\n\t\tfunction unsafeGet(i, array) {\n\t\t\tfor (var x = array.height; x > 0; x--) {\n\t\t\t\tvar slot = i >> x * 5;\n\t\t\t\twhile (array.lengths[slot] <= i) {\n\t\t\t\t\tslot++;\n\t\t\t\t}\n\t\t\t\tif (slot > 0) {\n\t\t\t\t\ti -= array.lengths[slot - 1];\n\t\t\t\t}\n\t\t\t\tarray = array.table[slot];\n\t\t\t}\n\t\t\treturn array.table[i];\n\t\t}\n\n\t\t// Sets the value at the index i. Only the nodes leading to i will get\n\t\t// copied and updated.\n\t\tfunction set(i, item, array) {\n\t\t\tif (i < 0 || length(array) <= i) {\n\t\t\t\treturn array;\n\t\t\t}\n\t\t\treturn unsafeSet(i, item, array);\n\t\t}\n\n\t\tfunction unsafeSet(i, item, array) {\n\t\t\tarray = nodeCopy(array);\n\n\t\t\tif (array.height === 0) {\n\t\t\t\tarray.table[i] = item;\n\t\t\t} else {\n\t\t\t\tvar slot = getSlot(i, array);\n\t\t\t\tif (slot > 0) {\n\t\t\t\t\ti -= array.lengths[slot - 1];\n\t\t\t\t}\n\t\t\t\tarray.table[slot] = unsafeSet(i, item, array.table[slot]);\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\n\t\tfunction initialize(len, f) {\n\t\t\tif (len <= 0) {\n\t\t\t\treturn empty;\n\t\t\t}\n\t\t\tvar h = Math.floor(Math.log(len) / Math.log(M));\n\t\t\treturn initialize_(f, h, 0, len);\n\t\t}\n\n\t\tfunction initialize_(f, h, from, to) {\n\t\t\tif (h === 0) {\n\t\t\t\tvar table = new Array((to - from) % (M + 1));\n\t\t\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\t\t\ttable[i] = f(from + i);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: table\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar step = Math.pow(M, h);\n\t\t\tvar table = new Array(Math.ceil((to - from) / step));\n\t\t\tvar lengths = new Array(table.length);\n\t\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\t\ttable[i] = initialize_(f, h - 1, from + i * step, Math.min(from + (i + 1) * step, to));\n\t\t\t\tlengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h,\n\t\t\t\ttable: table,\n\t\t\t\tlengths: lengths\n\t\t\t};\n\t\t}\n\n\t\tfunction fromList(list) {\n\t\t\tif (list.ctor === '[]') {\n\t\t\t\treturn empty;\n\t\t\t}\n\n\t\t\t// Allocate M sized blocks (table) and write list elements to it.\n\t\t\tvar table = new Array(M);\n\t\t\tvar nodes = [];\n\t\t\tvar i = 0;\n\n\t\t\twhile (list.ctor !== '[]') {\n\t\t\t\ttable[i] = list._0;\n\t\t\t\tlist = list._1;\n\t\t\t\ti++;\n\n\t\t\t\t// table is full, so we can push a leaf containing it into the\n\t\t\t\t// next node.\n\t\t\t\tif (i === M) {\n\t\t\t\t\tvar leaf = {\n\t\t\t\t\t\tctor: '_Array',\n\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\ttable: table\n\t\t\t\t\t};\n\t\t\t\t\tfromListPush(leaf, nodes);\n\t\t\t\t\ttable = new Array(M);\n\t\t\t\t\ti = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Maybe there is something left on the table.\n\t\t\tif (i > 0) {\n\t\t\t\tvar leaf = {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: table.splice(0, i)\n\t\t\t\t};\n\t\t\t\tfromListPush(leaf, nodes);\n\t\t\t}\n\n\t\t\t// Go through all of the nodes and eventually push them into higher nodes.\n\t\t\tfor (var h = 0; h < nodes.length - 1; h++) {\n\t\t\t\tif (nodes[h].table.length > 0) {\n\t\t\t\t\tfromListPush(nodes[h], nodes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar head = nodes[nodes.length - 1];\n\t\t\tif (head.height > 0 && head.table.length === 1) {\n\t\t\t\treturn head.table[0];\n\t\t\t} else {\n\t\t\t\treturn head;\n\t\t\t}\n\t\t}\n\n\t\t// Push a node into a higher node as a child.\n\t\tfunction fromListPush(toPush, nodes) {\n\t\t\tvar h = toPush.height;\n\n\t\t\t// Maybe the node on this height does not exist.\n\t\t\tif (nodes.length === h) {\n\t\t\t\tvar node = {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: h + 1,\n\t\t\t\t\ttable: [],\n\t\t\t\t\tlengths: []\n\t\t\t\t};\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\n\t\t\tnodes[h].table.push(toPush);\n\t\t\tvar len = length(toPush);\n\t\t\tif (nodes[h].lengths.length > 0) {\n\t\t\t\tlen += nodes[h].lengths[nodes[h].lengths.length - 1];\n\t\t\t}\n\t\t\tnodes[h].lengths.push(len);\n\n\t\t\tif (nodes[h].table.length === M) {\n\t\t\t\tfromListPush(nodes[h], nodes);\n\t\t\t\tnodes[h] = {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: h + 1,\n\t\t\t\t\ttable: [],\n\t\t\t\t\tlengths: []\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\t// Pushes an item via push_ to the bottom right of a tree.\n\t\tfunction push(item, a) {\n\t\t\tvar pushed = push_(item, a);\n\t\t\tif (pushed !== null) {\n\t\t\t\treturn pushed;\n\t\t\t}\n\n\t\t\tvar newTree = create(item, a.height);\n\t\t\treturn siblise(a, newTree);\n\t\t}\n\n\t\t// Recursively tries to push an item to the bottom-right most\n\t\t// tree possible. If there is no space left for the item,\n\t\t// null will be returned.\n\t\tfunction push_(item, a) {\n\t\t\t// Handle resursion stop at leaf level.\n\t\t\tif (a.height === 0) {\n\t\t\t\tif (a.table.length < M) {\n\t\t\t\t\tvar newA = {\n\t\t\t\t\t\tctor: '_Array',\n\t\t\t\t\t\theight: 0,\n\t\t\t\t\t\ttable: a.table.slice()\n\t\t\t\t\t};\n\t\t\t\t\tnewA.table.push(item);\n\t\t\t\t\treturn newA;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recursively push\n\t\t\tvar pushed = push_(item, botRight(a));\n\n\t\t\t// There was space in the bottom right tree, so the slot will\n\t\t\t// be updated.\n\t\t\tif (pushed !== null) {\n\t\t\t\tvar newA = nodeCopy(a);\n\t\t\t\tnewA.table[newA.table.length - 1] = pushed;\n\t\t\t\tnewA.lengths[newA.lengths.length - 1]++;\n\t\t\t\treturn newA;\n\t\t\t}\n\n\t\t\t// When there was no space left, check if there is space left\n\t\t\t// for a new slot with a tree which contains only the item\n\t\t\t// at the bottom.\n\t\t\tif (a.table.length < M) {\n\t\t\t\tvar newSlot = create(item, a.height - 1);\n\t\t\t\tvar newA = nodeCopy(a);\n\t\t\t\tnewA.table.push(newSlot);\n\t\t\t\tnewA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));\n\t\t\t\treturn newA;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Converts an array into a list of elements.\n\t\tfunction toList(a) {\n\t\t\treturn toList_(_elm_lang$core$Native_List.Nil, a);\n\t\t}\n\n\t\tfunction toList_(list, a) {\n\t\t\tfor (var i = a.table.length - 1; i >= 0; i--) {\n\t\t\t\tlist = a.height === 0 ? _elm_lang$core$Native_List.Cons(a.table[i], list) : toList_(list, a.table[i]);\n\t\t\t}\n\t\t\treturn list;\n\t\t}\n\n\t\t// Maps a function over the elements of an array.\n\t\tfunction map(f, a) {\n\t\t\tvar newA = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height,\n\t\t\t\ttable: new Array(a.table.length)\n\t\t\t};\n\t\t\tif (a.height > 0) {\n\t\t\t\tnewA.lengths = a.lengths;\n\t\t\t}\n\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\tnewA.table[i] = a.height === 0 ? f(a.table[i]) : map(f, a.table[i]);\n\t\t\t}\n\t\t\treturn newA;\n\t\t}\n\n\t\t// Maps a function over the elements with their index as first argument.\n\t\tfunction indexedMap(f, a) {\n\t\t\treturn indexedMap_(f, a, 0);\n\t\t}\n\n\t\tfunction indexedMap_(f, a, from) {\n\t\t\tvar newA = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height,\n\t\t\t\ttable: new Array(a.table.length)\n\t\t\t};\n\t\t\tif (a.height > 0) {\n\t\t\t\tnewA.lengths = a.lengths;\n\t\t\t}\n\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\tnewA.table[i] = a.height === 0 ? A2(f, from + i, a.table[i]) : indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);\n\t\t\t}\n\t\t\treturn newA;\n\t\t}\n\n\t\tfunction foldl(f, b, a) {\n\t\t\tif (a.height === 0) {\n\t\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\t\tb = A2(f, a.table[i], b);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\t\tb = foldl(f, b, a.table[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\n\t\tfunction foldr(f, b, a) {\n\t\t\tif (a.height === 0) {\n\t\t\t\tfor (var i = a.table.length; i--;) {\n\t\t\t\t\tb = A2(f, a.table[i], b);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (var i = a.table.length; i--;) {\n\t\t\t\t\tb = foldr(f, b, a.table[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\n\t\t// TODO: currently, it slices the right, then the left. This can be\n\t\t// optimized.\n\t\tfunction slice(from, to, a) {\n\t\t\tif (from < 0) {\n\t\t\t\tfrom += length(a);\n\t\t\t}\n\t\t\tif (to < 0) {\n\t\t\t\tto += length(a);\n\t\t\t}\n\t\t\treturn sliceLeft(from, sliceRight(to, a));\n\t\t}\n\n\t\tfunction sliceRight(to, a) {\n\t\t\tif (to === length(a)) {\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\t// Handle leaf level.\n\t\t\tif (a.height === 0) {\n\t\t\t\tvar newA = { ctor: '_Array', height: 0 };\n\t\t\t\tnewA.table = a.table.slice(0, to);\n\t\t\t\treturn newA;\n\t\t\t}\n\n\t\t\t// Slice the right recursively.\n\t\t\tvar right = getSlot(to, a);\n\t\t\tvar sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);\n\n\t\t\t// Maybe the a node is not even needed, as sliced contains the whole slice.\n\t\t\tif (right === 0) {\n\t\t\t\treturn sliced;\n\t\t\t}\n\n\t\t\t// Create new node.\n\t\t\tvar newA = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height,\n\t\t\t\ttable: a.table.slice(0, right),\n\t\t\t\tlengths: a.lengths.slice(0, right)\n\t\t\t};\n\t\t\tif (sliced.table.length > 0) {\n\t\t\t\tnewA.table[right] = sliced;\n\t\t\t\tnewA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);\n\t\t\t}\n\t\t\treturn newA;\n\t\t}\n\n\t\tfunction sliceLeft(from, a) {\n\t\t\tif (from === 0) {\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\t// Handle leaf level.\n\t\t\tif (a.height === 0) {\n\t\t\t\tvar newA = { ctor: '_Array', height: 0 };\n\t\t\t\tnewA.table = a.table.slice(from, a.table.length + 1);\n\t\t\t\treturn newA;\n\t\t\t}\n\n\t\t\t// Slice the left recursively.\n\t\t\tvar left = getSlot(from, a);\n\t\t\tvar sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);\n\n\t\t\t// Maybe the a node is not even needed, as sliced contains the whole slice.\n\t\t\tif (left === a.table.length - 1) {\n\t\t\t\treturn sliced;\n\t\t\t}\n\n\t\t\t// Create new node.\n\t\t\tvar newA = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height,\n\t\t\t\ttable: a.table.slice(left, a.table.length + 1),\n\t\t\t\tlengths: new Array(a.table.length - left)\n\t\t\t};\n\t\t\tnewA.table[0] = sliced;\n\t\t\tvar len = 0;\n\t\t\tfor (var i = 0; i < newA.table.length; i++) {\n\t\t\t\tlen += length(newA.table[i]);\n\t\t\t\tnewA.lengths[i] = len;\n\t\t\t}\n\n\t\t\treturn newA;\n\t\t}\n\n\t\t// Appends two trees.\n\t\tfunction append(a, b) {\n\t\t\tif (a.table.length === 0) {\n\t\t\t\treturn b;\n\t\t\t}\n\t\t\tif (b.table.length === 0) {\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\tvar c = append_(a, b);\n\n\t\t\t// Check if both nodes can be crunshed together.\n\t\t\tif (c[0].table.length + c[1].table.length <= M) {\n\t\t\t\tif (c[0].table.length === 0) {\n\t\t\t\t\treturn c[1];\n\t\t\t\t}\n\t\t\t\tif (c[1].table.length === 0) {\n\t\t\t\t\treturn c[0];\n\t\t\t\t}\n\n\t\t\t\t// Adjust .table and .lengths\n\t\t\t\tc[0].table = c[0].table.concat(c[1].table);\n\t\t\t\tif (c[0].height > 0) {\n\t\t\t\t\tvar len = length(c[0]);\n\t\t\t\t\tfor (var i = 0; i < c[1].lengths.length; i++) {\n\t\t\t\t\t\tc[1].lengths[i] += len;\n\t\t\t\t\t}\n\t\t\t\t\tc[0].lengths = c[0].lengths.concat(c[1].lengths);\n\t\t\t\t}\n\n\t\t\t\treturn c[0];\n\t\t\t}\n\n\t\t\tif (c[0].height > 0) {\n\t\t\t\tvar toRemove = calcToRemove(a, b);\n\t\t\t\tif (toRemove > E) {\n\t\t\t\t\tc = shuffle(c[0], c[1], toRemove);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn siblise(c[0], c[1]);\n\t\t}\n\n\t\t// Returns an array of two nodes; right and left. One node _may_ be empty.\n\t\tfunction append_(a, b) {\n\t\t\tif (a.height === 0 && b.height === 0) {\n\t\t\t\treturn [a, b];\n\t\t\t}\n\n\t\t\tif (a.height !== 1 || b.height !== 1) {\n\t\t\t\tif (a.height === b.height) {\n\t\t\t\t\ta = nodeCopy(a);\n\t\t\t\t\tb = nodeCopy(b);\n\t\t\t\t\tvar appended = append_(botRight(a), botLeft(b));\n\n\t\t\t\t\tinsertRight(a, appended[1]);\n\t\t\t\t\tinsertLeft(b, appended[0]);\n\t\t\t\t} else if (a.height > b.height) {\n\t\t\t\t\ta = nodeCopy(a);\n\t\t\t\t\tvar appended = append_(botRight(a), b);\n\n\t\t\t\t\tinsertRight(a, appended[0]);\n\t\t\t\t\tb = parentise(appended[1], appended[1].height + 1);\n\t\t\t\t} else {\n\t\t\t\t\tb = nodeCopy(b);\n\t\t\t\t\tvar appended = append_(a, botLeft(b));\n\n\t\t\t\t\tvar left = appended[0].table.length === 0 ? 0 : 1;\n\t\t\t\t\tvar right = left === 0 ? 1 : 0;\n\t\t\t\t\tinsertLeft(b, appended[left]);\n\t\t\t\t\ta = parentise(appended[right], appended[right].height + 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check if balancing is needed and return based on that.\n\t\t\tif (a.table.length === 0 || b.table.length === 0) {\n\t\t\t\treturn [a, b];\n\t\t\t}\n\n\t\t\tvar toRemove = calcToRemove(a, b);\n\t\t\tif (toRemove <= E) {\n\t\t\t\treturn [a, b];\n\t\t\t}\n\t\t\treturn shuffle(a, b, toRemove);\n\t\t}\n\n\t\t// Helperfunctions for append_. Replaces a child node at the side of the parent.\n\t\tfunction insertRight(parent, node) {\n\t\t\tvar index = parent.table.length - 1;\n\t\t\tparent.table[index] = node;\n\t\t\tparent.lengths[index] = length(node);\n\t\t\tparent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;\n\t\t}\n\n\t\tfunction insertLeft(parent, node) {\n\t\t\tif (node.table.length > 0) {\n\t\t\t\tparent.table[0] = node;\n\t\t\t\tparent.lengths[0] = length(node);\n\n\t\t\t\tvar len = length(parent.table[0]);\n\t\t\t\tfor (var i = 1; i < parent.lengths.length; i++) {\n\t\t\t\t\tlen += length(parent.table[i]);\n\t\t\t\t\tparent.lengths[i] = len;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparent.table.shift();\n\t\t\t\tfor (var i = 1; i < parent.lengths.length; i++) {\n\t\t\t\t\tparent.lengths[i] = parent.lengths[i] - parent.lengths[0];\n\t\t\t\t}\n\t\t\t\tparent.lengths.shift();\n\t\t\t}\n\t\t}\n\n\t\t// Returns the extra search steps for E. Refer to the paper.\n\t\tfunction calcToRemove(a, b) {\n\t\t\tvar subLengths = 0;\n\t\t\tfor (var i = 0; i < a.table.length; i++) {\n\t\t\t\tsubLengths += a.table[i].table.length;\n\t\t\t}\n\t\t\tfor (var i = 0; i < b.table.length; i++) {\n\t\t\t\tsubLengths += b.table[i].table.length;\n\t\t\t}\n\n\t\t\tvar toRemove = a.table.length + b.table.length;\n\t\t\treturn toRemove - (Math.floor((subLengths - 1) / M) + 1);\n\t\t}\n\n\t\t// get2, set2 and saveSlot are helpers for accessing elements over two arrays.\n\t\tfunction get2(a, b, index) {\n\t\t\treturn index < a.length ? a[index] : b[index - a.length];\n\t\t}\n\n\t\tfunction set2(a, b, index, value) {\n\t\t\tif (index < a.length) {\n\t\t\t\ta[index] = value;\n\t\t\t} else {\n\t\t\t\tb[index - a.length] = value;\n\t\t\t}\n\t\t}\n\n\t\tfunction saveSlot(a, b, index, slot) {\n\t\t\tset2(a.table, b.table, index, slot);\n\n\t\t\tvar l = index === 0 || index === a.lengths.length ? 0 : get2(a.lengths, a.lengths, index - 1);\n\n\t\t\tset2(a.lengths, b.lengths, index, l + length(slot));\n\t\t}\n\n\t\t// Creates a node or leaf with a given length at their arrays for perfomance.\n\t\t// Is only used by shuffle.\n\t\tfunction createNode(h, length) {\n\t\t\tif (length < 0) {\n\t\t\t\tlength = 0;\n\t\t\t}\n\t\t\tvar a = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h,\n\t\t\t\ttable: new Array(length)\n\t\t\t};\n\t\t\tif (h > 0) {\n\t\t\t\ta.lengths = new Array(length);\n\t\t\t}\n\t\t\treturn a;\n\t\t}\n\n\t\t// Returns an array of two balanced nodes.\n\t\tfunction shuffle(a, b, toRemove) {\n\t\t\tvar newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));\n\t\t\tvar newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));\n\n\t\t\t// Skip the slots with size M. More precise: copy the slot references\n\t\t\t// to the new node\n\t\t\tvar read = 0;\n\t\t\twhile (get2(a.table, b.table, read).table.length % M === 0) {\n\t\t\t\tset2(newA.table, newB.table, read, get2(a.table, b.table, read));\n\t\t\t\tset2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));\n\t\t\t\tread++;\n\t\t\t}\n\n\t\t\t// Pulling items from left to right, caching in a slot before writing\n\t\t\t// it into the new nodes.\n\t\t\tvar write = read;\n\t\t\tvar slot = new createNode(a.height - 1, 0);\n\t\t\tvar from = 0;\n\n\t\t\t// If the current slot is still containing data, then there will be at\n\t\t\t// least one more write, so we do not break this loop yet.\n\t\t\twhile (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove) {\n\t\t\t\t// Find out the max possible items for copying.\n\t\t\t\tvar source = get2(a.table, b.table, read);\n\t\t\t\tvar to = Math.min(M - slot.table.length, source.table.length);\n\n\t\t\t\t// Copy and adjust size table.\n\t\t\t\tslot.table = slot.table.concat(source.table.slice(from, to));\n\t\t\t\tif (slot.height > 0) {\n\t\t\t\t\tvar len = slot.lengths.length;\n\t\t\t\t\tfor (var i = len; i < len + to - from; i++) {\n\t\t\t\t\t\tslot.lengths[i] = length(slot.table[i]);\n\t\t\t\t\t\tslot.lengths[i] += i > 0 ? slot.lengths[i - 1] : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfrom += to;\n\n\t\t\t\t// Only proceed to next slots[i] if the current one was\n\t\t\t\t// fully copied.\n\t\t\t\tif (source.table.length <= to) {\n\t\t\t\t\tread++;from = 0;\n\t\t\t\t}\n\n\t\t\t\t// Only create a new slot if the current one is filled up.\n\t\t\t\tif (slot.table.length === M) {\n\t\t\t\t\tsaveSlot(newA, newB, write, slot);\n\t\t\t\t\tslot = createNode(a.height - 1, 0);\n\t\t\t\t\twrite++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Cleanup after the loop. Copy the last slot into the new nodes.\n\t\t\tif (slot.table.length > 0) {\n\t\t\t\tsaveSlot(newA, newB, write, slot);\n\t\t\t\twrite++;\n\t\t\t}\n\n\t\t\t// Shift the untouched slots to the left\n\t\t\twhile (read < a.table.length + b.table.length) {\n\t\t\t\tsaveSlot(newA, newB, write, get2(a.table, b.table, read));\n\t\t\t\tread++;\n\t\t\t\twrite++;\n\t\t\t}\n\n\t\t\treturn [newA, newB];\n\t\t}\n\n\t\t// Navigation functions\n\t\tfunction botRight(a) {\n\t\t\treturn a.table[a.table.length - 1];\n\t\t}\n\t\tfunction botLeft(a) {\n\t\t\treturn a.table[0];\n\t\t}\n\n\t\t// Copies a node for updating. Note that you should not use this if\n\t\t// only updating only one of \"table\" or \"lengths\" for performance reasons.\n\t\tfunction nodeCopy(a) {\n\t\t\tvar newA = {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height,\n\t\t\t\ttable: a.table.slice()\n\t\t\t};\n\t\t\tif (a.height > 0) {\n\t\t\t\tnewA.lengths = a.lengths.slice();\n\t\t\t}\n\t\t\treturn newA;\n\t\t}\n\n\t\t// Returns how many items are in the tree.\n\t\tfunction length(array) {\n\t\t\tif (array.height === 0) {\n\t\t\t\treturn array.table.length;\n\t\t\t} else {\n\t\t\t\treturn array.lengths[array.lengths.length - 1];\n\t\t\t}\n\t\t}\n\n\t\t// Calculates in which slot of \"table\" the item probably is, then\n\t\t// find the exact slot via forward searching in  \"lengths\". Returns the index.\n\t\tfunction getSlot(i, a) {\n\t\t\tvar slot = i >> 5 * a.height;\n\t\t\twhile (a.lengths[slot] <= i) {\n\t\t\t\tslot++;\n\t\t\t}\n\t\t\treturn slot;\n\t\t}\n\n\t\t// Recursively creates a tree with a given height containing\n\t\t// only the given item.\n\t\tfunction create(item, h) {\n\t\t\tif (h === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: [item]\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h,\n\t\t\t\ttable: [create(item, h - 1)],\n\t\t\t\tlengths: [1]\n\t\t\t};\n\t\t}\n\n\t\t// Recursively creates a tree that contains the given tree.\n\t\tfunction parentise(tree, h) {\n\t\t\tif (h === tree.height) {\n\t\t\t\treturn tree;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h,\n\t\t\t\ttable: [parentise(tree, h - 1)],\n\t\t\t\tlengths: [length(tree)]\n\t\t\t};\n\t\t}\n\n\t\t// Emphasizes blood brotherhood beneath two trees.\n\t\tfunction siblise(a, b) {\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: a.height + 1,\n\t\t\t\ttable: [a, b],\n\t\t\t\tlengths: [length(a), length(a) + length(b)]\n\t\t\t};\n\t\t}\n\n\t\tfunction toJSArray(a) {\n\t\t\tvar jsArray = new Array(length(a));\n\t\t\ttoJSArray_(jsArray, 0, a);\n\t\t\treturn jsArray;\n\t\t}\n\n\t\tfunction toJSArray_(jsArray, i, a) {\n\t\t\tfor (var t = 0; t < a.table.length; t++) {\n\t\t\t\tif (a.height === 0) {\n\t\t\t\t\tjsArray[i + t] = a.table[t];\n\t\t\t\t} else {\n\t\t\t\t\tvar inc = t === 0 ? 0 : a.lengths[t - 1];\n\t\t\t\t\ttoJSArray_(jsArray, i + inc, a.table[t]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction fromJSArray(jsArray) {\n\t\t\tif (jsArray.length === 0) {\n\t\t\t\treturn empty;\n\t\t\t}\n\t\t\tvar h = Math.floor(Math.log(jsArray.length) / Math.log(M));\n\t\t\treturn fromJSArray_(jsArray, h, 0, jsArray.length);\n\t\t}\n\n\t\tfunction fromJSArray_(jsArray, h, from, to) {\n\t\t\tif (h === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tctor: '_Array',\n\t\t\t\t\theight: 0,\n\t\t\t\t\ttable: jsArray.slice(from, to)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar step = Math.pow(M, h);\n\t\t\tvar table = new Array(Math.ceil((to - from) / step));\n\t\t\tvar lengths = new Array(table.length);\n\t\t\tfor (var i = 0; i < table.length; i++) {\n\t\t\t\ttable[i] = fromJSArray_(jsArray, h - 1, from + i * step, Math.min(from + (i + 1) * step, to));\n\t\t\t\tlengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tctor: '_Array',\n\t\t\t\theight: h,\n\t\t\t\ttable: table,\n\t\t\t\tlengths: lengths\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tempty: empty,\n\t\t\tfromList: fromList,\n\t\t\ttoList: toList,\n\t\t\tinitialize: F2(initialize),\n\t\t\tappend: F2(append),\n\t\t\tpush: F2(push),\n\t\t\tslice: F3(slice),\n\t\t\tget: F2(get),\n\t\t\tset: F3(set),\n\t\t\tmap: F2(map),\n\t\t\tindexedMap: F2(indexedMap),\n\t\t\tfoldl: F3(foldl),\n\t\t\tfoldr: F3(foldr),\n\t\t\tlength: length,\n\n\t\t\ttoJSArray: toJSArray,\n\t\t\tfromJSArray: fromJSArray\n\t\t};\n\t}();\n\t//import Native.Utils //\n\n\tvar _elm_lang$core$Native_Basics = function () {\n\n\t\tfunction div(a, b) {\n\t\t\treturn a / b | 0;\n\t\t}\n\t\tfunction rem(a, b) {\n\t\t\treturn a % b;\n\t\t}\n\t\tfunction mod(a, b) {\n\t\t\tif (b === 0) {\n\t\t\t\tthrow new Error('Cannot perform mod 0. Division by zero error.');\n\t\t\t}\n\t\t\tvar r = a % b;\n\t\t\tvar m = a === 0 ? 0 : b > 0 ? a >= 0 ? r : r + b : -mod(-a, -b);\n\n\t\t\treturn m === b ? 0 : m;\n\t\t}\n\t\tfunction logBase(base, n) {\n\t\t\treturn Math.log(n) / Math.log(base);\n\t\t}\n\t\tfunction negate(n) {\n\t\t\treturn -n;\n\t\t}\n\t\tfunction abs(n) {\n\t\t\treturn n < 0 ? -n : n;\n\t\t}\n\n\t\tfunction min(a, b) {\n\t\t\treturn _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;\n\t\t}\n\t\tfunction max(a, b) {\n\t\t\treturn _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;\n\t\t}\n\t\tfunction clamp(lo, hi, n) {\n\t\t\treturn _elm_lang$core$Native_Utils.cmp(n, lo) < 0 ? lo : _elm_lang$core$Native_Utils.cmp(n, hi) > 0 ? hi : n;\n\t\t}\n\n\t\tvar ord = ['LT', 'EQ', 'GT'];\n\n\t\tfunction compare(x, y) {\n\t\t\treturn { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };\n\t\t}\n\n\t\tfunction xor(a, b) {\n\t\t\treturn a !== b;\n\t\t}\n\t\tfunction not(b) {\n\t\t\treturn !b;\n\t\t}\n\t\tfunction isInfinite(n) {\n\t\t\treturn n === Infinity || n === -Infinity;\n\t\t}\n\n\t\tfunction truncate(n) {\n\t\t\treturn n | 0;\n\t\t}\n\n\t\tfunction degrees(d) {\n\t\t\treturn d * Math.PI / 180;\n\t\t}\n\t\tfunction turns(t) {\n\t\t\treturn 2 * Math.PI * t;\n\t\t}\n\t\tfunction fromPolar(point) {\n\t\t\tvar r = point._0;\n\t\t\tvar t = point._1;\n\t\t\treturn _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));\n\t\t}\n\t\tfunction toPolar(point) {\n\t\t\tvar x = point._0;\n\t\t\tvar y = point._1;\n\t\t\treturn _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));\n\t\t}\n\n\t\treturn {\n\t\t\tdiv: F2(div),\n\t\t\trem: F2(rem),\n\t\t\tmod: F2(mod),\n\n\t\t\tpi: Math.PI,\n\t\t\te: Math.E,\n\t\t\tcos: Math.cos,\n\t\t\tsin: Math.sin,\n\t\t\ttan: Math.tan,\n\t\t\tacos: Math.acos,\n\t\t\tasin: Math.asin,\n\t\t\tatan: Math.atan,\n\t\t\tatan2: F2(Math.atan2),\n\n\t\t\tdegrees: degrees,\n\t\t\tturns: turns,\n\t\t\tfromPolar: fromPolar,\n\t\t\ttoPolar: toPolar,\n\n\t\t\tsqrt: Math.sqrt,\n\t\t\tlogBase: F2(logBase),\n\t\t\tnegate: negate,\n\t\t\tabs: abs,\n\t\t\tmin: F2(min),\n\t\t\tmax: F2(max),\n\t\t\tclamp: F3(clamp),\n\t\t\tcompare: F2(compare),\n\n\t\t\txor: F2(xor),\n\t\t\tnot: not,\n\n\t\t\ttruncate: truncate,\n\t\t\tceiling: Math.ceil,\n\t\t\tfloor: Math.floor,\n\t\t\tround: Math.round,\n\t\t\ttoFloat: function toFloat(x) {\n\t\t\t\treturn x;\n\t\t\t},\n\t\t\tisNaN: isNaN,\n\t\t\tisInfinite: isInfinite\n\t\t};\n\t}();\n\t//import //\n\n\tvar _elm_lang$core$Native_Utils = function () {\n\n\t\t// COMPARISONS\n\n\t\tfunction eq(x, y) {\n\t\t\tvar stack = [];\n\t\t\tvar isEqual = eqHelp(x, y, 0, stack);\n\t\t\tvar pair;\n\t\t\twhile (isEqual && (pair = stack.pop())) {\n\t\t\t\tisEqual = eqHelp(pair.x, pair.y, 0, stack);\n\t\t\t}\n\t\t\treturn isEqual;\n\t\t}\n\n\t\tfunction eqHelp(x, y, depth, stack) {\n\t\t\tif (depth > 100) {\n\t\t\t\tstack.push({ x: x, y: y });\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (x === y) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object') {\n\t\t\t\tif (typeof x === 'function') {\n\t\t\t\t\tthrow new Error('Trying to use `(==)` on functions. There is no way to know if functions are \"the same\" in the Elm sense.' + ' Read more about this at http://package.elm-lang.org/packages/elm-lang/core/latest/Basics#==' + ' which describes why it is this way and what the better version will look like.');\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (x === null || y === null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (x instanceof Date) {\n\t\t\t\treturn x.getTime() === y.getTime();\n\t\t\t}\n\n\t\t\tif (!('ctor' in x)) {\n\t\t\t\tfor (var key in x) {\n\t\t\t\t\tif (!eqHelp(x[key], y[key], depth + 1, stack)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// convert Dicts and Sets to lists\n\t\t\tif (x.ctor === 'RBNode_elm_builtin' || x.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\tx = _elm_lang$core$Dict$toList(x);\n\t\t\t\ty = _elm_lang$core$Dict$toList(y);\n\t\t\t}\n\t\t\tif (x.ctor === 'Set_elm_builtin') {\n\t\t\t\tx = _elm_lang$core$Set$toList(x);\n\t\t\t\ty = _elm_lang$core$Set$toList(y);\n\t\t\t}\n\n\t\t\t// check if lists are equal without recursion\n\t\t\tif (x.ctor === '::') {\n\t\t\t\tvar a = x;\n\t\t\t\tvar b = y;\n\t\t\t\twhile (a.ctor === '::' && b.ctor === '::') {\n\t\t\t\t\tif (!eqHelp(a._0, b._0, depth + 1, stack)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\ta = a._1;\n\t\t\t\t\tb = b._1;\n\t\t\t\t}\n\t\t\t\treturn a.ctor === b.ctor;\n\t\t\t}\n\n\t\t\t// check if Arrays are equal\n\t\t\tif (x.ctor === '_Array') {\n\t\t\t\tvar xs = _elm_lang$core$Native_Array.toJSArray(x);\n\t\t\t\tvar ys = _elm_lang$core$Native_Array.toJSArray(y);\n\t\t\t\tif (xs.length !== ys.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < xs.length; i++) {\n\t\t\t\t\tif (!eqHelp(xs[i], ys[i], depth + 1, stack)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!eqHelp(x.ctor, y.ctor, depth + 1, stack)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfor (var key in x) {\n\t\t\t\tif (!eqHelp(x[key], y[key], depth + 1, stack)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on\n\t\t// the particular integer values assigned to LT, EQ, and GT.\n\n\t\tvar LT = -1,\n\t\t    EQ = 0,\n\t\t    GT = 1;\n\n\t\tfunction cmp(x, y) {\n\t\t\tif ((typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object') {\n\t\t\t\treturn x === y ? EQ : x < y ? LT : GT;\n\t\t\t}\n\n\t\t\tif (x instanceof String) {\n\t\t\t\tvar a = x.valueOf();\n\t\t\t\tvar b = y.valueOf();\n\t\t\t\treturn a === b ? EQ : a < b ? LT : GT;\n\t\t\t}\n\n\t\t\tif (x.ctor === '::' || x.ctor === '[]') {\n\t\t\t\twhile (x.ctor === '::' && y.ctor === '::') {\n\t\t\t\t\tvar ord = cmp(x._0, y._0);\n\t\t\t\t\tif (ord !== EQ) {\n\t\t\t\t\t\treturn ord;\n\t\t\t\t\t}\n\t\t\t\t\tx = x._1;\n\t\t\t\t\ty = y._1;\n\t\t\t\t}\n\t\t\t\treturn x.ctor === y.ctor ? EQ : x.ctor === '[]' ? LT : GT;\n\t\t\t}\n\n\t\t\tif (x.ctor.slice(0, 6) === '_Tuple') {\n\t\t\t\tvar ord;\n\t\t\t\tvar n = x.ctor.slice(6) - 0;\n\t\t\t\tvar err = 'cannot compare tuples with more than 6 elements.';\n\t\t\t\tif (n === 0) return EQ;\n\t\t\t\tif (n >= 1) {\n\t\t\t\t\tord = cmp(x._0, y._0);if (ord !== EQ) return ord;\n\t\t\t\t\tif (n >= 2) {\n\t\t\t\t\t\tord = cmp(x._1, y._1);if (ord !== EQ) return ord;\n\t\t\t\t\t\tif (n >= 3) {\n\t\t\t\t\t\t\tord = cmp(x._2, y._2);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\tif (n >= 4) {\n\t\t\t\t\t\t\t\tord = cmp(x._3, y._3);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\t\tif (n >= 5) {\n\t\t\t\t\t\t\t\t\tord = cmp(x._4, y._4);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\t\t\tif (n >= 6) {\n\t\t\t\t\t\t\t\t\t\tord = cmp(x._5, y._5);if (ord !== EQ) return ord;\n\t\t\t\t\t\t\t\t\t\tif (n >= 7) throw new Error('Comparison error: ' + err);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn EQ;\n\t\t\t}\n\n\t\t\tthrow new Error('Comparison error: comparison is only defined on ints, ' + 'floats, times, chars, strings, lists of comparable values, ' + 'and tuples of comparable values.');\n\t\t}\n\n\t\t// COMMON VALUES\n\n\t\tvar Tuple0 = {\n\t\t\tctor: '_Tuple0'\n\t\t};\n\n\t\tfunction Tuple2(x, y) {\n\t\t\treturn {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: x,\n\t\t\t\t_1: y\n\t\t\t};\n\t\t}\n\n\t\tfunction chr(c) {\n\t\t\treturn new String(c);\n\t\t}\n\n\t\t// GUID\n\n\t\tvar count = 0;\n\t\tfunction guid(_) {\n\t\t\treturn count++;\n\t\t}\n\n\t\t// RECORDS\n\n\t\tfunction update(oldRecord, updatedFields) {\n\t\t\tvar newRecord = {};\n\n\t\t\tfor (var key in oldRecord) {\n\t\t\t\tnewRecord[key] = oldRecord[key];\n\t\t\t}\n\n\t\t\tfor (var key in updatedFields) {\n\t\t\t\tnewRecord[key] = updatedFields[key];\n\t\t\t}\n\n\t\t\treturn newRecord;\n\t\t}\n\n\t\t//// LIST STUFF ////\n\n\t\tvar Nil = { ctor: '[]' };\n\n\t\tfunction Cons(hd, tl) {\n\t\t\treturn {\n\t\t\t\tctor: '::',\n\t\t\t\t_0: hd,\n\t\t\t\t_1: tl\n\t\t\t};\n\t\t}\n\n\t\tfunction append(xs, ys) {\n\t\t\t// append Strings\n\t\t\tif (typeof xs === 'string') {\n\t\t\t\treturn xs + ys;\n\t\t\t}\n\n\t\t\t// append Lists\n\t\t\tif (xs.ctor === '[]') {\n\t\t\t\treturn ys;\n\t\t\t}\n\t\t\tvar root = Cons(xs._0, Nil);\n\t\t\tvar curr = root;\n\t\t\txs = xs._1;\n\t\t\twhile (xs.ctor !== '[]') {\n\t\t\t\tcurr._1 = Cons(xs._0, Nil);\n\t\t\t\txs = xs._1;\n\t\t\t\tcurr = curr._1;\n\t\t\t}\n\t\t\tcurr._1 = ys;\n\t\t\treturn root;\n\t\t}\n\n\t\t// CRASHES\n\n\t\tfunction crash(moduleName, region) {\n\t\t\treturn function (message) {\n\t\t\t\tthrow new Error('Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\\n' + 'The message provided by the code author is:\\n\\n    ' + message);\n\t\t\t};\n\t\t}\n\n\t\tfunction crashCase(moduleName, region, value) {\n\t\t\treturn function (message) {\n\t\t\t\tthrow new Error('Ran into a `Debug.crash` in module `' + moduleName + '`\\n\\n' + 'This was caused by the `case` expression ' + regionToString(region) + '.\\n' + 'One of the branches ended with a crash and the following value got through:\\n\\n    ' + toString(value) + '\\n\\n' + 'The message provided by the code author is:\\n\\n    ' + message);\n\t\t\t};\n\t\t}\n\n\t\tfunction regionToString(region) {\n\t\t\tif (region.start.line == region.end.line) {\n\t\t\t\treturn 'on line ' + region.start.line;\n\t\t\t}\n\t\t\treturn 'between lines ' + region.start.line + ' and ' + region.end.line;\n\t\t}\n\n\t\t// TO STRING\n\n\t\tfunction toString(v) {\n\t\t\tvar type = typeof v === 'undefined' ? 'undefined' : _typeof(v);\n\t\t\tif (type === 'function') {\n\t\t\t\treturn '<function>';\n\t\t\t}\n\n\t\t\tif (type === 'boolean') {\n\t\t\t\treturn v ? 'True' : 'False';\n\t\t\t}\n\n\t\t\tif (type === 'number') {\n\t\t\t\treturn v + '';\n\t\t\t}\n\n\t\t\tif (v instanceof String) {\n\t\t\t\treturn '\\'' + addSlashes(v, true) + '\\'';\n\t\t\t}\n\n\t\t\tif (type === 'string') {\n\t\t\t\treturn '\"' + addSlashes(v, false) + '\"';\n\t\t\t}\n\n\t\t\tif (v === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\n\t\t\tif (type === 'object' && 'ctor' in v) {\n\t\t\t\tvar ctorStarter = v.ctor.substring(0, 5);\n\n\t\t\t\tif (ctorStarter === '_Tupl') {\n\t\t\t\t\tvar output = [];\n\t\t\t\t\tfor (var k in v) {\n\t\t\t\t\t\tif (k === 'ctor') continue;\n\t\t\t\t\t\toutput.push(toString(v[k]));\n\t\t\t\t\t}\n\t\t\t\t\treturn '(' + output.join(',') + ')';\n\t\t\t\t}\n\n\t\t\t\tif (ctorStarter === '_Task') {\n\t\t\t\t\treturn '<task>';\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === '_Array') {\n\t\t\t\t\tvar list = _elm_lang$core$Array$toList(v);\n\t\t\t\t\treturn 'Array.fromList ' + toString(list);\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === '<decoder>') {\n\t\t\t\t\treturn '<decoder>';\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === '_Process') {\n\t\t\t\t\treturn '<process:' + v.id + '>';\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === '::') {\n\t\t\t\t\tvar output = '[' + toString(v._0);\n\t\t\t\t\tv = v._1;\n\t\t\t\t\twhile (v.ctor === '::') {\n\t\t\t\t\t\toutput += ',' + toString(v._0);\n\t\t\t\t\t\tv = v._1;\n\t\t\t\t\t}\n\t\t\t\t\treturn output + ']';\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === '[]') {\n\t\t\t\t\treturn '[]';\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === 'Set_elm_builtin') {\n\t\t\t\t\treturn 'Set.fromList ' + toString(_elm_lang$core$Set$toList(v));\n\t\t\t\t}\n\n\t\t\t\tif (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\t\treturn 'Dict.fromList ' + toString(_elm_lang$core$Dict$toList(v));\n\t\t\t\t}\n\n\t\t\t\tvar output = '';\n\t\t\t\tfor (var i in v) {\n\t\t\t\t\tif (i === 'ctor') continue;\n\t\t\t\t\tvar str = toString(v[i]);\n\t\t\t\t\tvar c0 = str[0];\n\t\t\t\t\tvar parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '\"' || str.indexOf(' ') < 0;\n\t\t\t\t\toutput += ' ' + (parenless ? str : '(' + str + ')');\n\t\t\t\t}\n\t\t\t\treturn v.ctor + output;\n\t\t\t}\n\n\t\t\tif (type === 'object') {\n\t\t\t\tif (v instanceof Date) {\n\t\t\t\t\treturn '<' + v.toString() + '>';\n\t\t\t\t}\n\n\t\t\t\tif (v.elm_web_socket) {\n\t\t\t\t\treturn '<websocket>';\n\t\t\t\t}\n\n\t\t\t\tvar output = [];\n\t\t\t\tfor (var k in v) {\n\t\t\t\t\toutput.push(k + ' = ' + toString(v[k]));\n\t\t\t\t}\n\t\t\t\tif (output.length === 0) {\n\t\t\t\t\treturn '{}';\n\t\t\t\t}\n\t\t\t\treturn '{ ' + output.join(', ') + ' }';\n\t\t\t}\n\n\t\t\treturn '<internal structure>';\n\t\t}\n\n\t\tfunction addSlashes(str, isChar) {\n\t\t\tvar s = str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n\t\t\tif (isChar) {\n\t\t\t\treturn s.replace(/\\'/g, '\\\\\\'');\n\t\t\t} else {\n\t\t\t\treturn s.replace(/\\\"/g, '\\\\\"');\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\teq: eq,\n\t\t\tcmp: cmp,\n\t\t\tTuple0: Tuple0,\n\t\t\tTuple2: Tuple2,\n\t\t\tchr: chr,\n\t\t\tupdate: update,\n\t\t\tguid: guid,\n\n\t\t\tappend: F2(append),\n\n\t\t\tcrash: crash,\n\t\t\tcrashCase: crashCase,\n\n\t\t\ttoString: toString\n\t\t};\n\t}();\n\tvar _elm_lang$core$Basics$never = function _elm_lang$core$Basics$never(_p0) {\n\t\tnever: while (true) {\n\t\t\tvar _p1 = _p0;\n\t\t\tvar _v1 = _p1._0;\n\t\t\t_p0 = _v1;\n\t\t\tcontinue never;\n\t\t}\n\t};\n\tvar _elm_lang$core$Basics$uncurry = F2(function (f, _p2) {\n\t\tvar _p3 = _p2;\n\t\treturn A2(f, _p3._0, _p3._1);\n\t});\n\tvar _elm_lang$core$Basics$curry = F3(function (f, a, b) {\n\t\treturn f({ ctor: '_Tuple2', _0: a, _1: b });\n\t});\n\tvar _elm_lang$core$Basics$flip = F3(function (f, b, a) {\n\t\treturn A2(f, a, b);\n\t});\n\tvar _elm_lang$core$Basics$always = F2(function (a, _p4) {\n\t\treturn a;\n\t});\n\tvar _elm_lang$core$Basics$identity = function _elm_lang$core$Basics$identity(x) {\n\t\treturn x;\n\t};\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['<|'] = F2(function (f, x) {\n\t\treturn f(x);\n\t});\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['|>'] = F2(function (x, f) {\n\t\treturn f(x);\n\t});\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['>>'] = F3(function (f, g, x) {\n\t\treturn g(f(x));\n\t});\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['<<'] = F3(function (g, f, x) {\n\t\treturn g(f(x));\n\t});\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;\n\tvar _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;\n\tvar _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;\n\tvar _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;\n\tvar _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;\n\tvar _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;\n\tvar _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;\n\tvar _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;\n\tvar _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;\n\tvar _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;\n\tvar _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;\n\tvar _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;\n\tvar _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;\n\tvar _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;\n\tvar _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;\n\tvar _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;\n\tvar _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;\n\tvar _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;\n\tvar _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;\n\tvar _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;\n\tvar _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;\n\tvar _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;\n\tvar _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;\n\tvar _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;\n\tvar _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;\n\tvar _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;\n\tvar _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;\n\tvar _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;\n\tvar _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;\n\tvar _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};\n\t_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;\n\tvar _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;\n\tvar _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;\n\tvar _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;\n\tvar _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;\n\tvar _elm_lang$core$Basics$radians = function _elm_lang$core$Basics$radians(t) {\n\t\treturn t;\n\t};\n\tvar _elm_lang$core$Basics$GT = { ctor: 'GT' };\n\tvar _elm_lang$core$Basics$EQ = { ctor: 'EQ' };\n\tvar _elm_lang$core$Basics$LT = { ctor: 'LT' };\n\tvar _elm_lang$core$Basics$JustOneMore = function _elm_lang$core$Basics$JustOneMore(a) {\n\t\treturn { ctor: 'JustOneMore', _0: a };\n\t};\n\n\tvar _elm_lang$core$Maybe$withDefault = F2(function ($default, maybe) {\n\t\tvar _p0 = maybe;\n\t\tif (_p0.ctor === 'Just') {\n\t\t\treturn _p0._0;\n\t\t} else {\n\t\t\treturn $default;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$Nothing = { ctor: 'Nothing' };\n\tvar _elm_lang$core$Maybe$andThen = F2(function (callback, maybeValue) {\n\t\tvar _p1 = maybeValue;\n\t\tif (_p1.ctor === 'Just') {\n\t\t\treturn callback(_p1._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$Just = function _elm_lang$core$Maybe$Just(a) {\n\t\treturn { ctor: 'Just', _0: a };\n\t};\n\tvar _elm_lang$core$Maybe$map = F2(function (f, maybe) {\n\t\tvar _p2 = maybe;\n\t\tif (_p2.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Maybe$Just(f(_p2._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$map2 = F3(function (func, ma, mb) {\n\t\tvar _p3 = { ctor: '_Tuple2', _0: ma, _1: mb };\n\t\tif (_p3.ctor === '_Tuple2' && _p3._0.ctor === 'Just' && _p3._1.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A2(func, _p3._0._0, _p3._1._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$map3 = F4(function (func, ma, mb, mc) {\n\t\tvar _p4 = { ctor: '_Tuple3', _0: ma, _1: mb, _2: mc };\n\t\tif (_p4.ctor === '_Tuple3' && _p4._0.ctor === 'Just' && _p4._1.ctor === 'Just' && _p4._2.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A3(func, _p4._0._0, _p4._1._0, _p4._2._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$map4 = F5(function (func, ma, mb, mc, md) {\n\t\tvar _p5 = { ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md };\n\t\tif (_p5.ctor === '_Tuple4' && _p5._0.ctor === 'Just' && _p5._1.ctor === 'Just' && _p5._2.ctor === 'Just' && _p5._3.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A4(func, _p5._0._0, _p5._1._0, _p5._2._0, _p5._3._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\tvar _elm_lang$core$Maybe$map5 = F6(function (func, ma, mb, mc, md, me) {\n\t\tvar _p6 = { ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me };\n\t\tif (_p6.ctor === '_Tuple5' && _p6._0.ctor === 'Just' && _p6._1.ctor === 'Just' && _p6._2.ctor === 'Just' && _p6._3.ctor === 'Just' && _p6._4.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A5(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0, _p6._4._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t});\n\n\t//import Native.Utils //\n\n\tvar _elm_lang$core$Native_List = function () {\n\n\t\tvar Nil = { ctor: '[]' };\n\n\t\tfunction Cons(hd, tl) {\n\t\t\treturn { ctor: '::', _0: hd, _1: tl };\n\t\t}\n\n\t\tfunction fromArray(arr) {\n\t\t\tvar out = Nil;\n\t\t\tfor (var i = arr.length; i--;) {\n\t\t\t\tout = Cons(arr[i], out);\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\tfunction toArray(xs) {\n\t\t\tvar out = [];\n\t\t\twhile (xs.ctor !== '[]') {\n\t\t\t\tout.push(xs._0);\n\t\t\t\txs = xs._1;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\n\t\tfunction foldr(f, b, xs) {\n\t\t\tvar arr = toArray(xs);\n\t\t\tvar acc = b;\n\t\t\tfor (var i = arr.length; i--;) {\n\t\t\t\tacc = A2(f, arr[i], acc);\n\t\t\t}\n\t\t\treturn acc;\n\t\t}\n\n\t\tfunction map2(f, xs, ys) {\n\t\t\tvar arr = [];\n\t\t\twhile (xs.ctor !== '[]' && ys.ctor !== '[]') {\n\t\t\t\tarr.push(A2(f, xs._0, ys._0));\n\t\t\t\txs = xs._1;\n\t\t\t\tys = ys._1;\n\t\t\t}\n\t\t\treturn fromArray(arr);\n\t\t}\n\n\t\tfunction map3(f, xs, ys, zs) {\n\t\t\tvar arr = [];\n\t\t\twhile (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\t\tarr.push(A3(f, xs._0, ys._0, zs._0));\n\t\t\t\txs = xs._1;\n\t\t\t\tys = ys._1;\n\t\t\t\tzs = zs._1;\n\t\t\t}\n\t\t\treturn fromArray(arr);\n\t\t}\n\n\t\tfunction map4(f, ws, xs, ys, zs) {\n\t\t\tvar arr = [];\n\t\t\twhile (ws.ctor !== '[]' && xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\t\tarr.push(A4(f, ws._0, xs._0, ys._0, zs._0));\n\t\t\t\tws = ws._1;\n\t\t\t\txs = xs._1;\n\t\t\t\tys = ys._1;\n\t\t\t\tzs = zs._1;\n\t\t\t}\n\t\t\treturn fromArray(arr);\n\t\t}\n\n\t\tfunction map5(f, vs, ws, xs, ys, zs) {\n\t\t\tvar arr = [];\n\t\t\twhile (vs.ctor !== '[]' && ws.ctor !== '[]' && xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]') {\n\t\t\t\tarr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));\n\t\t\t\tvs = vs._1;\n\t\t\t\tws = ws._1;\n\t\t\t\txs = xs._1;\n\t\t\t\tys = ys._1;\n\t\t\t\tzs = zs._1;\n\t\t\t}\n\t\t\treturn fromArray(arr);\n\t\t}\n\n\t\tfunction sortBy(f, xs) {\n\t\t\treturn fromArray(toArray(xs).sort(function (a, b) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.cmp(f(a), f(b));\n\t\t\t}));\n\t\t}\n\n\t\tfunction sortWith(f, xs) {\n\t\t\treturn fromArray(toArray(xs).sort(function (a, b) {\n\t\t\t\tvar ord = f(a)(b).ctor;\n\t\t\t\treturn ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;\n\t\t\t}));\n\t\t}\n\n\t\treturn {\n\t\t\tNil: Nil,\n\t\t\tCons: Cons,\n\t\t\tcons: F2(Cons),\n\t\t\ttoArray: toArray,\n\t\t\tfromArray: fromArray,\n\n\t\t\tfoldr: F3(foldr),\n\n\t\t\tmap2: F3(map2),\n\t\t\tmap3: F4(map3),\n\t\t\tmap4: F5(map4),\n\t\t\tmap5: F6(map5),\n\t\t\tsortBy: F2(sortBy),\n\t\t\tsortWith: F2(sortWith)\n\t\t};\n\t}();\n\tvar _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;\n\tvar _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;\n\tvar _elm_lang$core$List$sort = function _elm_lang$core$List$sort(xs) {\n\t\treturn A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);\n\t};\n\tvar _elm_lang$core$List$singleton = function _elm_lang$core$List$singleton(value) {\n\t\treturn {\n\t\t\tctor: '::',\n\t\t\t_0: value,\n\t\t\t_1: { ctor: '[]' }\n\t\t};\n\t};\n\tvar _elm_lang$core$List$drop = F2(function (n, list) {\n\t\tdrop: while (true) {\n\t\t\tif (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {\n\t\t\t\treturn list;\n\t\t\t} else {\n\t\t\t\tvar _p0 = list;\n\t\t\t\tif (_p0.ctor === '[]') {\n\t\t\t\t\treturn list;\n\t\t\t\t} else {\n\t\t\t\t\tvar _v1 = n - 1,\n\t\t\t\t\t    _v2 = _p0._1;\n\t\t\t\t\tn = _v1;\n\t\t\t\t\tlist = _v2;\n\t\t\t\t\tcontinue drop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;\n\tvar _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;\n\tvar _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;\n\tvar _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;\n\tvar _elm_lang$core$List$any = F2(function (isOkay, list) {\n\t\tany: while (true) {\n\t\t\tvar _p1 = list;\n\t\t\tif (_p1.ctor === '[]') {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif (isOkay(_p1._0)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tvar _v4 = isOkay,\n\t\t\t\t\t    _v5 = _p1._1;\n\t\t\t\t\tisOkay = _v4;\n\t\t\t\t\tlist = _v5;\n\t\t\t\t\tcontinue any;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$all = F2(function (isOkay, list) {\n\t\treturn !A2(_elm_lang$core$List$any, function (_p2) {\n\t\t\treturn !isOkay(_p2);\n\t\t}, list);\n\t});\n\tvar _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;\n\tvar _elm_lang$core$List$foldl = F3(function (func, acc, list) {\n\t\tfoldl: while (true) {\n\t\t\tvar _p3 = list;\n\t\t\tif (_p3.ctor === '[]') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar _v7 = func,\n\t\t\t\t    _v8 = A2(func, _p3._0, acc),\n\t\t\t\t    _v9 = _p3._1;\n\t\t\t\tfunc = _v7;\n\t\t\t\tacc = _v8;\n\t\t\t\tlist = _v9;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$length = function _elm_lang$core$List$length(xs) {\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (_p4, i) {\n\t\t\treturn i + 1;\n\t\t}), 0, xs);\n\t};\n\tvar _elm_lang$core$List$sum = function _elm_lang$core$List$sum(numbers) {\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (x, y) {\n\t\t\treturn x + y;\n\t\t}), 0, numbers);\n\t};\n\tvar _elm_lang$core$List$product = function _elm_lang$core$List$product(numbers) {\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (x, y) {\n\t\t\treturn x * y;\n\t\t}), 1, numbers);\n\t};\n\tvar _elm_lang$core$List$maximum = function _elm_lang$core$List$maximum(list) {\n\t\tvar _p5 = list;\n\t\tif (_p5.ctor === '::') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t};\n\tvar _elm_lang$core$List$minimum = function _elm_lang$core$List$minimum(list) {\n\t\tvar _p6 = list;\n\t\tif (_p6.ctor === '::') {\n\t\t\treturn _elm_lang$core$Maybe$Just(A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t};\n\tvar _elm_lang$core$List$member = F2(function (x, xs) {\n\t\treturn A2(_elm_lang$core$List$any, function (a) {\n\t\t\treturn _elm_lang$core$Native_Utils.eq(a, x);\n\t\t}, xs);\n\t});\n\tvar _elm_lang$core$List$isEmpty = function _elm_lang$core$List$isEmpty(xs) {\n\t\tvar _p7 = xs;\n\t\tif (_p7.ctor === '[]') {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\tvar _elm_lang$core$List$tail = function _elm_lang$core$List$tail(list) {\n\t\tvar _p8 = list;\n\t\tif (_p8.ctor === '::') {\n\t\t\treturn _elm_lang$core$Maybe$Just(_p8._1);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t};\n\tvar _elm_lang$core$List$head = function _elm_lang$core$List$head(list) {\n\t\tvar _p9 = list;\n\t\tif (_p9.ctor === '::') {\n\t\t\treturn _elm_lang$core$Maybe$Just(_p9._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t};\n\tvar _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};\n\t_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;\n\tvar _elm_lang$core$List$map = F2(function (f, xs) {\n\t\treturn A3(_elm_lang$core$List$foldr, F2(function (x, acc) {\n\t\t\treturn {\n\t\t\t\tctor: '::',\n\t\t\t\t_0: f(x),\n\t\t\t\t_1: acc\n\t\t\t};\n\t\t}), { ctor: '[]' }, xs);\n\t});\n\tvar _elm_lang$core$List$filter = F2(function (pred, xs) {\n\t\tvar conditionalCons = F2(function (front, back) {\n\t\t\treturn pred(front) ? { ctor: '::', _0: front, _1: back } : back;\n\t\t});\n\t\treturn A3(_elm_lang$core$List$foldr, conditionalCons, { ctor: '[]' }, xs);\n\t});\n\tvar _elm_lang$core$List$maybeCons = F3(function (f, mx, xs) {\n\t\tvar _p10 = f(mx);\n\t\tif (_p10.ctor === 'Just') {\n\t\t\treturn { ctor: '::', _0: _p10._0, _1: xs };\n\t\t} else {\n\t\t\treturn xs;\n\t\t}\n\t});\n\tvar _elm_lang$core$List$filterMap = F2(function (f, xs) {\n\t\treturn A3(_elm_lang$core$List$foldr, _elm_lang$core$List$maybeCons(f), { ctor: '[]' }, xs);\n\t});\n\tvar _elm_lang$core$List$reverse = function _elm_lang$core$List$reverse(list) {\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (x, y) {\n\t\t\treturn { ctor: '::', _0: x, _1: y };\n\t\t}), { ctor: '[]' }, list);\n\t};\n\tvar _elm_lang$core$List$scanl = F3(function (f, b, xs) {\n\t\tvar scan1 = F2(function (x, accAcc) {\n\t\t\tvar _p11 = accAcc;\n\t\t\tif (_p11.ctor === '::') {\n\t\t\t\treturn {\n\t\t\t\t\tctor: '::',\n\t\t\t\t\t_0: A2(f, x, _p11._0),\n\t\t\t\t\t_1: accAcc\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn { ctor: '[]' };\n\t\t\t}\n\t\t});\n\t\treturn _elm_lang$core$List$reverse(A3(_elm_lang$core$List$foldl, scan1, {\n\t\t\tctor: '::',\n\t\t\t_0: b,\n\t\t\t_1: { ctor: '[]' }\n\t\t}, xs));\n\t});\n\tvar _elm_lang$core$List$append = F2(function (xs, ys) {\n\t\tvar _p12 = ys;\n\t\tif (_p12.ctor === '[]') {\n\t\t\treturn xs;\n\t\t} else {\n\t\t\treturn A3(_elm_lang$core$List$foldr, F2(function (x, y) {\n\t\t\t\treturn { ctor: '::', _0: x, _1: y };\n\t\t\t}), ys, xs);\n\t\t}\n\t});\n\tvar _elm_lang$core$List$concat = function _elm_lang$core$List$concat(lists) {\n\t\treturn A3(_elm_lang$core$List$foldr, _elm_lang$core$List$append, { ctor: '[]' }, lists);\n\t};\n\tvar _elm_lang$core$List$concatMap = F2(function (f, list) {\n\t\treturn _elm_lang$core$List$concat(A2(_elm_lang$core$List$map, f, list));\n\t});\n\tvar _elm_lang$core$List$partition = F2(function (pred, list) {\n\t\tvar step = F2(function (x, _p13) {\n\t\t\tvar _p14 = _p13;\n\t\t\tvar _p16 = _p14._0;\n\t\t\tvar _p15 = _p14._1;\n\t\t\treturn pred(x) ? {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: { ctor: '::', _0: x, _1: _p16 },\n\t\t\t\t_1: _p15\n\t\t\t} : {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: _p16,\n\t\t\t\t_1: { ctor: '::', _0: x, _1: _p15 }\n\t\t\t};\n\t\t});\n\t\treturn A3(_elm_lang$core$List$foldr, step, {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: { ctor: '[]' },\n\t\t\t_1: { ctor: '[]' }\n\t\t}, list);\n\t});\n\tvar _elm_lang$core$List$unzip = function _elm_lang$core$List$unzip(pairs) {\n\t\tvar step = F2(function (_p18, _p17) {\n\t\t\tvar _p19 = _p18;\n\t\t\tvar _p20 = _p17;\n\t\t\treturn {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: { ctor: '::', _0: _p19._0, _1: _p20._0 },\n\t\t\t\t_1: { ctor: '::', _0: _p19._1, _1: _p20._1 }\n\t\t\t};\n\t\t});\n\t\treturn A3(_elm_lang$core$List$foldr, step, {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: { ctor: '[]' },\n\t\t\t_1: { ctor: '[]' }\n\t\t}, pairs);\n\t};\n\tvar _elm_lang$core$List$intersperse = F2(function (sep, xs) {\n\t\tvar _p21 = xs;\n\t\tif (_p21.ctor === '[]') {\n\t\t\treturn { ctor: '[]' };\n\t\t} else {\n\t\t\tvar step = F2(function (x, rest) {\n\t\t\t\treturn {\n\t\t\t\t\tctor: '::',\n\t\t\t\t\t_0: sep,\n\t\t\t\t\t_1: { ctor: '::', _0: x, _1: rest }\n\t\t\t\t};\n\t\t\t});\n\t\t\tvar spersed = A3(_elm_lang$core$List$foldr, step, { ctor: '[]' }, _p21._1);\n\t\t\treturn { ctor: '::', _0: _p21._0, _1: spersed };\n\t\t}\n\t});\n\tvar _elm_lang$core$List$takeReverse = F3(function (n, list, taken) {\n\t\ttakeReverse: while (true) {\n\t\t\tif (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {\n\t\t\t\treturn taken;\n\t\t\t} else {\n\t\t\t\tvar _p22 = list;\n\t\t\t\tif (_p22.ctor === '[]') {\n\t\t\t\t\treturn taken;\n\t\t\t\t} else {\n\t\t\t\t\tvar _v23 = n - 1,\n\t\t\t\t\t    _v24 = _p22._1,\n\t\t\t\t\t    _v25 = { ctor: '::', _0: _p22._0, _1: taken };\n\t\t\t\t\tn = _v23;\n\t\t\t\t\tlist = _v24;\n\t\t\t\t\ttaken = _v25;\n\t\t\t\t\tcontinue takeReverse;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$takeTailRec = F2(function (n, list) {\n\t\treturn _elm_lang$core$List$reverse(A3(_elm_lang$core$List$takeReverse, n, list, { ctor: '[]' }));\n\t});\n\tvar _elm_lang$core$List$takeFast = F3(function (ctr, n, list) {\n\t\tif (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {\n\t\t\treturn { ctor: '[]' };\n\t\t} else {\n\t\t\tvar _p23 = { ctor: '_Tuple2', _0: n, _1: list };\n\t\t\t_v26_5: do {\n\t\t\t\t_v26_1: do {\n\t\t\t\t\tif (_p23.ctor === '_Tuple2') {\n\t\t\t\t\t\tif (_p23._1.ctor === '[]') {\n\t\t\t\t\t\t\treturn list;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (_p23._1._1.ctor === '::') {\n\t\t\t\t\t\t\t\tswitch (_p23._0) {\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\tbreak _v26_1;\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t_0: _p23._1._0,\n\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t_0: _p23._1._1._0,\n\t\t\t\t\t\t\t\t\t\t\t\t_1: { ctor: '[]' }\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\tif (_p23._1._1._1.ctor === '::') {\n\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t_0: _p23._1._0,\n\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p23._1._1._0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p23._1._1._1._0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_1: { ctor: '[]' }\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tbreak _v26_5;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tif (_p23._1._1._1.ctor === '::' && _p23._1._1._1._1.ctor === '::') {\n\t\t\t\t\t\t\t\t\t\t\tvar _p28 = _p23._1._1._1._0;\n\t\t\t\t\t\t\t\t\t\t\tvar _p27 = _p23._1._1._0;\n\t\t\t\t\t\t\t\t\t\t\tvar _p26 = _p23._1._0;\n\t\t\t\t\t\t\t\t\t\t\tvar _p25 = _p23._1._1._1._1._0;\n\t\t\t\t\t\t\t\t\t\t\tvar _p24 = _p23._1._1._1._1._1;\n\t\t\t\t\t\t\t\t\t\t\treturn _elm_lang$core$Native_Utils.cmp(ctr, 1000) > 0 ? {\n\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t_0: _p26,\n\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p27,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p28,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p25,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_1: A2(_elm_lang$core$List$takeTailRec, n - 4, _p24)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} : {\n\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t_0: _p26,\n\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p27,\n\t\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p28,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_0: _p25,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t_1: A3(_elm_lang$core$List$takeFast, ctr + 1, n - 4, _p24)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tbreak _v26_5;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (_p23._0 === 1) {\n\t\t\t\t\t\t\t\t\tbreak _v26_1;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbreak _v26_5;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak _v26_5;\n\t\t\t\t\t}\n\t\t\t\t} while (false);\n\t\t\t\treturn {\n\t\t\t\t\tctor: '::',\n\t\t\t\t\t_0: _p23._1._0,\n\t\t\t\t\t_1: { ctor: '[]' }\n\t\t\t\t};\n\t\t\t} while (false);\n\t\t\treturn list;\n\t\t}\n\t});\n\tvar _elm_lang$core$List$take = F2(function (n, list) {\n\t\treturn A3(_elm_lang$core$List$takeFast, 0, n, list);\n\t});\n\tvar _elm_lang$core$List$repeatHelp = F3(function (result, n, value) {\n\t\trepeatHelp: while (true) {\n\t\t\tif (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tvar _v27 = { ctor: '::', _0: value, _1: result },\n\t\t\t\t    _v28 = n - 1,\n\t\t\t\t    _v29 = value;\n\t\t\t\tresult = _v27;\n\t\t\t\tn = _v28;\n\t\t\t\tvalue = _v29;\n\t\t\t\tcontinue repeatHelp;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$repeat = F2(function (n, value) {\n\t\treturn A3(_elm_lang$core$List$repeatHelp, { ctor: '[]' }, n, value);\n\t});\n\tvar _elm_lang$core$List$rangeHelp = F3(function (lo, hi, list) {\n\t\trangeHelp: while (true) {\n\t\t\tif (_elm_lang$core$Native_Utils.cmp(lo, hi) < 1) {\n\t\t\t\tvar _v30 = lo,\n\t\t\t\t    _v31 = hi - 1,\n\t\t\t\t    _v32 = { ctor: '::', _0: hi, _1: list };\n\t\t\t\tlo = _v30;\n\t\t\t\thi = _v31;\n\t\t\t\tlist = _v32;\n\t\t\t\tcontinue rangeHelp;\n\t\t\t} else {\n\t\t\t\treturn list;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$List$range = F2(function (lo, hi) {\n\t\treturn A3(_elm_lang$core$List$rangeHelp, lo, hi, { ctor: '[]' });\n\t});\n\tvar _elm_lang$core$List$indexedMap = F2(function (f, xs) {\n\t\treturn A3(_elm_lang$core$List$map2, f, A2(_elm_lang$core$List$range, 0, _elm_lang$core$List$length(xs) - 1), xs);\n\t});\n\n\tvar _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;\n\tvar _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;\n\tvar _elm_lang$core$Array$isEmpty = function _elm_lang$core$Array$isEmpty(array) {\n\t\treturn _elm_lang$core$Native_Utils.eq(_elm_lang$core$Array$length(array), 0);\n\t};\n\tvar _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;\n\tvar _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;\n\tvar _elm_lang$core$Array$get = F2(function (i, array) {\n\t\treturn _elm_lang$core$Native_Utils.cmp(0, i) < 1 && _elm_lang$core$Native_Utils.cmp(i, _elm_lang$core$Native_Array.length(array)) < 0 ? _elm_lang$core$Maybe$Just(A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;\n\t});\n\tvar _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;\n\tvar _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;\n\tvar _elm_lang$core$Array$filter = F2(function (isOkay, arr) {\n\t\tvar update = F2(function (x, xs) {\n\t\t\treturn isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;\n\t\t});\n\t\treturn A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);\n\t});\n\tvar _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;\n\tvar _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;\n\tvar _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;\n\tvar _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;\n\tvar _elm_lang$core$Array$toIndexedList = function _elm_lang$core$Array$toIndexedList(array) {\n\t\treturn A3(_elm_lang$core$List$map2, F2(function (v0, v1) {\n\t\t\treturn { ctor: '_Tuple2', _0: v0, _1: v1 };\n\t\t}), A2(_elm_lang$core$List$range, 0, _elm_lang$core$Native_Array.length(array) - 1), _elm_lang$core$Native_Array.toList(array));\n\t};\n\tvar _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;\n\tvar _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;\n\tvar _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;\n\tvar _elm_lang$core$Array$repeat = F2(function (n, e) {\n\t\treturn A2(_elm_lang$core$Array$initialize, n, _elm_lang$core$Basics$always(e));\n\t});\n\tvar _elm_lang$core$Array$Array = { ctor: 'Array' };\n\n\t//import Native.Utils //\n\n\tvar _elm_lang$core$Native_Char = function () {\n\n\t\treturn {\n\t\t\tfromCode: function fromCode(c) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.chr(String.fromCharCode(c));\n\t\t\t},\n\t\t\ttoCode: function toCode(c) {\n\t\t\t\treturn c.charCodeAt(0);\n\t\t\t},\n\t\t\ttoUpper: function toUpper(c) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toUpperCase());\n\t\t\t},\n\t\t\ttoLower: function toLower(c) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLowerCase());\n\t\t\t},\n\t\t\ttoLocaleUpper: function toLocaleUpper(c) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase());\n\t\t\t},\n\t\t\ttoLocaleLower: function toLocaleLower(c) {\n\t\t\t\treturn _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase());\n\t\t\t}\n\t\t};\n\t}();\n\tvar _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;\n\tvar _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;\n\tvar _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;\n\tvar _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;\n\tvar _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;\n\tvar _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;\n\tvar _elm_lang$core$Char$isBetween = F3(function (low, high, $char) {\n\t\tvar code = _elm_lang$core$Char$toCode($char);\n\t\treturn _elm_lang$core$Native_Utils.cmp(code, _elm_lang$core$Char$toCode(low)) > -1 && _elm_lang$core$Native_Utils.cmp(code, _elm_lang$core$Char$toCode(high)) < 1;\n\t});\n\tvar _elm_lang$core$Char$isUpper = A2(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('A'), _elm_lang$core$Native_Utils.chr('Z'));\n\tvar _elm_lang$core$Char$isLower = A2(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('a'), _elm_lang$core$Native_Utils.chr('z'));\n\tvar _elm_lang$core$Char$isDigit = A2(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('0'), _elm_lang$core$Native_Utils.chr('9'));\n\tvar _elm_lang$core$Char$isOctDigit = A2(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('0'), _elm_lang$core$Native_Utils.chr('7'));\n\tvar _elm_lang$core$Char$isHexDigit = function _elm_lang$core$Char$isHexDigit($char) {\n\t\treturn _elm_lang$core$Char$isDigit($char) || A3(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('a'), _elm_lang$core$Native_Utils.chr('f'), $char) || A3(_elm_lang$core$Char$isBetween, _elm_lang$core$Native_Utils.chr('A'), _elm_lang$core$Native_Utils.chr('F'), $char);\n\t};\n\n\t//import Native.Utils //\n\n\tvar _elm_lang$core$Native_Scheduler = function () {\n\n\t\tvar MAX_STEPS = 10000;\n\n\t\t// TASKS\n\n\t\tfunction succeed(value) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_succeed',\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tfunction fail(error) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_fail',\n\t\t\t\tvalue: error\n\t\t\t};\n\t\t}\n\n\t\tfunction nativeBinding(callback) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_nativeBinding',\n\t\t\t\tcallback: callback,\n\t\t\t\tcancel: null\n\t\t\t};\n\t\t}\n\n\t\tfunction andThen(callback, task) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_andThen',\n\t\t\t\tcallback: callback,\n\t\t\t\ttask: task\n\t\t\t};\n\t\t}\n\n\t\tfunction onError(callback, task) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_onError',\n\t\t\t\tcallback: callback,\n\t\t\t\ttask: task\n\t\t\t};\n\t\t}\n\n\t\tfunction receive(callback) {\n\t\t\treturn {\n\t\t\t\tctor: '_Task_receive',\n\t\t\t\tcallback: callback\n\t\t\t};\n\t\t}\n\n\t\t// PROCESSES\n\n\t\tfunction rawSpawn(task) {\n\t\t\tvar process = {\n\t\t\t\tctor: '_Process',\n\t\t\t\tid: _elm_lang$core$Native_Utils.guid(),\n\t\t\t\troot: task,\n\t\t\t\tstack: null,\n\t\t\t\tmailbox: []\n\t\t\t};\n\n\t\t\tenqueue(process);\n\n\t\t\treturn process;\n\t\t}\n\n\t\tfunction spawn(task) {\n\t\t\treturn nativeBinding(function (callback) {\n\t\t\t\tvar process = rawSpawn(task);\n\t\t\t\tcallback(succeed(process));\n\t\t\t});\n\t\t}\n\n\t\tfunction rawSend(process, msg) {\n\t\t\tprocess.mailbox.push(msg);\n\t\t\tenqueue(process);\n\t\t}\n\n\t\tfunction send(process, msg) {\n\t\t\treturn nativeBinding(function (callback) {\n\t\t\t\trawSend(process, msg);\n\t\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t});\n\t\t}\n\n\t\tfunction kill(process) {\n\t\t\treturn nativeBinding(function (callback) {\n\t\t\t\tvar root = process.root;\n\t\t\t\tif (root.ctor === '_Task_nativeBinding' && root.cancel) {\n\t\t\t\t\troot.cancel();\n\t\t\t\t}\n\n\t\t\t\tprocess.root = null;\n\n\t\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t});\n\t\t}\n\n\t\tfunction sleep(time) {\n\t\t\treturn nativeBinding(function (callback) {\n\t\t\t\tvar id = setTimeout(function () {\n\t\t\t\t\tcallback(succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t\t}, time);\n\n\t\t\t\treturn function () {\n\t\t\t\t\tclearTimeout(id);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\t// STEP PROCESSES\n\n\t\tfunction step(numSteps, process) {\n\t\t\twhile (numSteps < MAX_STEPS) {\n\t\t\t\tvar ctor = process.root.ctor;\n\n\t\t\t\tif (ctor === '_Task_succeed') {\n\t\t\t\t\twhile (process.stack && process.stack.ctor === '_Task_onError') {\n\t\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t\t}\n\t\t\t\t\tif (process.stack === null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tprocess.root = process.stack.callback(process.root.value);\n\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t\t++numSteps;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (ctor === '_Task_fail') {\n\t\t\t\t\twhile (process.stack && process.stack.ctor === '_Task_andThen') {\n\t\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t\t}\n\t\t\t\t\tif (process.stack === null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tprocess.root = process.stack.callback(process.root.value);\n\t\t\t\t\tprocess.stack = process.stack.rest;\n\t\t\t\t\t++numSteps;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (ctor === '_Task_andThen') {\n\t\t\t\t\tprocess.stack = {\n\t\t\t\t\t\tctor: '_Task_andThen',\n\t\t\t\t\t\tcallback: process.root.callback,\n\t\t\t\t\t\trest: process.stack\n\t\t\t\t\t};\n\t\t\t\t\tprocess.root = process.root.task;\n\t\t\t\t\t++numSteps;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (ctor === '_Task_onError') {\n\t\t\t\t\tprocess.stack = {\n\t\t\t\t\t\tctor: '_Task_onError',\n\t\t\t\t\t\tcallback: process.root.callback,\n\t\t\t\t\t\trest: process.stack\n\t\t\t\t\t};\n\t\t\t\t\tprocess.root = process.root.task;\n\t\t\t\t\t++numSteps;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (ctor === '_Task_nativeBinding') {\n\t\t\t\t\tprocess.root.cancel = process.root.callback(function (newRoot) {\n\t\t\t\t\t\tprocess.root = newRoot;\n\t\t\t\t\t\tenqueue(process);\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (ctor === '_Task_receive') {\n\t\t\t\t\tvar mailbox = process.mailbox;\n\t\t\t\t\tif (mailbox.length === 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tprocess.root = process.root.callback(mailbox.shift());\n\t\t\t\t\t++numSteps;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(ctor);\n\t\t\t}\n\n\t\t\tif (numSteps < MAX_STEPS) {\n\t\t\t\treturn numSteps + 1;\n\t\t\t}\n\t\t\tenqueue(process);\n\n\t\t\treturn numSteps;\n\t\t}\n\n\t\t// WORK QUEUE\n\n\t\tvar working = false;\n\t\tvar workQueue = [];\n\n\t\tfunction enqueue(process) {\n\t\t\tworkQueue.push(process);\n\n\t\t\tif (!working) {\n\t\t\t\tsetTimeout(work, 0);\n\t\t\t\tworking = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction work() {\n\t\t\tvar numSteps = 0;\n\t\t\tvar process;\n\t\t\twhile (numSteps < MAX_STEPS && (process = workQueue.shift())) {\n\t\t\t\tif (process.root) {\n\t\t\t\t\tnumSteps = step(numSteps, process);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!process) {\n\t\t\t\tworking = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetTimeout(work, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tsucceed: succeed,\n\t\t\tfail: fail,\n\t\t\tnativeBinding: nativeBinding,\n\t\t\tandThen: F2(andThen),\n\t\t\tonError: F2(onError),\n\t\t\treceive: receive,\n\n\t\t\tspawn: spawn,\n\t\t\tkill: kill,\n\t\t\tsleep: sleep,\n\t\t\tsend: F2(send),\n\n\t\t\trawSpawn: rawSpawn,\n\t\t\trawSend: rawSend\n\t\t};\n\t}();\n\t//import //\n\n\tvar _elm_lang$core$Native_Platform = function () {\n\n\t\t// PROGRAMS\n\n\t\tfunction program(impl) {\n\t\t\treturn function (flagDecoder) {\n\t\t\t\treturn function (object, moduleName) {\n\t\t\t\t\tobject['worker'] = function worker(flags) {\n\t\t\t\t\t\tif (typeof flags !== 'undefined') {\n\t\t\t\t\t\t\tthrow new Error('The `' + moduleName + '` module does not need flags.\\n' + 'Call ' + moduleName + '.worker() with no arguments and you should be all set!');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn initialize(impl.init, impl.update, impl.subscriptions, renderer);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tfunction programWithFlags(impl) {\n\t\t\treturn function (flagDecoder) {\n\t\t\t\treturn function (object, moduleName) {\n\t\t\t\t\tobject['worker'] = function worker(flags) {\n\t\t\t\t\t\tif (typeof flagDecoder === 'undefined') {\n\t\t\t\t\t\t\tthrow new Error('Are you trying to sneak a Never value into Elm? Trickster!\\n' + 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\\n' + 'Use `program` instead if you do not want flags.');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);\n\t\t\t\t\t\tif (result.ctor === 'Err') {\n\t\t\t\t\t\t\tthrow new Error(moduleName + '.worker(...) was called with an unexpected argument.\\n' + 'I tried to convert it to an Elm value, but ran into this problem:\\n\\n' + result._0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn initialize(impl.init(result._0), impl.update, impl.subscriptions, renderer);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tfunction renderer(enqueue, _) {\n\t\t\treturn function (_) {};\n\t\t}\n\n\t\t// HTML TO PROGRAM\n\n\t\tfunction htmlToProgram(vnode) {\n\t\t\tvar emptyBag = batch(_elm_lang$core$Native_List.Nil);\n\t\t\tvar noChange = _elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.Tuple0, emptyBag);\n\n\t\t\treturn _elm_lang$virtual_dom$VirtualDom$program({\n\t\t\t\tinit: noChange,\n\t\t\t\tview: function view(model) {\n\t\t\t\t\treturn main;\n\t\t\t\t},\n\t\t\t\tupdate: F2(function (msg, model) {\n\t\t\t\t\treturn noChange;\n\t\t\t\t}),\n\t\t\t\tsubscriptions: function subscriptions(model) {\n\t\t\t\t\treturn emptyBag;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// INITIALIZE A PROGRAM\n\n\t\tfunction initialize(init, update, subscriptions, renderer) {\n\t\t\t// ambient state\n\t\t\tvar managers = {};\n\t\t\tvar updateView;\n\n\t\t\t// init and update state in main process\n\t\t\tvar initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\t\tvar model = init._0;\n\t\t\t\tupdateView = renderer(enqueue, model);\n\t\t\t\tvar cmds = init._1;\n\t\t\t\tvar subs = subscriptions(model);\n\t\t\t\tdispatchEffects(managers, cmds, subs);\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(model));\n\t\t\t});\n\n\t\t\tfunction onMessage(msg, model) {\n\t\t\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\t\t\tvar results = A2(update, msg, model);\n\t\t\t\t\tmodel = results._0;\n\t\t\t\t\tupdateView(model);\n\t\t\t\t\tvar cmds = results._1;\n\t\t\t\t\tvar subs = subscriptions(model);\n\t\t\t\t\tdispatchEffects(managers, cmds, subs);\n\t\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(model));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar mainProcess = spawnLoop(initApp, onMessage);\n\n\t\t\tfunction enqueue(msg) {\n\t\t\t\t_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);\n\t\t\t}\n\n\t\t\tvar ports = setupEffects(managers, enqueue);\n\n\t\t\treturn ports ? { ports: ports } : {};\n\t\t}\n\n\t\t// EFFECT MANAGERS\n\n\t\tvar effectManagers = {};\n\n\t\tfunction setupEffects(managers, callback) {\n\t\t\tvar ports;\n\n\t\t\t// setup all necessary effect managers\n\t\t\tfor (var key in effectManagers) {\n\t\t\t\tvar manager = effectManagers[key];\n\n\t\t\t\tif (manager.isForeign) {\n\t\t\t\t\tports = ports || {};\n\t\t\t\t\tports[key] = manager.tag === 'cmd' ? setupOutgoingPort(key) : setupIncomingPort(key, callback);\n\t\t\t\t}\n\n\t\t\t\tmanagers[key] = makeManager(manager, callback);\n\t\t\t}\n\n\t\t\treturn ports;\n\t\t}\n\n\t\tfunction makeManager(info, callback) {\n\t\t\tvar router = {\n\t\t\t\tmain: callback,\n\t\t\t\tself: undefined\n\t\t\t};\n\n\t\t\tvar tag = info.tag;\n\t\t\tvar onEffects = info.onEffects;\n\t\t\tvar onSelfMsg = info.onSelfMsg;\n\n\t\t\tfunction onMessage(msg, state) {\n\t\t\t\tif (msg.ctor === 'self') {\n\t\t\t\t\treturn A3(onSelfMsg, router, msg._0, state);\n\t\t\t\t}\n\n\t\t\t\tvar fx = msg._0;\n\t\t\t\tswitch (tag) {\n\t\t\t\t\tcase 'cmd':\n\t\t\t\t\t\treturn A3(onEffects, router, fx.cmds, state);\n\n\t\t\t\t\tcase 'sub':\n\t\t\t\t\t\treturn A3(onEffects, router, fx.subs, state);\n\n\t\t\t\t\tcase 'fx':\n\t\t\t\t\t\treturn A4(onEffects, router, fx.cmds, fx.subs, state);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar process = spawnLoop(info.init, onMessage);\n\t\t\trouter.self = process;\n\t\t\treturn process;\n\t\t}\n\n\t\tfunction sendToApp(router, msg) {\n\t\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\t\trouter.main(msg);\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t});\n\t\t}\n\n\t\tfunction sendToSelf(router, msg) {\n\t\t\treturn A2(_elm_lang$core$Native_Scheduler.send, router.self, {\n\t\t\t\tctor: 'self',\n\t\t\t\t_0: msg\n\t\t\t});\n\t\t}\n\n\t\t// HELPER for STATEFUL LOOPS\n\n\t\tfunction spawnLoop(init, onMessage) {\n\t\t\tvar andThen = _elm_lang$core$Native_Scheduler.andThen;\n\n\t\t\tfunction loop(state) {\n\t\t\t\tvar handleMsg = _elm_lang$core$Native_Scheduler.receive(function (msg) {\n\t\t\t\t\treturn onMessage(msg, state);\n\t\t\t\t});\n\t\t\t\treturn A2(andThen, loop, handleMsg);\n\t\t\t}\n\n\t\t\tvar task = A2(andThen, loop, init);\n\n\t\t\treturn _elm_lang$core$Native_Scheduler.rawSpawn(task);\n\t\t}\n\n\t\t// BAGS\n\n\t\tfunction leaf(home) {\n\t\t\treturn function (value) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'leaf',\n\t\t\t\t\thome: home,\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tfunction batch(list) {\n\t\t\treturn {\n\t\t\t\ttype: 'node',\n\t\t\t\tbranches: list\n\t\t\t};\n\t\t}\n\n\t\tfunction map(tagger, bag) {\n\t\t\treturn {\n\t\t\t\ttype: 'map',\n\t\t\t\ttagger: tagger,\n\t\t\t\ttree: bag\n\t\t\t};\n\t\t}\n\n\t\t// PIPE BAGS INTO EFFECT MANAGERS\n\n\t\tfunction dispatchEffects(managers, cmdBag, subBag) {\n\t\t\tvar effectsDict = {};\n\t\t\tgatherEffects(true, cmdBag, effectsDict, null);\n\t\t\tgatherEffects(false, subBag, effectsDict, null);\n\n\t\t\tfor (var home in managers) {\n\t\t\t\tvar fx = home in effectsDict ? effectsDict[home] : {\n\t\t\t\t\tcmds: _elm_lang$core$Native_List.Nil,\n\t\t\t\t\tsubs: _elm_lang$core$Native_List.Nil\n\t\t\t\t};\n\n\t\t\t\t_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });\n\t\t\t}\n\t\t}\n\n\t\tfunction gatherEffects(isCmd, bag, effectsDict, taggers) {\n\t\t\tswitch (bag.type) {\n\t\t\t\tcase 'leaf':\n\t\t\t\t\tvar home = bag.home;\n\t\t\t\t\tvar effect = toEffect(isCmd, home, taggers, bag.value);\n\t\t\t\t\teffectsDict[home] = insert(isCmd, effect, effectsDict[home]);\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tvar list = bag.branches;\n\t\t\t\t\twhile (list.ctor !== '[]') {\n\t\t\t\t\t\tgatherEffects(isCmd, list._0, effectsDict, taggers);\n\t\t\t\t\t\tlist = list._1;\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'map':\n\t\t\t\t\tgatherEffects(isCmd, bag.tree, effectsDict, {\n\t\t\t\t\t\ttagger: bag.tagger,\n\t\t\t\t\t\trest: taggers\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tfunction toEffect(isCmd, home, taggers, value) {\n\t\t\tfunction applyTaggers(x) {\n\t\t\t\tvar temp = taggers;\n\t\t\t\twhile (temp) {\n\t\t\t\t\tx = temp.tagger(x);\n\t\t\t\t\ttemp = temp.rest;\n\t\t\t\t}\n\t\t\t\treturn x;\n\t\t\t}\n\n\t\t\tvar map = isCmd ? effectManagers[home].cmdMap : effectManagers[home].subMap;\n\n\t\t\treturn A2(map, applyTaggers, value);\n\t\t}\n\n\t\tfunction insert(isCmd, newEffect, effects) {\n\t\t\teffects = effects || {\n\t\t\t\tcmds: _elm_lang$core$Native_List.Nil,\n\t\t\t\tsubs: _elm_lang$core$Native_List.Nil\n\t\t\t};\n\t\t\tif (isCmd) {\n\t\t\t\teffects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);\n\t\t\t\treturn effects;\n\t\t\t}\n\t\t\teffects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);\n\t\t\treturn effects;\n\t\t}\n\n\t\t// PORTS\n\n\t\tfunction checkPortName(name) {\n\t\t\tif (name in effectManagers) {\n\t\t\t\tthrow new Error('There can only be one port named `' + name + '`, but your program has multiple.');\n\t\t\t}\n\t\t}\n\n\t\t// OUTGOING PORTS\n\n\t\tfunction outgoingPort(name, converter) {\n\t\t\tcheckPortName(name);\n\t\t\teffectManagers[name] = {\n\t\t\t\ttag: 'cmd',\n\t\t\t\tcmdMap: outgoingPortMap,\n\t\t\t\tconverter: converter,\n\t\t\t\tisForeign: true\n\t\t\t};\n\t\t\treturn leaf(name);\n\t\t}\n\n\t\tvar outgoingPortMap = F2(function cmdMap(tagger, value) {\n\t\t\treturn value;\n\t\t});\n\n\t\tfunction setupOutgoingPort(name) {\n\t\t\tvar subs = [];\n\t\t\tvar converter = effectManagers[name].converter;\n\n\t\t\t// CREATE MANAGER\n\n\t\t\tvar init = _elm_lang$core$Native_Scheduler.succeed(null);\n\n\t\t\tfunction onEffects(router, cmdList, state) {\n\t\t\t\twhile (cmdList.ctor !== '[]') {\n\t\t\t\t\t// grab a separate reference to subs in case unsubscribe is called\n\t\t\t\t\tvar currentSubs = subs;\n\t\t\t\t\tvar value = converter(cmdList._0);\n\t\t\t\t\tfor (var i = 0; i < currentSubs.length; i++) {\n\t\t\t\t\t\tcurrentSubs[i](value);\n\t\t\t\t\t}\n\t\t\t\t\tcmdList = cmdList._1;\n\t\t\t\t}\n\t\t\t\treturn init;\n\t\t\t}\n\n\t\t\teffectManagers[name].init = init;\n\t\t\teffectManagers[name].onEffects = F3(onEffects);\n\n\t\t\t// PUBLIC API\n\n\t\t\tfunction subscribe(callback) {\n\t\t\t\tsubs.push(callback);\n\t\t\t}\n\n\t\t\tfunction unsubscribe(callback) {\n\t\t\t\t// copy subs into a new array in case unsubscribe is called within a\n\t\t\t\t// subscribed callback\n\t\t\t\tsubs = subs.slice();\n\t\t\t\tvar index = subs.indexOf(callback);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tsubs.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsubscribe: subscribe,\n\t\t\t\tunsubscribe: unsubscribe\n\t\t\t};\n\t\t}\n\n\t\t// INCOMING PORTS\n\n\t\tfunction incomingPort(name, converter) {\n\t\t\tcheckPortName(name);\n\t\t\teffectManagers[name] = {\n\t\t\t\ttag: 'sub',\n\t\t\t\tsubMap: incomingPortMap,\n\t\t\t\tconverter: converter,\n\t\t\t\tisForeign: true\n\t\t\t};\n\t\t\treturn leaf(name);\n\t\t}\n\n\t\tvar incomingPortMap = F2(function subMap(tagger, finalTagger) {\n\t\t\treturn function (value) {\n\t\t\t\treturn tagger(finalTagger(value));\n\t\t\t};\n\t\t});\n\n\t\tfunction setupIncomingPort(name, callback) {\n\t\t\tvar sentBeforeInit = [];\n\t\t\tvar subs = _elm_lang$core$Native_List.Nil;\n\t\t\tvar converter = effectManagers[name].converter;\n\t\t\tvar currentOnEffects = preInitOnEffects;\n\t\t\tvar currentSend = preInitSend;\n\n\t\t\t// CREATE MANAGER\n\n\t\t\tvar init = _elm_lang$core$Native_Scheduler.succeed(null);\n\n\t\t\tfunction preInitOnEffects(router, subList, state) {\n\t\t\t\tvar postInitResult = postInitOnEffects(router, subList, state);\n\n\t\t\t\tfor (var i = 0; i < sentBeforeInit.length; i++) {\n\t\t\t\t\tpostInitSend(sentBeforeInit[i]);\n\t\t\t\t}\n\n\t\t\t\tsentBeforeInit = null; // to release objects held in queue\n\t\t\t\tcurrentSend = postInitSend;\n\t\t\t\tcurrentOnEffects = postInitOnEffects;\n\t\t\t\treturn postInitResult;\n\t\t\t}\n\n\t\t\tfunction postInitOnEffects(router, subList, state) {\n\t\t\t\tsubs = subList;\n\t\t\t\treturn init;\n\t\t\t}\n\n\t\t\tfunction onEffects(router, subList, state) {\n\t\t\t\treturn currentOnEffects(router, subList, state);\n\t\t\t}\n\n\t\t\teffectManagers[name].init = init;\n\t\t\teffectManagers[name].onEffects = F3(onEffects);\n\n\t\t\t// PUBLIC API\n\n\t\t\tfunction preInitSend(value) {\n\t\t\t\tsentBeforeInit.push(value);\n\t\t\t}\n\n\t\t\tfunction postInitSend(value) {\n\t\t\t\tvar temp = subs;\n\t\t\t\twhile (temp.ctor !== '[]') {\n\t\t\t\t\tcallback(temp._0(value));\n\t\t\t\t\ttemp = temp._1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction send(incomingValue) {\n\t\t\t\tvar result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, incomingValue);\n\t\t\t\tif (result.ctor === 'Err') {\n\t\t\t\t\tthrow new Error('Trying to send an unexpected type of value through port `' + name + '`:\\n' + result._0);\n\t\t\t\t}\n\n\t\t\t\tcurrentSend(result._0);\n\t\t\t}\n\n\t\t\treturn { send: send };\n\t\t}\n\n\t\treturn {\n\t\t\t// routers\n\t\t\tsendToApp: F2(sendToApp),\n\t\t\tsendToSelf: F2(sendToSelf),\n\n\t\t\t// global setup\n\t\t\teffectManagers: effectManagers,\n\t\t\toutgoingPort: outgoingPort,\n\t\t\tincomingPort: incomingPort,\n\n\t\t\thtmlToProgram: htmlToProgram,\n\t\t\tprogram: program,\n\t\t\tprogramWithFlags: programWithFlags,\n\t\t\tinitialize: initialize,\n\n\t\t\t// effect bags\n\t\t\tleaf: leaf,\n\t\t\tbatch: batch,\n\t\t\tmap: F2(map)\n\t\t};\n\t}();\n\n\tvar _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;\n\tvar _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch({ ctor: '[]' });\n\tvar _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};\n\t_elm_lang$core$Platform_Cmd_ops['!'] = F2(function (model, commands) {\n\t\treturn {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: model,\n\t\t\t_1: _elm_lang$core$Platform_Cmd$batch(commands)\n\t\t};\n\t});\n\tvar _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;\n\tvar _elm_lang$core$Platform_Cmd$Cmd = { ctor: 'Cmd' };\n\n\tvar _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;\n\tvar _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch({ ctor: '[]' });\n\tvar _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;\n\tvar _elm_lang$core$Platform_Sub$Sub = { ctor: 'Sub' };\n\n\tvar _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;\n\tvar _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;\n\tvar _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;\n\tvar _elm_lang$core$Platform$programWithFlags = _elm_lang$core$Native_Platform.programWithFlags;\n\tvar _elm_lang$core$Platform$program = _elm_lang$core$Native_Platform.program;\n\tvar _elm_lang$core$Platform$Program = { ctor: 'Program' };\n\tvar _elm_lang$core$Platform$Task = { ctor: 'Task' };\n\tvar _elm_lang$core$Platform$ProcessId = { ctor: 'ProcessId' };\n\tvar _elm_lang$core$Platform$Router = { ctor: 'Router' };\n\n\tvar _elm_lang$core$Result$toMaybe = function _elm_lang$core$Result$toMaybe(result) {\n\t\tvar _p0 = result;\n\t\tif (_p0.ctor === 'Ok') {\n\t\t\treturn _elm_lang$core$Maybe$Just(_p0._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t};\n\tvar _elm_lang$core$Result$withDefault = F2(function (def, result) {\n\t\tvar _p1 = result;\n\t\tif (_p1.ctor === 'Ok') {\n\t\t\treturn _p1._0;\n\t\t} else {\n\t\t\treturn def;\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$Err = function _elm_lang$core$Result$Err(a) {\n\t\treturn { ctor: 'Err', _0: a };\n\t};\n\tvar _elm_lang$core$Result$andThen = F2(function (callback, result) {\n\t\tvar _p2 = result;\n\t\tif (_p2.ctor === 'Ok') {\n\t\t\treturn callback(_p2._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p2._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$Ok = function _elm_lang$core$Result$Ok(a) {\n\t\treturn { ctor: 'Ok', _0: a };\n\t};\n\tvar _elm_lang$core$Result$map = F2(function (func, ra) {\n\t\tvar _p3 = ra;\n\t\tif (_p3.ctor === 'Ok') {\n\t\t\treturn _elm_lang$core$Result$Ok(func(_p3._0));\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p3._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$map2 = F3(function (func, ra, rb) {\n\t\tvar _p4 = { ctor: '_Tuple2', _0: ra, _1: rb };\n\t\tif (_p4._0.ctor === 'Ok') {\n\t\t\tif (_p4._1.ctor === 'Ok') {\n\t\t\t\treturn _elm_lang$core$Result$Ok(A2(func, _p4._0._0, _p4._1._0));\n\t\t\t} else {\n\t\t\t\treturn _elm_lang$core$Result$Err(_p4._1._0);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p4._0._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$map3 = F4(function (func, ra, rb, rc) {\n\t\tvar _p5 = { ctor: '_Tuple3', _0: ra, _1: rb, _2: rc };\n\t\tif (_p5._0.ctor === 'Ok') {\n\t\t\tif (_p5._1.ctor === 'Ok') {\n\t\t\t\tif (_p5._2.ctor === 'Ok') {\n\t\t\t\t\treturn _elm_lang$core$Result$Ok(A3(func, _p5._0._0, _p5._1._0, _p5._2._0));\n\t\t\t\t} else {\n\t\t\t\t\treturn _elm_lang$core$Result$Err(_p5._2._0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn _elm_lang$core$Result$Err(_p5._1._0);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p5._0._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$map4 = F5(function (func, ra, rb, rc, rd) {\n\t\tvar _p6 = { ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd };\n\t\tif (_p6._0.ctor === 'Ok') {\n\t\t\tif (_p6._1.ctor === 'Ok') {\n\t\t\t\tif (_p6._2.ctor === 'Ok') {\n\t\t\t\t\tif (_p6._3.ctor === 'Ok') {\n\t\t\t\t\t\treturn _elm_lang$core$Result$Ok(A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _elm_lang$core$Result$Err(_p6._3._0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn _elm_lang$core$Result$Err(_p6._2._0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn _elm_lang$core$Result$Err(_p6._1._0);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p6._0._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$map5 = F6(function (func, ra, rb, rc, rd, re) {\n\t\tvar _p7 = { ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re };\n\t\tif (_p7._0.ctor === 'Ok') {\n\t\t\tif (_p7._1.ctor === 'Ok') {\n\t\t\t\tif (_p7._2.ctor === 'Ok') {\n\t\t\t\t\tif (_p7._3.ctor === 'Ok') {\n\t\t\t\t\t\tif (_p7._4.ctor === 'Ok') {\n\t\t\t\t\t\t\treturn _elm_lang$core$Result$Ok(A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn _elm_lang$core$Result$Err(_p7._4._0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn _elm_lang$core$Result$Err(_p7._3._0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn _elm_lang$core$Result$Err(_p7._2._0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn _elm_lang$core$Result$Err(_p7._1._0);\n\t\t\t}\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(_p7._0._0);\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$mapError = F2(function (f, result) {\n\t\tvar _p8 = result;\n\t\tif (_p8.ctor === 'Ok') {\n\t\t\treturn _elm_lang$core$Result$Ok(_p8._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(f(_p8._0));\n\t\t}\n\t});\n\tvar _elm_lang$core$Result$fromMaybe = F2(function (err, maybe) {\n\t\tvar _p9 = maybe;\n\t\tif (_p9.ctor === 'Just') {\n\t\t\treturn _elm_lang$core$Result$Ok(_p9._0);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Result$Err(err);\n\t\t}\n\t});\n\n\t//import Native.Utils //\n\n\tvar _elm_lang$core$Native_Debug = function () {\n\n\t\tfunction log(tag, value) {\n\t\t\tvar msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);\n\t\t\tvar process = process || {};\n\t\t\tif (process.stdout) {\n\t\t\t\tprocess.stdout.write(msg);\n\t\t\t} else {\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tfunction crash(message) {\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\treturn {\n\t\t\tcrash: crash,\n\t\t\tlog: F2(log)\n\t\t};\n\t}();\n\t//import Maybe, Native.List, Native.Utils, Result //\n\n\tvar _elm_lang$core$Native_String = function () {\n\n\t\tfunction isEmpty(str) {\n\t\t\treturn str.length === 0;\n\t\t}\n\t\tfunction cons(chr, str) {\n\t\t\treturn chr + str;\n\t\t}\n\t\tfunction uncons(str) {\n\t\t\tvar hd = str[0];\n\t\t\tif (hd) {\n\t\t\t\treturn _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));\n\t\t\t}\n\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t}\n\t\tfunction append(a, b) {\n\t\t\treturn a + b;\n\t\t}\n\t\tfunction concat(strs) {\n\t\t\treturn _elm_lang$core$Native_List.toArray(strs).join('');\n\t\t}\n\t\tfunction length(str) {\n\t\t\treturn str.length;\n\t\t}\n\t\tfunction map(f, str) {\n\t\t\tvar out = str.split('');\n\t\t\tfor (var i = out.length; i--;) {\n\t\t\t\tout[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));\n\t\t\t}\n\t\t\treturn out.join('');\n\t\t}\n\t\tfunction filter(pred, str) {\n\t\t\treturn str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');\n\t\t}\n\t\tfunction reverse(str) {\n\t\t\treturn str.split('').reverse().join('');\n\t\t}\n\t\tfunction foldl(f, b, str) {\n\t\t\tvar len = str.length;\n\t\t\tfor (var i = 0; i < len; ++i) {\n\t\t\t\tb = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t\tfunction foldr(f, b, str) {\n\t\t\tfor (var i = str.length; i--;) {\n\t\t\t\tb = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);\n\t\t\t}\n\t\t\treturn b;\n\t\t}\n\t\tfunction split(sep, str) {\n\t\t\treturn _elm_lang$core$Native_List.fromArray(str.split(sep));\n\t\t}\n\t\tfunction join(sep, strs) {\n\t\t\treturn _elm_lang$core$Native_List.toArray(strs).join(sep);\n\t\t}\n\t\tfunction repeat(n, str) {\n\t\t\tvar result = '';\n\t\t\twhile (n > 0) {\n\t\t\t\tif (n & 1) {\n\t\t\t\t\tresult += str;\n\t\t\t\t}\n\t\t\t\tn >>= 1, str += str;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\tfunction slice(start, end, str) {\n\t\t\treturn str.slice(start, end);\n\t\t}\n\t\tfunction left(n, str) {\n\t\t\treturn n < 1 ? '' : str.slice(0, n);\n\t\t}\n\t\tfunction right(n, str) {\n\t\t\treturn n < 1 ? '' : str.slice(-n);\n\t\t}\n\t\tfunction dropLeft(n, str) {\n\t\t\treturn n < 1 ? str : str.slice(n);\n\t\t}\n\t\tfunction dropRight(n, str) {\n\t\t\treturn n < 1 ? str : str.slice(0, -n);\n\t\t}\n\t\tfunction pad(n, chr, str) {\n\t\t\tvar half = (n - str.length) / 2;\n\t\t\treturn repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);\n\t\t}\n\t\tfunction padRight(n, chr, str) {\n\t\t\treturn str + repeat(n - str.length, chr);\n\t\t}\n\t\tfunction padLeft(n, chr, str) {\n\t\t\treturn repeat(n - str.length, chr) + str;\n\t\t}\n\n\t\tfunction trim(str) {\n\t\t\treturn str.trim();\n\t\t}\n\t\tfunction trimLeft(str) {\n\t\t\treturn str.replace(/^\\s+/, '');\n\t\t}\n\t\tfunction trimRight(str) {\n\t\t\treturn str.replace(/\\s+$/, '');\n\t\t}\n\n\t\tfunction words(str) {\n\t\t\treturn _elm_lang$core$Native_List.fromArray(str.trim().split(/\\s+/g));\n\t\t}\n\t\tfunction lines(str) {\n\t\t\treturn _elm_lang$core$Native_List.fromArray(str.split(/\\r\\n|\\r|\\n/g));\n\t\t}\n\n\t\tfunction toUpper(str) {\n\t\t\treturn str.toUpperCase();\n\t\t}\n\t\tfunction toLower(str) {\n\t\t\treturn str.toLowerCase();\n\t\t}\n\n\t\tfunction any(pred, str) {\n\t\t\tfor (var i = str.length; i--;) {\n\t\t\t\tif (pred(_elm_lang$core$Native_Utils.chr(str[i]))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tfunction all(pred, str) {\n\t\t\tfor (var i = str.length; i--;) {\n\t\t\t\tif (!pred(_elm_lang$core$Native_Utils.chr(str[i]))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction contains(sub, str) {\n\t\t\treturn str.indexOf(sub) > -1;\n\t\t}\n\t\tfunction startsWith(sub, str) {\n\t\t\treturn str.indexOf(sub) === 0;\n\t\t}\n\t\tfunction endsWith(sub, str) {\n\t\t\treturn str.length >= sub.length && str.lastIndexOf(sub) === str.length - sub.length;\n\t\t}\n\t\tfunction indexes(sub, str) {\n\t\t\tvar subLen = sub.length;\n\n\t\t\tif (subLen < 1) {\n\t\t\t\treturn _elm_lang$core$Native_List.Nil;\n\t\t\t}\n\n\t\t\tvar i = 0;\n\t\t\tvar is = [];\n\n\t\t\twhile ((i = str.indexOf(sub, i)) > -1) {\n\t\t\t\tis.push(i);\n\t\t\t\ti = i + subLen;\n\t\t\t}\n\n\t\t\treturn _elm_lang$core$Native_List.fromArray(is);\n\t\t}\n\n\t\tfunction toInt(s) {\n\t\t\tvar len = s.length;\n\n\t\t\t// if empty\n\t\t\tif (len === 0) {\n\t\t\t\treturn intErr(s);\n\t\t\t}\n\n\t\t\t// if hex\n\t\t\tvar c = s[0];\n\t\t\tif (c === '0' && s[1] === 'x') {\n\t\t\t\tfor (var i = 2; i < len; ++i) {\n\t\t\t\t\tvar c = s[i];\n\t\t\t\t\tif ('0' <= c && c <= '9' || 'A' <= c && c <= 'F' || 'a' <= c && c <= 'f') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\treturn intErr(s);\n\t\t\t\t}\n\t\t\t\treturn _elm_lang$core$Result$Ok(parseInt(s, 16));\n\t\t\t}\n\n\t\t\t// is decimal\n\t\t\tif (c > '9' || c < '0' && c !== '-' && c !== '+') {\n\t\t\t\treturn intErr(s);\n\t\t\t}\n\t\t\tfor (var i = 1; i < len; ++i) {\n\t\t\t\tvar c = s[i];\n\t\t\t\tif (c < '0' || '9' < c) {\n\t\t\t\t\treturn intErr(s);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _elm_lang$core$Result$Ok(parseInt(s, 10));\n\t\t}\n\n\t\tfunction intErr(s) {\n\t\t\treturn _elm_lang$core$Result$Err(\"could not convert string '\" + s + \"' to an Int\");\n\t\t}\n\n\t\tfunction toFloat(s) {\n\t\t\t// check if it is a hex, octal, or binary number\n\t\t\tif (s.length === 0 || /[\\sxbo]/.test(s)) {\n\t\t\t\treturn floatErr(s);\n\t\t\t}\n\t\t\tvar n = +s;\n\t\t\t// faster isNaN check\n\t\t\treturn n === n ? _elm_lang$core$Result$Ok(n) : floatErr(s);\n\t\t}\n\n\t\tfunction floatErr(s) {\n\t\t\treturn _elm_lang$core$Result$Err(\"could not convert string '\" + s + \"' to a Float\");\n\t\t}\n\n\t\tfunction toList(str) {\n\t\t\treturn _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));\n\t\t}\n\t\tfunction fromList(chars) {\n\t\t\treturn _elm_lang$core$Native_List.toArray(chars).join('');\n\t\t}\n\n\t\treturn {\n\t\t\tisEmpty: isEmpty,\n\t\t\tcons: F2(cons),\n\t\t\tuncons: uncons,\n\t\t\tappend: F2(append),\n\t\t\tconcat: concat,\n\t\t\tlength: length,\n\t\t\tmap: F2(map),\n\t\t\tfilter: F2(filter),\n\t\t\treverse: reverse,\n\t\t\tfoldl: F3(foldl),\n\t\t\tfoldr: F3(foldr),\n\n\t\t\tsplit: F2(split),\n\t\t\tjoin: F2(join),\n\t\t\trepeat: F2(repeat),\n\n\t\t\tslice: F3(slice),\n\t\t\tleft: F2(left),\n\t\t\tright: F2(right),\n\t\t\tdropLeft: F2(dropLeft),\n\t\t\tdropRight: F2(dropRight),\n\n\t\t\tpad: F3(pad),\n\t\t\tpadLeft: F3(padLeft),\n\t\t\tpadRight: F3(padRight),\n\n\t\t\ttrim: trim,\n\t\t\ttrimLeft: trimLeft,\n\t\t\ttrimRight: trimRight,\n\n\t\t\twords: words,\n\t\t\tlines: lines,\n\n\t\t\ttoUpper: toUpper,\n\t\t\ttoLower: toLower,\n\n\t\t\tany: F2(any),\n\t\t\tall: F2(all),\n\n\t\t\tcontains: F2(contains),\n\t\t\tstartsWith: F2(startsWith),\n\t\t\tendsWith: F2(endsWith),\n\t\t\tindexes: F2(indexes),\n\n\t\t\ttoInt: toInt,\n\t\t\ttoFloat: toFloat,\n\t\t\ttoList: toList,\n\t\t\tfromList: fromList\n\t\t};\n\t}();\n\n\tvar _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;\n\tvar _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;\n\tvar _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;\n\tvar _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;\n\tvar _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;\n\tvar _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;\n\tvar _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;\n\tvar _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;\n\tvar _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;\n\tvar _elm_lang$core$String$all = _elm_lang$core$Native_String.all;\n\tvar _elm_lang$core$String$any = _elm_lang$core$Native_String.any;\n\tvar _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;\n\tvar _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;\n\tvar _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;\n\tvar _elm_lang$core$String$words = _elm_lang$core$Native_String.words;\n\tvar _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;\n\tvar _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;\n\tvar _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;\n\tvar _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;\n\tvar _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;\n\tvar _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;\n\tvar _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;\n\tvar _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;\n\tvar _elm_lang$core$String$right = _elm_lang$core$Native_String.right;\n\tvar _elm_lang$core$String$left = _elm_lang$core$Native_String.left;\n\tvar _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;\n\tvar _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;\n\tvar _elm_lang$core$String$join = _elm_lang$core$Native_String.join;\n\tvar _elm_lang$core$String$split = _elm_lang$core$Native_String.split;\n\tvar _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;\n\tvar _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;\n\tvar _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;\n\tvar _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;\n\tvar _elm_lang$core$String$map = _elm_lang$core$Native_String.map;\n\tvar _elm_lang$core$String$length = _elm_lang$core$Native_String.length;\n\tvar _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;\n\tvar _elm_lang$core$String$append = _elm_lang$core$Native_String.append;\n\tvar _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;\n\tvar _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;\n\tvar _elm_lang$core$String$fromChar = function _elm_lang$core$String$fromChar($char) {\n\t\treturn A2(_elm_lang$core$String$cons, $char, '');\n\t};\n\tvar _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;\n\n\tvar _elm_lang$core$Dict$foldr = F3(function (f, acc, t) {\n\t\tfoldr: while (true) {\n\t\t\tvar _p0 = t;\n\t\t\tif (_p0.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar _v1 = f,\n\t\t\t\t    _v2 = A3(f, _p0._1, _p0._2, A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),\n\t\t\t\t    _v3 = _p0._3;\n\t\t\t\tf = _v1;\n\t\t\t\tacc = _v2;\n\t\t\t\tt = _v3;\n\t\t\t\tcontinue foldr;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$keys = function _elm_lang$core$Dict$keys(dict) {\n\t\treturn A3(_elm_lang$core$Dict$foldr, F3(function (key, value, keyList) {\n\t\t\treturn { ctor: '::', _0: key, _1: keyList };\n\t\t}), { ctor: '[]' }, dict);\n\t};\n\tvar _elm_lang$core$Dict$values = function _elm_lang$core$Dict$values(dict) {\n\t\treturn A3(_elm_lang$core$Dict$foldr, F3(function (key, value, valueList) {\n\t\t\treturn { ctor: '::', _0: value, _1: valueList };\n\t\t}), { ctor: '[]' }, dict);\n\t};\n\tvar _elm_lang$core$Dict$toList = function _elm_lang$core$Dict$toList(dict) {\n\t\treturn A3(_elm_lang$core$Dict$foldr, F3(function (key, value, list) {\n\t\t\treturn {\n\t\t\t\tctor: '::',\n\t\t\t\t_0: { ctor: '_Tuple2', _0: key, _1: value },\n\t\t\t\t_1: list\n\t\t\t};\n\t\t}), { ctor: '[]' }, dict);\n\t};\n\tvar _elm_lang$core$Dict$foldl = F3(function (f, acc, dict) {\n\t\tfoldl: while (true) {\n\t\t\tvar _p1 = dict;\n\t\t\tif (_p1.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn acc;\n\t\t\t} else {\n\t\t\t\tvar _v5 = f,\n\t\t\t\t    _v6 = A3(f, _p1._1, _p1._2, A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),\n\t\t\t\t    _v7 = _p1._4;\n\t\t\t\tf = _v5;\n\t\t\t\tacc = _v6;\n\t\t\t\tdict = _v7;\n\t\t\t\tcontinue foldl;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$merge = F6(function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {\n\t\tvar stepState = F3(function (rKey, rValue, _p2) {\n\t\t\tstepState: while (true) {\n\t\t\t\tvar _p3 = _p2;\n\t\t\t\tvar _p9 = _p3._1;\n\t\t\t\tvar _p8 = _p3._0;\n\t\t\t\tvar _p4 = _p8;\n\t\t\t\tif (_p4.ctor === '[]') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t_0: _p8,\n\t\t\t\t\t\t_1: A3(rightStep, rKey, rValue, _p9)\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tvar _p7 = _p4._1;\n\t\t\t\t\tvar _p6 = _p4._0._1;\n\t\t\t\t\tvar _p5 = _p4._0._0;\n\t\t\t\t\tif (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) {\n\t\t\t\t\t\tvar _v10 = rKey,\n\t\t\t\t\t\t    _v11 = rValue,\n\t\t\t\t\t\t    _v12 = {\n\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t_0: _p7,\n\t\t\t\t\t\t\t_1: A3(leftStep, _p5, _p6, _p9)\n\t\t\t\t\t\t};\n\t\t\t\t\t\trKey = _v10;\n\t\t\t\t\t\trValue = _v11;\n\t\t\t\t\t\t_p2 = _v12;\n\t\t\t\t\t\tcontinue stepState;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t_0: _p8,\n\t\t\t\t\t\t\t\t_1: A3(rightStep, rKey, rValue, _p9)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t_0: _p7,\n\t\t\t\t\t\t\t\t_1: A4(bothStep, _p5, _p6, rValue, _p9)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar _p10 = A3(_elm_lang$core$Dict$foldl, stepState, {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: _elm_lang$core$Dict$toList(leftDict),\n\t\t\t_1: initialResult\n\t\t}, rightDict);\n\t\tvar leftovers = _p10._0;\n\t\tvar intermediateResult = _p10._1;\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (_p11, result) {\n\t\t\tvar _p12 = _p11;\n\t\t\treturn A3(leftStep, _p12._0, _p12._1, result);\n\t\t}), intermediateResult, leftovers);\n\t});\n\tvar _elm_lang$core$Dict$reportRemBug = F4(function (msg, c, lgot, rgot) {\n\t\treturn _elm_lang$core$Native_Debug.crash(_elm_lang$core$String$concat({\n\t\t\tctor: '::',\n\t\t\t_0: 'Internal red-black tree invariant violated, expected ',\n\t\t\t_1: {\n\t\t\t\tctor: '::',\n\t\t\t\t_0: msg,\n\t\t\t\t_1: {\n\t\t\t\t\tctor: '::',\n\t\t\t\t\t_0: ' and got ',\n\t\t\t\t\t_1: {\n\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t_0: _elm_lang$core$Basics$toString(c),\n\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t_0: '/',\n\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t_0: lgot,\n\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t_0: '/',\n\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t_0: rgot,\n\t\t\t\t\t\t\t\t\t\t_1: {\n\t\t\t\t\t\t\t\t\t\t\tctor: '::',\n\t\t\t\t\t\t\t\t\t\t\t_0: '\\nPlease report this bug to <https://github.com/elm-lang/core/issues>',\n\t\t\t\t\t\t\t\t\t\t\t_1: { ctor: '[]' }\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t});\n\tvar _elm_lang$core$Dict$isBBlack = function _elm_lang$core$Dict$isBBlack(dict) {\n\t\tvar _p13 = dict;\n\t\t_v14_2: do {\n\t\t\tif (_p13.ctor === 'RBNode_elm_builtin') {\n\t\t\t\tif (_p13._0.ctor === 'BBlack') {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tbreak _v14_2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_p13._0.ctor === 'LBBlack') {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tbreak _v14_2;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (false);\n\t\treturn false;\n\t};\n\tvar _elm_lang$core$Dict$sizeHelp = F2(function (n, dict) {\n\t\tsizeHelp: while (true) {\n\t\t\tvar _p14 = dict;\n\t\t\tif (_p14.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn n;\n\t\t\t} else {\n\t\t\t\tvar _v16 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),\n\t\t\t\t    _v17 = _p14._3;\n\t\t\t\tn = _v16;\n\t\t\t\tdict = _v17;\n\t\t\t\tcontinue sizeHelp;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$size = function _elm_lang$core$Dict$size(dict) {\n\t\treturn A2(_elm_lang$core$Dict$sizeHelp, 0, dict);\n\t};\n\tvar _elm_lang$core$Dict$get = F2(function (targetKey, dict) {\n\t\tget: while (true) {\n\t\t\tvar _p15 = dict;\n\t\t\tif (_p15.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn _elm_lang$core$Maybe$Nothing;\n\t\t\t} else {\n\t\t\t\tvar _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);\n\t\t\t\tswitch (_p16.ctor) {\n\t\t\t\t\tcase 'LT':\n\t\t\t\t\t\tvar _v20 = targetKey,\n\t\t\t\t\t\t    _v21 = _p15._3;\n\t\t\t\t\t\ttargetKey = _v20;\n\t\t\t\t\t\tdict = _v21;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t\tcase 'EQ':\n\t\t\t\t\t\treturn _elm_lang$core$Maybe$Just(_p15._2);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar _v22 = targetKey,\n\t\t\t\t\t\t    _v23 = _p15._4;\n\t\t\t\t\t\ttargetKey = _v22;\n\t\t\t\t\t\tdict = _v23;\n\t\t\t\t\t\tcontinue get;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$member = F2(function (key, dict) {\n\t\tvar _p17 = A2(_elm_lang$core$Dict$get, key, dict);\n\t\tif (_p17.ctor === 'Just') {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$maxWithDefault = F3(function (k, v, r) {\n\t\tmaxWithDefault: while (true) {\n\t\t\tvar _p18 = r;\n\t\t\tif (_p18.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\treturn { ctor: '_Tuple2', _0: k, _1: v };\n\t\t\t} else {\n\t\t\t\tvar _v26 = _p18._1,\n\t\t\t\t    _v27 = _p18._2,\n\t\t\t\t    _v28 = _p18._4;\n\t\t\t\tk = _v26;\n\t\t\t\tv = _v27;\n\t\t\t\tr = _v28;\n\t\t\t\tcontinue maxWithDefault;\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$NBlack = { ctor: 'NBlack' };\n\tvar _elm_lang$core$Dict$BBlack = { ctor: 'BBlack' };\n\tvar _elm_lang$core$Dict$Black = { ctor: 'Black' };\n\tvar _elm_lang$core$Dict$blackish = function _elm_lang$core$Dict$blackish(t) {\n\t\tvar _p19 = t;\n\t\tif (_p19.ctor === 'RBNode_elm_builtin') {\n\t\t\tvar _p20 = _p19._0;\n\t\t\treturn _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$Red = { ctor: 'Red' };\n\tvar _elm_lang$core$Dict$moreBlack = function _elm_lang$core$Dict$moreBlack(color) {\n\t\tvar _p21 = color;\n\t\tswitch (_p21.ctor) {\n\t\t\tcase 'Black':\n\t\t\t\treturn _elm_lang$core$Dict$BBlack;\n\t\t\tcase 'Red':\n\t\t\t\treturn _elm_lang$core$Dict$Black;\n\t\t\tcase 'NBlack':\n\t\t\t\treturn _elm_lang$core$Dict$Red;\n\t\t\tdefault:\n\t\t\t\treturn _elm_lang$core$Native_Debug.crash('Can\\'t make a double black node more black!');\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$lessBlack = function _elm_lang$core$Dict$lessBlack(color) {\n\t\tvar _p22 = color;\n\t\tswitch (_p22.ctor) {\n\t\t\tcase 'BBlack':\n\t\t\t\treturn _elm_lang$core$Dict$Black;\n\t\t\tcase 'Black':\n\t\t\t\treturn _elm_lang$core$Dict$Red;\n\t\t\tcase 'Red':\n\t\t\t\treturn _elm_lang$core$Dict$NBlack;\n\t\t\tdefault:\n\t\t\t\treturn _elm_lang$core$Native_Debug.crash('Can\\'t make a negative black node less black!');\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$LBBlack = { ctor: 'LBBlack' };\n\tvar _elm_lang$core$Dict$LBlack = { ctor: 'LBlack' };\n\tvar _elm_lang$core$Dict$RBEmpty_elm_builtin = function _elm_lang$core$Dict$RBEmpty_elm_builtin(a) {\n\t\treturn { ctor: 'RBEmpty_elm_builtin', _0: a };\n\t};\n\tvar _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);\n\tvar _elm_lang$core$Dict$isEmpty = function _elm_lang$core$Dict$isEmpty(dict) {\n\t\treturn _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);\n\t};\n\tvar _elm_lang$core$Dict$RBNode_elm_builtin = F5(function (a, b, c, d, e) {\n\t\treturn { ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e };\n\t});\n\tvar _elm_lang$core$Dict$ensureBlackRoot = function _elm_lang$core$Dict$ensureBlackRoot(dict) {\n\t\tvar _p23 = dict;\n\t\tif (_p23.ctor === 'RBNode_elm_builtin' && _p23._0.ctor === 'Red') {\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);\n\t\t} else {\n\t\t\treturn dict;\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$lessBlackTree = function _elm_lang$core$Dict$lessBlackTree(dict) {\n\t\tvar _p24 = dict;\n\t\tif (_p24.ctor === 'RBNode_elm_builtin') {\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$lessBlack(_p24._0), _p24._1, _p24._2, _p24._3, _p24._4);\n\t\t} else {\n\t\t\treturn _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$balancedTree = function _elm_lang$core$Dict$balancedTree(col) {\n\t\treturn function (xk) {\n\t\t\treturn function (xv) {\n\t\t\t\treturn function (yk) {\n\t\t\t\t\treturn function (yv) {\n\t\t\t\t\t\treturn function (zk) {\n\t\t\t\t\t\t\treturn function (zv) {\n\t\t\t\t\t\t\t\treturn function (a) {\n\t\t\t\t\t\t\t\t\treturn function (b) {\n\t\t\t\t\t\t\t\t\t\treturn function (c) {\n\t\t\t\t\t\t\t\t\t\t\treturn function (d) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$lessBlack(col), yk, yv, A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b), A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n\tvar _elm_lang$core$Dict$blacken = function _elm_lang$core$Dict$blacken(t) {\n\t\tvar _p25 = t;\n\t\tif (_p25.ctor === 'RBEmpty_elm_builtin') {\n\t\t\treturn _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);\n\t\t} else {\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$redden = function _elm_lang$core$Dict$redden(t) {\n\t\tvar _p26 = t;\n\t\tif (_p26.ctor === 'RBEmpty_elm_builtin') {\n\t\t\treturn _elm_lang$core$Native_Debug.crash('can\\'t make a Leaf red');\n\t\t} else {\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);\n\t\t}\n\t};\n\tvar _elm_lang$core$Dict$balanceHelp = function _elm_lang$core$Dict$balanceHelp(tree) {\n\t\tvar _p27 = tree;\n\t\t_v36_6: do {\n\t\t\t_v36_5: do {\n\t\t\t\t_v36_4: do {\n\t\t\t\t\t_v36_3: do {\n\t\t\t\t\t\t_v36_2: do {\n\t\t\t\t\t\t\t_v36_1: do {\n\t\t\t\t\t\t\t\t_v36_0: do {\n\t\t\t\t\t\t\t\t\tif (_p27.ctor === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\t\t\t\tif (_p27._3.ctor === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\t\t\t\t\tif (_p27._4.ctor === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._3._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._4._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Black' && _p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._4._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Black' && _p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Black' && _p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Black' && _p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Black' && _p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._4._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Black' && _p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._3._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._3._3.ctor === 'RBNode_elm_builtin' && _p27._3._3._0.ctor === 'Black' && _p27._3._4.ctor === 'RBNode_elm_builtin' && _p27._3._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (_p27._4.ctor === 'RBNode_elm_builtin') {\n\t\t\t\t\t\t\t\t\t\t\t\tswitch (_p27._4._0.ctor) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_2;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Red') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_3;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcase 'NBlack':\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (_p27._0.ctor === 'BBlack' && _p27._4._3.ctor === 'RBNode_elm_builtin' && _p27._4._3._0.ctor === 'Black' && _p27._4._4.ctor === 'RBNode_elm_builtin' && _p27._4._4._0.ctor === 'Black') {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_4;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbreak _v36_6;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} while (false);\n\t\t\t\t\t\t\t\treturn _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);\n\t\t\t\t\t\t\t} while (false);\n\t\t\t\t\t\t\treturn _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);\n\t\t\t\t\t\t} while (false);\n\t\t\t\t\t\treturn _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);\n\t\t\t\t\t} while (false);\n\t\t\t\t\treturn _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);\n\t\t\t\t} while (false);\n\t\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._4._3._1, _p27._4._3._2, A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3), A5(_elm_lang$core$Dict$balance, _elm_lang$core$Dict$Black, _p27._4._1, _p27._4._2, _p27._4._3._4, _elm_lang$core$Dict$redden(_p27._4._4)));\n\t\t\t} while (false);\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._3._4._1, _p27._3._4._2, A5(_elm_lang$core$Dict$balance, _elm_lang$core$Dict$Black, _p27._3._1, _p27._3._2, _elm_lang$core$Dict$redden(_p27._3._3), _p27._3._4._3), A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));\n\t\t} while (false);\n\t\treturn tree;\n\t};\n\tvar _elm_lang$core$Dict$balance = F5(function (c, k, v, l, r) {\n\t\tvar tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);\n\t\treturn _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;\n\t});\n\tvar _elm_lang$core$Dict$bubble = F5(function (c, k, v, l, r) {\n\t\treturn _elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r) ? A5(_elm_lang$core$Dict$balance, _elm_lang$core$Dict$moreBlack(c), k, v, _elm_lang$core$Dict$lessBlackTree(l), _elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);\n\t});\n\tvar _elm_lang$core$Dict$removeMax = F5(function (c, k, v, l, r) {\n\t\tvar _p28 = r;\n\t\tif (_p28.ctor === 'RBEmpty_elm_builtin') {\n\t\t\treturn A3(_elm_lang$core$Dict$rem, c, l, r);\n\t\t} else {\n\t\t\treturn A5(_elm_lang$core$Dict$bubble, c, k, v, l, A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$rem = F3(function (color, left, right) {\n\t\tvar _p29 = { ctor: '_Tuple2', _0: left, _1: right };\n\t\tif (_p29._0.ctor === 'RBEmpty_elm_builtin') {\n\t\t\tif (_p29._1.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\tvar _p30 = color;\n\t\t\t\tswitch (_p30.ctor) {\n\t\t\t\t\tcase 'Red':\n\t\t\t\t\t\treturn _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);\n\t\t\t\t\tcase 'Black':\n\t\t\t\t\t\treturn _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _p33 = _p29._1._0;\n\t\t\t\tvar _p32 = _p29._0._0;\n\t\t\t\tvar _p31 = { ctor: '_Tuple3', _0: color, _1: _p32, _2: _p33 };\n\t\t\t\tif (_p31.ctor === '_Tuple3' && _p31._0.ctor === 'Black' && _p31._1.ctor === 'LBlack' && _p31._2.ctor === 'Red') {\n\t\t\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);\n\t\t\t\t} else {\n\t\t\t\t\treturn A4(_elm_lang$core$Dict$reportRemBug, 'Black/LBlack/Red', color, _elm_lang$core$Basics$toString(_p32), _elm_lang$core$Basics$toString(_p33));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (_p29._1.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\tvar _p36 = _p29._1._0;\n\t\t\t\tvar _p35 = _p29._0._0;\n\t\t\t\tvar _p34 = { ctor: '_Tuple3', _0: color, _1: _p35, _2: _p36 };\n\t\t\t\tif (_p34.ctor === '_Tuple3' && _p34._0.ctor === 'Black' && _p34._1.ctor === 'Red' && _p34._2.ctor === 'LBlack') {\n\t\t\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);\n\t\t\t\t} else {\n\t\t\t\t\treturn A4(_elm_lang$core$Dict$reportRemBug, 'Black/Red/LBlack', color, _elm_lang$core$Basics$toString(_p35), _elm_lang$core$Basics$toString(_p36));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _p40 = _p29._0._2;\n\t\t\t\tvar _p39 = _p29._0._4;\n\t\t\t\tvar _p38 = _p29._0._1;\n\t\t\t\tvar newLeft = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);\n\t\t\t\tvar _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);\n\t\t\t\tvar k = _p37._0;\n\t\t\t\tvar v = _p37._1;\n\t\t\t\treturn A5(_elm_lang$core$Dict$bubble, color, k, v, newLeft, right);\n\t\t\t}\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$map = F2(function (f, dict) {\n\t\tvar _p41 = dict;\n\t\tif (_p41.ctor === 'RBEmpty_elm_builtin') {\n\t\t\treturn _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);\n\t\t} else {\n\t\t\tvar _p42 = _p41._1;\n\t\t\treturn A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p41._0, _p42, A2(f, _p42, _p41._2), A2(_elm_lang$core$Dict$map, f, _p41._3), A2(_elm_lang$core$Dict$map, f, _p41._4));\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$Same = { ctor: 'Same' };\n\tvar _elm_lang$core$Dict$Remove = { ctor: 'Remove' };\n\tvar _elm_lang$core$Dict$Insert = { ctor: 'Insert' };\n\tvar _elm_lang$core$Dict$update = F3(function (k, alter, dict) {\n\t\tvar up = function up(dict) {\n\t\t\tvar _p43 = dict;\n\t\t\tif (_p43.ctor === 'RBEmpty_elm_builtin') {\n\t\t\t\tvar _p44 = alter(_elm_lang$core$Maybe$Nothing);\n\t\t\t\tif (_p44.ctor === 'Nothing') {\n\t\t\t\t\treturn { ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty };\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t_0: _elm_lang$core$Dict$Insert,\n\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _p55 = _p43._2;\n\t\t\t\tvar _p54 = _p43._4;\n\t\t\t\tvar _p53 = _p43._3;\n\t\t\t\tvar _p52 = _p43._1;\n\t\t\t\tvar _p51 = _p43._0;\n\t\t\t\tvar _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);\n\t\t\t\tswitch (_p45.ctor) {\n\t\t\t\t\tcase 'EQ':\n\t\t\t\t\t\tvar _p46 = alter(_elm_lang$core$Maybe$Just(_p55));\n\t\t\t\t\t\tif (_p46.ctor === 'Nothing') {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Remove,\n\t\t\t\t\t\t\t\t_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Same,\n\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\tcase 'LT':\n\t\t\t\t\t\tvar _p47 = up(_p53);\n\t\t\t\t\t\tvar flag = _p47._0;\n\t\t\t\t\t\tvar newLeft = _p47._1;\n\t\t\t\t\t\tvar _p48 = flag;\n\t\t\t\t\t\tswitch (_p48.ctor) {\n\t\t\t\t\t\t\tcase 'Same':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Same,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'Insert':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Insert,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Remove,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar _p49 = up(_p54);\n\t\t\t\t\t\tvar flag = _p49._0;\n\t\t\t\t\t\tvar newRight = _p49._1;\n\t\t\t\t\t\tvar _p50 = flag;\n\t\t\t\t\t\tswitch (_p50.ctor) {\n\t\t\t\t\t\t\tcase 'Same':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Same,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcase 'Insert':\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Insert,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tctor: '_Tuple2',\n\t\t\t\t\t\t\t\t\t_0: _elm_lang$core$Dict$Remove,\n\t\t\t\t\t\t\t\t\t_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tvar _p56 = up(dict);\n\t\tvar flag = _p56._0;\n\t\tvar updatedDict = _p56._1;\n\t\tvar _p57 = flag;\n\t\tswitch (_p57.ctor) {\n\t\t\tcase 'Same':\n\t\t\t\treturn updatedDict;\n\t\t\tcase 'Insert':\n\t\t\t\treturn _elm_lang$core$Dict$ensureBlackRoot(updatedDict);\n\t\t\tdefault:\n\t\t\t\treturn _elm_lang$core$Dict$blacken(updatedDict);\n\t\t}\n\t});\n\tvar _elm_lang$core$Dict$insert = F3(function (key, value, dict) {\n\t\treturn A3(_elm_lang$core$Dict$update, key, _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Just(value)), dict);\n\t});\n\tvar _elm_lang$core$Dict$singleton = F2(function (key, value) {\n\t\treturn A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);\n\t});\n\tvar _elm_lang$core$Dict$union = F2(function (t1, t2) {\n\t\treturn A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);\n\t});\n\tvar _elm_lang$core$Dict$filter = F2(function (predicate, dictionary) {\n\t\tvar add = F3(function (key, value, dict) {\n\t\t\treturn A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;\n\t\t});\n\t\treturn A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);\n\t});\n\tvar _elm_lang$core$Dict$intersect = F2(function (t1, t2) {\n\t\treturn A2(_elm_lang$core$Dict$filter, F2(function (k, _p58) {\n\t\t\treturn A2(_elm_lang$core$Dict$member, k, t2);\n\t\t}), t1);\n\t});\n\tvar _elm_lang$core$Dict$partition = F2(function (predicate, dict) {\n\t\tvar add = F3(function (key, value, _p59) {\n\t\t\tvar _p60 = _p59;\n\t\t\tvar _p62 = _p60._1;\n\t\t\tvar _p61 = _p60._0;\n\t\t\treturn A2(predicate, key, value) ? {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),\n\t\t\t\t_1: _p62\n\t\t\t} : {\n\t\t\t\tctor: '_Tuple2',\n\t\t\t\t_0: _p61,\n\t\t\t\t_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)\n\t\t\t};\n\t\t});\n\t\treturn A3(_elm_lang$core$Dict$foldl, add, { ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty }, dict);\n\t});\n\tvar _elm_lang$core$Dict$fromList = function _elm_lang$core$Dict$fromList(assocs) {\n\t\treturn A3(_elm_lang$core$List$foldl, F2(function (_p63, dict) {\n\t\t\tvar _p64 = _p63;\n\t\t\treturn A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);\n\t\t}), _elm_lang$core$Dict$empty, assocs);\n\t};\n\tvar _elm_lang$core$Dict$remove = F2(function (key, dict) {\n\t\treturn A3(_elm_lang$core$Dict$update, key, _elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing), dict);\n\t});\n\tvar _elm_lang$core$Dict$diff = F2(function (t1, t2) {\n\t\treturn A3(_elm_lang$core$Dict$foldl, F3(function (k, v, t) {\n\t\t\treturn A2(_elm_lang$core$Dict$remove, k, t);\n\t\t}), t1, t2);\n\t});\n\n\tvar _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;\n\tvar _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;\n\n\t//import Maybe, Native.Array, Native.List, Native.Utils, Result //\n\n\tvar _elm_lang$core$Native_Json = function () {\n\n\t\t// CORE DECODERS\n\n\t\tfunction succeed(msg) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'succeed',\n\t\t\t\tmsg: msg\n\t\t\t};\n\t\t}\n\n\t\tfunction fail(msg) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'fail',\n\t\t\t\tmsg: msg\n\t\t\t};\n\t\t}\n\n\t\tfunction decodePrimitive(tag) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: tag\n\t\t\t};\n\t\t}\n\n\t\tfunction decodeContainer(tag, decoder) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: tag,\n\t\t\t\tdecoder: decoder\n\t\t\t};\n\t\t}\n\n\t\tfunction decodeNull(value) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'null',\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tfunction decodeField(field, decoder) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'field',\n\t\t\t\tfield: field,\n\t\t\t\tdecoder: decoder\n\t\t\t};\n\t\t}\n\n\t\tfunction decodeIndex(index, decoder) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'index',\n\t\t\t\tindex: index,\n\t\t\t\tdecoder: decoder\n\t\t\t};\n\t\t}\n\n\t\tfunction decodeKeyValuePairs(decoder) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'key-value',\n\t\t\t\tdecoder: decoder\n\t\t\t};\n\t\t}\n\n\t\tfunction mapMany(f, decoders) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'map-many',\n\t\t\t\tfunc: f,\n\t\t\t\tdecoders: decoders\n\t\t\t};\n\t\t}\n\n\t\tfunction andThen(callback, decoder) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'andThen',\n\t\t\t\tdecoder: decoder,\n\t\t\t\tcallback: callback\n\t\t\t};\n\t\t}\n\n\t\tfunction oneOf(decoders) {\n\t\t\treturn {\n\t\t\t\tctor: '<decoder>',\n\t\t\t\ttag: 'oneOf',\n\t\t\t\tdecoders: decoders\n\t\t\t};\n\t\t}\n\n\t\t// DECODING OBJECTS\n\n\t\tfunction map1(f, d1) {\n\t\t\treturn mapMany(f, [d1]);\n\t\t}\n\n\t\tfunction map2(f, d1, d2) {\n\t\t\treturn mapMany(f, [d1, d2]);\n\t\t}\n\n\t\tfunction map3(f, d1, d2, d3) {\n\t\t\treturn mapMany(f, [d1, d2, d3]);\n\t\t}\n\n\t\tfunction map4(f, d1, d2, d3, d4) {\n\t\t\treturn mapMany(f, [d1, d2, d3, d4]);\n\t\t}\n\n\t\tfunction map5(f, d1, d2, d3, d4, d5) {\n\t\t\treturn mapMany(f, [d1, d2, d3, d4, d5]);\n\t\t}\n\n\t\tfunction map6(f, d1, d2, d3, d4, d5, d6) {\n\t\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6]);\n\t\t}\n\n\t\tfunction map7(f, d1, d2, d3, d4, d5, d6, d7) {\n\t\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);\n\t\t}\n\n\t\tfunction map8(f, d1, d2, d3, d4, d5, d6, d7, d8) {\n\t\t\treturn mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);\n\t\t}\n\n\t\t// DECODE HELPERS\n\n\t\tfunction ok(value) {\n\t\t\treturn { tag: 'ok', value: value };\n\t\t}\n\n\t\tfunction badPrimitive(type, value) {\n\t\t\treturn { tag: 'primitive', type: type, value: value };\n\t\t}\n\n\t\tfunction badIndex(index, nestedProblems) {\n\t\t\treturn { tag: 'index', index: index, rest: nestedProblems };\n\t\t}\n\n\t\tfunction badField(field, nestedProblems) {\n\t\t\treturn { tag: 'field', field: field, rest: nestedProblems };\n\t\t}\n\n\t\tfunction badIndex(index, nestedProblems) {\n\t\t\treturn { tag: 'index', index: index, rest: nestedProblems };\n\t\t}\n\n\t\tfunction badOneOf(problems) {\n\t\t\treturn { tag: 'oneOf', problems: problems };\n\t\t}\n\n\t\tfunction bad(msg) {\n\t\t\treturn { tag: 'fail', msg: msg };\n\t\t}\n\n\t\tfunction badToString(problem) {\n\t\t\tvar context = '_';\n\t\t\twhile (problem) {\n\t\t\t\tswitch (problem.tag) {\n\t\t\t\t\tcase 'primitive':\n\t\t\t\t\t\treturn 'Expecting ' + problem.type + (context === '_' ? '' : ' at ' + context) + ' but instead got: ' + jsToString(problem.value);\n\n\t\t\t\t\tcase 'index':\n\t\t\t\t\t\tcontext += '[' + problem.index + ']';\n\t\t\t\t\t\tproblem = problem.rest;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'field':\n\t\t\t\t\t\tcontext += '.' + problem.field;\n\t\t\t\t\t\tproblem = problem.rest;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'oneOf':\n\t\t\t\t\t\tvar problems = problem.problems;\n\t\t\t\t\t\tfor (var i = 0; i < problems.length; i++) {\n\t\t\t\t\t\t\tproblems[i] = badToString(problems[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 'I ran into the following problems' + (context === '_' ? '' : ' at ' + context) + ':\\n\\n' + problems.join('\\n');\n\n\t\t\t\t\tcase 'fail':\n\t\t\t\t\t\treturn 'I ran into a `fail` decoder' + (context === '_' ? '' : ' at ' + context) + ': ' + problem.msg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction jsToString(value) {\n\t\t\treturn value === undefined ? 'undefined' : JSON.stringify(value);\n\t\t}\n\n\t\t// DECODE\n\n\t\tfunction runOnString(decoder, string) {\n\t\t\tvar json;\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(string);\n\t\t\t} catch (e) {\n\t\t\t\treturn _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);\n\t\t\t}\n\t\t\treturn run(decoder, json);\n\t\t}\n\n\t\tfunction run(decoder, value) {\n\t\t\tvar result = runHelp(decoder, value);\n\t\t\treturn result.tag === 'ok' ? _elm_lang$core$Result$Ok(result.value) : _elm_lang$core$Result$Err(badToString(result));\n\t\t}\n\n\t\tfunction runHelp(decoder, value) {\n\t\t\tswitch (decoder.tag) {\n\t\t\t\tcase 'bool':\n\t\t\t\t\treturn typeof value === 'boolean' ? ok(value) : badPrimitive('a Bool', value);\n\n\t\t\t\tcase 'int':\n\t\t\t\t\tif (typeof value !== 'number') {\n\t\t\t\t\t\treturn badPrimitive('an Int', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (-2147483647 < value && value < 2147483647 && (value | 0) === value) {\n\t\t\t\t\t\treturn ok(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isFinite(value) && !(value % 1)) {\n\t\t\t\t\t\treturn ok(value);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn badPrimitive('an Int', value);\n\n\t\t\t\tcase 'float':\n\t\t\t\t\treturn typeof value === 'number' ? ok(value) : badPrimitive('a Float', value);\n\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof value === 'string' ? ok(value) : value instanceof String ? ok(value + '') : badPrimitive('a String', value);\n\n\t\t\t\tcase 'null':\n\t\t\t\t\treturn value === null ? ok(decoder.value) : badPrimitive('null', value);\n\n\t\t\t\tcase 'value':\n\t\t\t\t\treturn ok(value);\n\n\t\t\t\tcase 'list':\n\t\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\t\treturn badPrimitive('a List', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar list = _elm_lang$core$Native_List.Nil;\n\t\t\t\t\tfor (var i = value.length; i--;) {\n\t\t\t\t\t\tvar result = runHelp(decoder.decoder, value[i]);\n\t\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\t\treturn badIndex(i, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlist = _elm_lang$core$Native_List.Cons(result.value, list);\n\t\t\t\t\t}\n\t\t\t\t\treturn ok(list);\n\n\t\t\t\tcase 'array':\n\t\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\t\treturn badPrimitive('an Array', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar len = value.length;\n\t\t\t\t\tvar array = new Array(len);\n\t\t\t\t\tfor (var i = len; i--;) {\n\t\t\t\t\t\tvar result = runHelp(decoder.decoder, value[i]);\n\t\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\t\treturn badIndex(i, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tarray[i] = result.value;\n\t\t\t\t\t}\n\t\t\t\t\treturn ok(_elm_lang$core$Native_Array.fromJSArray(array));\n\n\t\t\t\tcase 'maybe':\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value);\n\t\t\t\t\treturn result.tag === 'ok' ? ok(_elm_lang$core$Maybe$Just(result.value)) : ok(_elm_lang$core$Maybe$Nothing);\n\n\t\t\t\tcase 'field':\n\t\t\t\t\tvar field = decoder.field;\n\t\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || !(field in value)) {\n\t\t\t\t\t\treturn badPrimitive('an object with a field named `' + field + '`', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value[field]);\n\t\t\t\t\treturn result.tag === 'ok' ? result : badField(field, result);\n\n\t\t\t\tcase 'index':\n\t\t\t\t\tvar index = decoder.index;\n\t\t\t\t\tif (!(value instanceof Array)) {\n\t\t\t\t\t\treturn badPrimitive('an array', value);\n\t\t\t\t\t}\n\t\t\t\t\tif (index >= value.length) {\n\t\t\t\t\t\treturn badPrimitive('a longer array. Need index ' + index + ' but there are only ' + value.length + ' entries', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value[index]);\n\t\t\t\t\treturn result.tag === 'ok' ? result : badIndex(index, result);\n\n\t\t\t\tcase 'key-value':\n\t\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object' || value === null || value instanceof Array) {\n\t\t\t\t\t\treturn badPrimitive('an object', value);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar keyValuePairs = _elm_lang$core$Native_List.Nil;\n\t\t\t\t\tfor (var key in value) {\n\t\t\t\t\t\tvar result = runHelp(decoder.decoder, value[key]);\n\t\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\t\treturn badField(key, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);\n\t\t\t\t\t\tkeyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);\n\t\t\t\t\t}\n\t\t\t\t\treturn ok(keyValuePairs);\n\n\t\t\t\tcase 'map-many':\n\t\t\t\t\tvar answer = decoder.func;\n\t\t\t\t\tvar decoders = decoder.decoders;\n\t\t\t\t\tfor (var i = 0; i < decoders.length; i++) {\n\t\t\t\t\t\tvar result = runHelp(decoders[i], value);\n\t\t\t\t\t\tif (result.tag !== 'ok') {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tanswer = answer(result.value);\n\t\t\t\t\t}\n\t\t\t\t\treturn ok(answer);\n\n\t\t\t\tcase 'andThen':\n\t\t\t\t\tvar result = runHelp(decoder.decoder, value);\n\t\t\t\t\treturn result.tag !== 'ok' ? result : runHelp(decoder.callback(result.value), value);\n\n\t\t\t\tcase 'oneOf':\n\t\t\t\t\tvar errors = [];\n\t\t\t\t\tvar temp = decoder.decoders;\n\t\t\t\t\twhile (temp.ctor !== '[]') {\n\t\t\t\t\t\tvar result = runHelp(temp._0, value);\n\n\t\t\t\t\t\tif (result.tag === 'ok') {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\terrors.push(result);\n\n\t\t\t\t\t\ttemp = temp._1;\n\t\t\t\t\t}\n\t\t\t\t\treturn badOneOf(errors);\n\n\t\t\t\tcase 'fail':\n\t\t\t\t\treturn bad(decoder.msg);\n\n\t\t\t\tcase 'succeed':\n\t\t\t\t\treturn ok(decoder.msg);\n\t\t\t}\n\t\t}\n\n\t\t// EQUALITY\n\n\t\tfunction equality(a, b) {\n\t\t\tif (a === b) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (a.tag !== b.tag) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tswitch (a.tag) {\n\t\t\t\tcase 'succeed':\n\t\t\t\tcase 'fail':\n\t\t\t\t\treturn a.msg === b.msg;\n\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'float':\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'value':\n\t\t\t\t\treturn true;\n\n\t\t\t\tcase 'null':\n\t\t\t\t\treturn a.value === b.value;\n\n\t\t\t\tcase 'list':\n\t\t\t\tcase 'array':\n\t\t\t\tcase 'maybe':\n\t\t\t\tcase 'key-value':\n\t\t\t\t\treturn equality(a.decoder, b.decoder);\n\n\t\t\t\tcase 'field':\n\t\t\t\t\treturn a.field === b.field && equality(a.decoder, b.decoder);\n\n\t\t\t\tcase 'index':\n\t\t\t\t\treturn a.index === b.index && equality(a.decoder, b.decoder);\n\n\t\t\t\tcase 'map-many':\n\t\t\t\t\tif (a.func !== b.func) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn listEquality(a.decoders, b.decoders);\n\n\t\t\t\tcase 'andThen':\n\t\t\t\t\treturn a.callback === b.callback && equality(a.decoder, b.decoder);\n\n\t\t\t\tcase 'oneOf':\n\t\t\t\t\treturn listEquality(a.decoders, b.decoders);\n\t\t\t}\n\t\t}\n\n\t\tfunction listEquality(aDecoders, bDecoders) {\n\t\t\tvar len = aDecoders.length;\n\t\t\tif (len !== bDecoders.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tif (!equality(aDecoders[i], bDecoders[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// ENCODE\n\n\t\tfunction encode(indentLevel, value) {\n\t\t\treturn JSON.stringify(value, null, indentLevel);\n\t\t}\n\n\t\tfunction identity(value) {\n\t\t\treturn value;\n\t\t}\n\n\t\tfunction encodeObject(keyValuePairs) {\n\t\t\tvar obj = {};\n\t\t\twhile (keyValuePairs.ctor !== '[]') {\n\t\t\t\tvar pair = keyValuePairs._0;\n\t\t\t\tobj[pair._0] = pair._1;\n\t\t\t\tkeyValuePairs = keyValuePairs._1;\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\n\t\treturn {\n\t\t\tencode: F2(encode),\n\t\t\trunOnString: F2(runOnString),\n\t\t\trun: F2(run),\n\n\t\t\tdecodeNull: decodeNull,\n\t\t\tdecodePrimitive: decodePrimitive,\n\t\t\tdecodeContainer: F2(decodeContainer),\n\n\t\t\tdecodeField: F2(decodeField),\n\t\t\tdecodeIndex: F2(decodeIndex),\n\n\t\t\tmap1: F2(map1),\n\t\t\tmap2: F3(map2),\n\t\t\tmap3: F4(map3),\n\t\t\tmap4: F5(map4),\n\t\t\tmap5: F6(map5),\n\t\t\tmap6: F7(map6),\n\t\t\tmap7: F8(map7),\n\t\t\tmap8: F9(map8),\n\t\t\tdecodeKeyValuePairs: decodeKeyValuePairs,\n\n\t\t\tandThen: F2(andThen),\n\t\t\tfail: fail,\n\t\t\tsucceed: succeed,\n\t\t\toneOf: oneOf,\n\n\t\t\tidentity: identity,\n\t\t\tencodeNull: null,\n\t\t\tencodeArray: _elm_lang$core$Native_Array.toJSArray,\n\t\t\tencodeList: _elm_lang$core$Native_List.toArray,\n\t\t\tencodeObject: encodeObject,\n\n\t\t\tequality: equality\n\t\t};\n\t}();\n\n\tvar _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;\n\tvar _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;\n\tvar _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;\n\tvar _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;\n\tvar _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;\n\tvar _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;\n\tvar _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;\n\tvar _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;\n\tvar _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;\n\tvar _elm_lang$core$Json_Encode$Value = { ctor: 'Value' };\n\n\tvar _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;\n\tvar _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');\n\tvar _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;\n\tvar _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;\n\tvar _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;\n\tvar _elm_lang$core$Json_Decode$lazy = function _elm_lang$core$Json_Decode$lazy(thunk) {\n\t\treturn A2(_elm_lang$core$Json_Decode$andThen, thunk, _elm_lang$core$Json_Decode$succeed({ ctor: '_Tuple0' }));\n\t};\n\tvar _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;\n\tvar _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;\n\tvar _elm_lang$core$Json_Decode$map8 = _elm_lang$core$Native_Json.map8;\n\tvar _elm_lang$core$Json_Decode$map7 = _elm_lang$core$Native_Json.map7;\n\tvar _elm_lang$core$Json_Decode$map6 = _elm_lang$core$Native_Json.map6;\n\tvar _elm_lang$core$Json_Decode$map5 = _elm_lang$core$Native_Json.map5;\n\tvar _elm_lang$core$Json_Decode$map4 = _elm_lang$core$Native_Json.map4;\n\tvar _elm_lang$core$Json_Decode$map3 = _elm_lang$core$Native_Json.map3;\n\tvar _elm_lang$core$Json_Decode$map2 = _elm_lang$core$Native_Json.map2;\n\tvar _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.map1;\n\tvar _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;\n\tvar _elm_lang$core$Json_Decode$maybe = function _elm_lang$core$Json_Decode$maybe(decoder) {\n\t\treturn A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);\n\t};\n\tvar _elm_lang$core$Json_Decode$index = _elm_lang$core$Native_Json.decodeIndex;\n\tvar _elm_lang$core$Json_Decode$field = _elm_lang$core$Native_Json.decodeField;\n\tvar _elm_lang$core$Json_Decode$at = F2(function (fields, decoder) {\n\t\treturn A3(_elm_lang$core$List$foldr, _elm_lang$core$Json_Decode$field, decoder, fields);\n\t});\n\tvar _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;\n\tvar _elm_lang$core$Json_Decode$dict = function _elm_lang$core$Json_Decode$dict(decoder) {\n\t\treturn A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Dict$fromList, _elm_lang$core$Json_Decode$keyValuePairs(decoder));\n\t};\n\tvar _elm_lang$core$Json_Decode$array = function _elm_lang$core$Json_Decode$array(decoder) {\n\t\treturn A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);\n\t};\n\tvar _elm_lang$core$Json_Decode$list = function _elm_lang$core$Json_Decode$list(decoder) {\n\t\treturn A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);\n\t};\n\tvar _elm_lang$core$Json_Decode$nullable = function _elm_lang$core$Json_Decode$nullable(decoder) {\n\t\treturn _elm_lang$core$Json_Decode$oneOf({\n\t\t\tctor: '::',\n\t\t\t_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),\n\t\t\t_1: {\n\t\t\t\tctor: '::',\n\t\t\t\t_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, decoder),\n\t\t\t\t_1: { ctor: '[]' }\n\t\t\t}\n\t\t});\n\t};\n\tvar _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');\n\tvar _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');\n\tvar _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');\n\tvar _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');\n\tvar _elm_lang$core$Json_Decode$Decoder = { ctor: 'Decoder' };\n\n\tvar _elm_lang$core$Tuple$mapSecond = F2(function (func, _p0) {\n\t\tvar _p1 = _p0;\n\t\treturn {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: _p1._0,\n\t\t\t_1: func(_p1._1)\n\t\t};\n\t});\n\tvar _elm_lang$core$Tuple$mapFirst = F2(function (func, _p2) {\n\t\tvar _p3 = _p2;\n\t\treturn {\n\t\t\tctor: '_Tuple2',\n\t\t\t_0: func(_p3._0),\n\t\t\t_1: _p3._1\n\t\t};\n\t});\n\tvar _elm_lang$core$Tuple$second = function _elm_lang$core$Tuple$second(_p4) {\n\t\tvar _p5 = _p4;\n\t\treturn _p5._1;\n\t};\n\tvar _elm_lang$core$Tuple$first = function _elm_lang$core$Tuple$first(_p6) {\n\t\tvar _p7 = _p6;\n\t\treturn _p7._0;\n\t};\n\n\tvar _elm_lang$virtual_dom$VirtualDom_Debug$wrap;\n\tvar _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags;\n\n\tvar _elm_lang$virtual_dom$Native_VirtualDom = function () {\n\n\t\tvar STYLE_KEY = 'STYLE';\n\t\tvar EVENT_KEY = 'EVENT';\n\t\tvar ATTR_KEY = 'ATTR';\n\t\tvar ATTR_NS_KEY = 'ATTR_NS';\n\n\t\tvar localDoc = typeof document !== 'undefined' ? document : {};\n\n\t\t////////////  VIRTUAL DOM NODES  ////////////\n\n\n\t\tfunction text(string) {\n\t\t\treturn {\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: string\n\t\t\t};\n\t\t}\n\n\t\tfunction node(tag) {\n\t\t\treturn F2(function (factList, kidList) {\n\t\t\t\treturn nodeHelp(tag, factList, kidList);\n\t\t\t});\n\t\t}\n\n\t\tfunction nodeHelp(tag, factList, kidList) {\n\t\t\tvar organized = organizeFacts(factList);\n\t\t\tvar namespace = organized.namespace;\n\t\t\tvar facts = organized.facts;\n\n\t\t\tvar children = [];\n\t\t\tvar descendantsCount = 0;\n\t\t\twhile (kidList.ctor !== '[]') {\n\t\t\t\tvar kid = kidList._0;\n\t\t\t\tdescendantsCount += kid.descendantsCount || 0;\n\t\t\t\tchildren.push(kid);\n\t\t\t\tkidList = kidList._1;\n\t\t\t}\n\t\t\tdescendantsCount += children.length;\n\n\t\t\treturn {\n\t\t\t\ttype: 'node',\n\t\t\t\ttag: tag,\n\t\t\t\tfacts: facts,\n\t\t\t\tchildren: children,\n\t\t\t\tnamespace: namespace,\n\t\t\t\tdescendantsCount: descendantsCount\n\t\t\t};\n\t\t}\n\n\t\tfunction keyedNode(tag, factList, kidList) {\n\t\t\tvar organized = organizeFacts(factList);\n\t\t\tvar namespace = organized.namespace;\n\t\t\tvar facts = organized.facts;\n\n\t\t\tvar children = [];\n\t\t\tvar descendantsCount = 0;\n\t\t\twhile (kidList.ctor !== '[]') {\n\t\t\t\tvar kid = kidList._0;\n\t\t\t\tdescendantsCount += kid._1.descendantsCount || 0;\n\t\t\t\tchildren.push(kid);\n\t\t\t\tkidList = kidList._1;\n\t\t\t}\n\t\t\tdescendantsCount += children.length;\n\n\t\t\treturn {\n\t\t\t\ttype: 'keyed-node',\n\t\t\t\ttag: tag,\n\t\t\t\tfacts: facts,\n\t\t\t\tchildren: children,\n\t\t\t\tnamespace: namespace,\n\t\t\t\tdescendantsCount: descendantsCount\n\t\t\t};\n\t\t}\n\n\t\tfunction custom(factList, model, impl) {\n\t\t\tvar facts = organizeFacts(factList).facts;\n\n\t\t\treturn {\n\t\t\t\ttype: 'custom',\n\t\t\t\tfacts: facts,\n\t\t\t\tmodel: model,\n\t\t\t\timpl: impl\n\t\t\t};\n\t\t}\n\n\t\tfunction map(tagger, node) {\n\t\t\treturn {\n\t\t\t\ttype: 'tagger',\n\t\t\t\ttagger: tagger,\n\t\t\t\tnode: node,\n\t\t\t\tdescendantsCount: 1 + (node.descendantsCount || 0)\n\t\t\t};\n\t\t}\n\n\t\tfunction thunk(func, args, thunk) {\n\t\t\treturn {\n\t\t\t\ttype: 'thunk',\n\t\t\t\tfunc: func,\n\t\t\t\targs: args,\n\t\t\t\tthunk: thunk,\n\t\t\t\tnode: undefined\n\t\t\t};\n\t\t}\n\n\t\tfunction lazy(fn, a) {\n\t\t\treturn thunk(fn, [a], function () {\n\t\t\t\treturn fn(a);\n\t\t\t});\n\t\t}\n\n\t\tfunction lazy2(fn, a, b) {\n\t\t\treturn thunk(fn, [a, b], function () {\n\t\t\t\treturn A2(fn, a, b);\n\t\t\t});\n\t\t}\n\n\t\tfunction lazy3(fn, a, b, c) {\n\t\t\treturn thunk(fn, [a, b, c], function () {\n\t\t\t\treturn A3(fn, a, b, c);\n\t\t\t});\n\t\t}\n\n\t\t// FACTS\n\n\n\t\tfunction organizeFacts(factList) {\n\t\t\tvar namespace,\n\t\t\t    facts = {};\n\n\t\t\twhile (factList.ctor !== '[]') {\n\t\t\t\tvar entry = factList._0;\n\t\t\t\tvar key = entry.key;\n\n\t\t\t\tif (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY) {\n\t\t\t\t\tvar subFacts = facts[key] || {};\n\t\t\t\t\tsubFacts[entry.realKey] = entry.value;\n\t\t\t\t\tfacts[key] = subFacts;\n\t\t\t\t} else if (key === STYLE_KEY) {\n\t\t\t\t\tvar styles = facts[key] || {};\n\t\t\t\t\tvar styleList = entry.value;\n\t\t\t\t\twhile (styleList.ctor !== '[]') {\n\t\t\t\t\t\tvar style = styleList._0;\n\t\t\t\t\t\tstyles[style._0] = style._1;\n\t\t\t\t\t\tstyleList = styleList._1;\n\t\t\t\t\t}\n\t\t\t\t\tfacts[key] = styles;\n\t\t\t\t} else if (key === 'namespace') {\n\t\t\t\t\tnamespace = entry.value;\n\t\t\t\t} else if (key === 'className') {\n\t\t\t\t\tvar classes = facts[key];\n\t\t\t\t\tfacts[key] = typeof classes === 'undefined' ? entry.value : classes + ' ' + entry.value;\n\t\t\t\t} else {\n\t\t\t\t\tfacts[key] = entry.value;\n\t\t\t\t}\n\t\t\t\tfactList = factList._1;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfacts: facts,\n\t\t\t\tnamespace: namespace\n\t\t\t};\n\t\t}\n\n\t\t////////////  PROPERTIES AND ATTRIBUTES  ////////////\n\n\n\t\tfunction style(value) {\n\t\t\treturn {\n\t\t\t\tkey: STYLE_KEY,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tfunction property(key, value) {\n\t\t\treturn {\n\t\t\t\tkey: key,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tfunction attribute(key, value) {\n\t\t\treturn {\n\t\t\t\tkey: ATTR_KEY,\n\t\t\t\trealKey: key,\n\t\t\t\tvalue: value\n\t\t\t};\n\t\t}\n\n\t\tfunction attributeNS(namespace, key, value) {\n\t\t\treturn {\n\t\t\t\tkey: ATTR_NS_KEY,\n\t\t\t\trealKey: key,\n\t\t\t\tvalue: {\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tnamespace: namespace\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction on(name, options, decoder) {\n\t\t\treturn {\n\t\t\t\tkey: EVENT_KEY,\n\t\t\t\trealKey: name,\n\t\t\t\tvalue: {\n\t\t\t\t\toptions: options,\n\t\t\t\t\tdecoder: decoder\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction equalEvents(a, b) {\n\t\t\tif (a.options !== b.options) {\n\t\t\t\tif (a.options.stopPropagation !== b.options.stopPropagation || a.options.preventDefault !== b.options.preventDefault) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);\n\t\t}\n\n\t\tfunction mapProperty(func, property) {\n\t\t\tif (property.key !== EVENT_KEY) {\n\t\t\t\treturn property;\n\t\t\t}\n\t\t\treturn on(property.realKey, property.value.options, A2(_elm_lang$core$Json_Decode$map, func, property.value.decoder));\n\t\t}\n\n\t\t////////////  RENDER  ////////////\n\n\n\t\tfunction render(vNode, eventNode) {\n\t\t\tswitch (vNode.type) {\n\t\t\t\tcase 'thunk':\n\t\t\t\t\tif (!vNode.node) {\n\t\t\t\t\t\tvNode.node = vNode.thunk();\n\t\t\t\t\t}\n\t\t\t\t\treturn render(vNode.node, eventNode);\n\n\t\t\t\tcase 'tagger':\n\t\t\t\t\tvar subNode = vNode.node;\n\t\t\t\t\tvar tagger = vNode.tagger;\n\n\t\t\t\t\twhile (subNode.type === 'tagger') {\n\t\t\t\t\t\t(typeof tagger === 'undefined' ? 'undefined' : _typeof(tagger)) !== 'object' ? tagger = [tagger, subNode.tagger] : tagger.push(subNode.tagger);\n\n\t\t\t\t\t\tsubNode = subNode.node;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar subEventRoot = { tagger: tagger, parent: eventNode };\n\t\t\t\t\tvar domNode = render(subNode, subEventRoot);\n\t\t\t\t\tdomNode.elm_event_node_ref = subEventRoot;\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'text':\n\t\t\t\t\treturn localDoc.createTextNode(vNode.text);\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tvar domNode = vNode.namespace ? localDoc.createElementNS(vNode.namespace, vNode.tag) : localDoc.createElement(vNode.tag);\n\n\t\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\n\t\t\t\t\tvar children = vNode.children;\n\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tdomNode.appendChild(render(children[i], eventNode));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'keyed-node':\n\t\t\t\t\tvar domNode = vNode.namespace ? localDoc.createElementNS(vNode.namespace, vNode.tag) : localDoc.createElement(vNode.tag);\n\n\t\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\n\t\t\t\t\tvar children = vNode.children;\n\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tdomNode.appendChild(render(children[i]._1, eventNode));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'custom':\n\t\t\t\t\tvar domNode = vNode.impl.render(vNode.model);\n\t\t\t\t\tapplyFacts(domNode, eventNode, vNode.facts);\n\t\t\t\t\treturn domNode;\n\t\t\t}\n\t\t}\n\n\t\t////////////  APPLY FACTS  ////////////\n\n\n\t\tfunction applyFacts(domNode, eventNode, facts) {\n\t\t\tfor (var key in facts) {\n\t\t\t\tvar value = facts[key];\n\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase STYLE_KEY:\n\t\t\t\t\t\tapplyStyles(domNode, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EVENT_KEY:\n\t\t\t\t\t\tapplyEvents(domNode, eventNode, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ATTR_KEY:\n\t\t\t\t\t\tapplyAttrs(domNode, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ATTR_NS_KEY:\n\t\t\t\t\t\tapplyAttrsNS(domNode, value);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'value':\n\t\t\t\t\t\tif (domNode[key] !== value) {\n\t\t\t\t\t\t\tdomNode[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tdomNode[key] = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction applyStyles(domNode, styles) {\n\t\t\tvar domNodeStyle = domNode.style;\n\n\t\t\tfor (var key in styles) {\n\t\t\t\tdomNodeStyle[key] = styles[key];\n\t\t\t}\n\t\t}\n\n\t\tfunction applyEvents(domNode, eventNode, events) {\n\t\t\tvar allHandlers = domNode.elm_handlers || {};\n\n\t\t\tfor (var key in events) {\n\t\t\t\tvar handler = allHandlers[key];\n\t\t\t\tvar value = events[key];\n\n\t\t\t\tif (typeof value === 'undefined') {\n\t\t\t\t\tdomNode.removeEventListener(key, handler);\n\t\t\t\t\tallHandlers[key] = undefined;\n\t\t\t\t} else if (typeof handler === 'undefined') {\n\t\t\t\t\tvar handler = makeEventHandler(eventNode, value);\n\t\t\t\t\tdomNode.addEventListener(key, handler);\n\t\t\t\t\tallHandlers[key] = handler;\n\t\t\t\t} else {\n\t\t\t\t\thandler.info = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdomNode.elm_handlers = allHandlers;\n\t\t}\n\n\t\tfunction makeEventHandler(eventNode, info) {\n\t\t\tfunction eventHandler(event) {\n\t\t\t\tvar info = eventHandler.info;\n\n\t\t\t\tvar value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);\n\n\t\t\t\tif (value.ctor === 'Ok') {\n\t\t\t\t\tvar options = info.options;\n\t\t\t\t\tif (options.stopPropagation) {\n\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tif (options.preventDefault) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar message = value._0;\n\n\t\t\t\t\tvar currentEventNode = eventNode;\n\t\t\t\t\twhile (currentEventNode) {\n\t\t\t\t\t\tvar tagger = currentEventNode.tagger;\n\t\t\t\t\t\tif (typeof tagger === 'function') {\n\t\t\t\t\t\t\tmessage = tagger(message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var i = tagger.length; i--;) {\n\t\t\t\t\t\t\t\tmessage = tagger[i](message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentEventNode = currentEventNode.parent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\teventHandler.info = info;\n\n\t\t\treturn eventHandler;\n\t\t}\n\n\t\tfunction applyAttrs(domNode, attrs) {\n\t\t\tfor (var key in attrs) {\n\t\t\t\tvar value = attrs[key];\n\t\t\t\tif (typeof value === 'undefined') {\n\t\t\t\t\tdomNode.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\tdomNode.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction applyAttrsNS(domNode, nsAttrs) {\n\t\t\tfor (var key in nsAttrs) {\n\t\t\t\tvar pair = nsAttrs[key];\n\t\t\t\tvar namespace = pair.namespace;\n\t\t\t\tvar value = pair.value;\n\n\t\t\t\tif (typeof value === 'undefined') {\n\t\t\t\t\tdomNode.removeAttributeNS(namespace, key);\n\t\t\t\t} else {\n\t\t\t\t\tdomNode.setAttributeNS(namespace, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t////////////  DIFF  ////////////\n\n\n\t\tfunction diff(a, b) {\n\t\t\tvar patches = [];\n\t\t\tdiffHelp(a, b, patches, 0);\n\t\t\treturn patches;\n\t\t}\n\n\t\tfunction makePatch(type, index, data) {\n\t\t\treturn {\n\t\t\t\tindex: index,\n\t\t\t\ttype: type,\n\t\t\t\tdata: data,\n\t\t\t\tdomNode: undefined,\n\t\t\t\teventNode: undefined\n\t\t\t};\n\t\t}\n\n\t\tfunction diffHelp(a, b, patches, index) {\n\t\t\tif (a === b) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar aType = a.type;\n\t\t\tvar bType = b.type;\n\n\t\t\t// Bail if you run into different types of nodes. Implies that the\n\t\t\t// structure has changed significantly and it's not worth a diff.\n\t\t\tif (aType !== bType) {\n\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Now we know that both nodes are the same type.\n\t\t\tswitch (bType) {\n\t\t\t\tcase 'thunk':\n\t\t\t\t\tvar aArgs = a.args;\n\t\t\t\t\tvar bArgs = b.args;\n\t\t\t\t\tvar i = aArgs.length;\n\t\t\t\t\tvar same = a.func === b.func && i === bArgs.length;\n\t\t\t\t\twhile (same && i--) {\n\t\t\t\t\t\tsame = aArgs[i] === bArgs[i];\n\t\t\t\t\t}\n\t\t\t\t\tif (same) {\n\t\t\t\t\t\tb.node = a.node;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tb.node = b.thunk();\n\t\t\t\t\tvar subPatches = [];\n\t\t\t\t\tdiffHelp(a.node, b.node, subPatches, 0);\n\t\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\t\tpatches.push(makePatch('p-thunk', index, subPatches));\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'tagger':\n\t\t\t\t\t// gather nested taggers\n\t\t\t\t\tvar aTaggers = a.tagger;\n\t\t\t\t\tvar bTaggers = b.tagger;\n\t\t\t\t\tvar nesting = false;\n\n\t\t\t\t\tvar aSubNode = a.node;\n\t\t\t\t\twhile (aSubNode.type === 'tagger') {\n\t\t\t\t\t\tnesting = true;\n\n\t\t\t\t\t\t(typeof aTaggers === 'undefined' ? 'undefined' : _typeof(aTaggers)) !== 'object' ? aTaggers = [aTaggers, aSubNode.tagger] : aTaggers.push(aSubNode.tagger);\n\n\t\t\t\t\t\taSubNode = aSubNode.node;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar bSubNode = b.node;\n\t\t\t\t\twhile (bSubNode.type === 'tagger') {\n\t\t\t\t\t\tnesting = true;\n\n\t\t\t\t\t\t(typeof bTaggers === 'undefined' ? 'undefined' : _typeof(bTaggers)) !== 'object' ? bTaggers = [bTaggers, bSubNode.tagger] : bTaggers.push(bSubNode.tagger);\n\n\t\t\t\t\t\tbSubNode = bSubNode.node;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Just bail if different numbers of taggers. This implies the\n\t\t\t\t\t// structure of the virtual DOM has changed.\n\t\t\t\t\tif (nesting && aTaggers.length !== bTaggers.length) {\n\t\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// check if taggers are \"the same\"\n\t\t\t\t\tif (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers) {\n\t\t\t\t\t\tpatches.push(makePatch('p-tagger', index, bTaggers));\n\t\t\t\t\t}\n\n\t\t\t\t\t// diff everything below the taggers\n\t\t\t\t\tdiffHelp(aSubNode, bSubNode, patches, index + 1);\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'text':\n\t\t\t\t\tif (a.text !== b.text) {\n\t\t\t\t\t\tpatches.push(makePatch('p-text', index, b.text));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\t// Bail if obvious indicators have changed. Implies more serious\n\t\t\t\t\t// structural changes such that it's not worth it to diff.\n\t\t\t\t\tif (a.tag !== b.tag || a.namespace !== b.namespace) {\n\t\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\n\t\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t\t}\n\n\t\t\t\t\tdiffChildren(a, b, patches, index);\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'keyed-node':\n\t\t\t\t\t// Bail if obvious indicators have changed. Implies more serious\n\t\t\t\t\t// structural changes such that it's not worth it to diff.\n\t\t\t\t\tif (a.tag !== b.tag || a.namespace !== b.namespace) {\n\t\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\n\t\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t\t}\n\n\t\t\t\t\tdiffKeyedChildren(a, b, patches, index);\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'custom':\n\t\t\t\t\tif (a.impl !== b.impl) {\n\t\t\t\t\t\tpatches.push(makePatch('p-redraw', index, b));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar factsDiff = diffFacts(a.facts, b.facts);\n\t\t\t\t\tif (typeof factsDiff !== 'undefined') {\n\t\t\t\t\t\tpatches.push(makePatch('p-facts', index, factsDiff));\n\t\t\t\t\t}\n\n\t\t\t\t\tvar patch = b.impl.diff(a, b);\n\t\t\t\t\tif (patch) {\n\t\t\t\t\t\tpatches.push(makePatch('p-custom', index, patch));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// assumes the incoming arrays are the same length\n\t\tfunction pairwiseRefEqual(as, bs) {\n\t\t\tfor (var i = 0; i < as.length; i++) {\n\t\t\t\tif (as[i] !== bs[i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// TODO Instead of creating a new diff object, it's possible to just test if\n\t\t// there *is* a diff. During the actual patch, do the diff again and make the\n\t\t// modifications directly. This way, there's no new allocations. Worth it?\n\t\tfunction diffFacts(a, b, category) {\n\t\t\tvar diff;\n\n\t\t\t// look for changes and removals\n\t\t\tfor (var aKey in a) {\n\t\t\t\tif (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY) {\n\t\t\t\t\tvar subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);\n\t\t\t\t\tif (subDiff) {\n\t\t\t\t\t\tdiff = diff || {};\n\t\t\t\t\t\tdiff[aKey] = subDiff;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// remove if not in the new facts\n\t\t\t\tif (!(aKey in b)) {\n\t\t\t\t\tdiff = diff || {};\n\t\t\t\t\tdiff[aKey] = typeof category === 'undefined' ? typeof a[aKey] === 'string' ? '' : null : category === STYLE_KEY ? '' : category === EVENT_KEY || category === ATTR_KEY ? undefined : { namespace: a[aKey].namespace, value: undefined };\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar aValue = a[aKey];\n\t\t\t\tvar bValue = b[aKey];\n\n\t\t\t\t// reference equal, so don't worry about it\n\t\t\t\tif (aValue === bValue && aKey !== 'value' || category === EVENT_KEY && equalEvents(aValue, bValue)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tdiff = diff || {};\n\t\t\t\tdiff[aKey] = bValue;\n\t\t\t}\n\n\t\t\t// add new stuff\n\t\t\tfor (var bKey in b) {\n\t\t\t\tif (!(bKey in a)) {\n\t\t\t\t\tdiff = diff || {};\n\t\t\t\t\tdiff[bKey] = b[bKey];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t}\n\n\t\tfunction diffChildren(aParent, bParent, patches, rootIndex) {\n\t\t\tvar aChildren = aParent.children;\n\t\t\tvar bChildren = bParent.children;\n\n\t\t\tvar aLen = aChildren.length;\n\t\t\tvar bLen = bChildren.length;\n\n\t\t\t// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS\n\n\t\t\tif (aLen > bLen) {\n\t\t\t\tpatches.push(makePatch('p-remove-last', rootIndex, aLen - bLen));\n\t\t\t} else if (aLen < bLen) {\n\t\t\t\tpatches.push(makePatch('p-append', rootIndex, bChildren.slice(aLen)));\n\t\t\t}\n\n\t\t\t// PAIRWISE DIFF EVERYTHING ELSE\n\n\t\t\tvar index = rootIndex;\n\t\t\tvar minLen = aLen < bLen ? aLen : bLen;\n\t\t\tfor (var i = 0; i < minLen; i++) {\n\t\t\t\tindex++;\n\t\t\t\tvar aChild = aChildren[i];\n\t\t\t\tdiffHelp(aChild, bChildren[i], patches, index);\n\t\t\t\tindex += aChild.descendantsCount || 0;\n\t\t\t}\n\t\t}\n\n\t\t////////////  KEYED DIFF  ////////////\n\n\n\t\tfunction diffKeyedChildren(aParent, bParent, patches, rootIndex) {\n\t\t\tvar localPatches = [];\n\n\t\t\tvar changes = {}; // Dict String Entry\n\t\t\tvar inserts = []; // Array { index : Int, entry : Entry }\n\t\t\t// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }\n\n\t\t\tvar aChildren = aParent.children;\n\t\t\tvar bChildren = bParent.children;\n\t\t\tvar aLen = aChildren.length;\n\t\t\tvar bLen = bChildren.length;\n\t\t\tvar aIndex = 0;\n\t\t\tvar bIndex = 0;\n\n\t\t\tvar index = rootIndex;\n\n\t\t\twhile (aIndex < aLen && bIndex < bLen) {\n\t\t\t\tvar a = aChildren[aIndex];\n\t\t\t\tvar b = bChildren[bIndex];\n\n\t\t\t\tvar aKey = a._0;\n\t\t\t\tvar bKey = b._0;\n\t\t\t\tvar aNode = a._1;\n\t\t\t\tvar bNode = b._1;\n\n\t\t\t\t// check if keys match\n\n\t\t\t\tif (aKey === bKey) {\n\t\t\t\t\tindex++;\n\t\t\t\t\tdiffHelp(aNode, bNode, localPatches, index);\n\t\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\t\taIndex++;\n\t\t\t\t\tbIndex++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// look ahead 1 to detect insertions and removals.\n\n\t\t\t\tvar aLookAhead = aIndex + 1 < aLen;\n\t\t\t\tvar bLookAhead = bIndex + 1 < bLen;\n\n\t\t\t\tif (aLookAhead) {\n\t\t\t\t\tvar aNext = aChildren[aIndex + 1];\n\t\t\t\t\tvar aNextKey = aNext._0;\n\t\t\t\t\tvar aNextNode = aNext._1;\n\t\t\t\t\tvar oldMatch = bKey === aNextKey;\n\t\t\t\t}\n\n\t\t\t\tif (bLookAhead) {\n\t\t\t\t\tvar bNext = bChildren[bIndex + 1];\n\t\t\t\t\tvar bNextKey = bNext._0;\n\t\t\t\t\tvar bNextNode = bNext._1;\n\t\t\t\t\tvar newMatch = aKey === bNextKey;\n\t\t\t\t}\n\n\t\t\t\t// swap a and b\n\t\t\t\tif (aLookAhead && bLookAhead && newMatch && oldMatch) {\n\t\t\t\t\tindex++;\n\t\t\t\t\tdiffHelp(aNode, bNextNode, localPatches, index);\n\t\t\t\t\tinsertNode(changes, localPatches, aKey, bNode, bIndex, inserts);\n\t\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tremoveNode(changes, localPatches, aKey, aNextNode, index);\n\t\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\t\taIndex += 2;\n\t\t\t\t\tbIndex += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// insert b\n\t\t\t\tif (bLookAhead && newMatch) {\n\t\t\t\t\tindex++;\n\t\t\t\t\tinsertNode(changes, localPatches, bKey, bNode, bIndex, inserts);\n\t\t\t\t\tdiffHelp(aNode, bNextNode, localPatches, index);\n\t\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\t\taIndex += 1;\n\t\t\t\t\tbIndex += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// remove a\n\t\t\t\tif (aLookAhead && oldMatch) {\n\t\t\t\t\tindex++;\n\t\t\t\t\tremoveNode(changes, localPatches, aKey, aNode, index);\n\t\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tdiffHelp(aNextNode, bNode, localPatches, index);\n\t\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\t\taIndex += 2;\n\t\t\t\t\tbIndex += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// remove a, insert b\n\t\t\t\tif (aLookAhead && bLookAhead && aNextKey === bNextKey) {\n\t\t\t\t\tindex++;\n\t\t\t\t\tremoveNode(changes, localPatches, aKey, aNode, index);\n\t\t\t\t\tinsertNode(changes, localPatches, bKey, bNode, bIndex, inserts);\n\t\t\t\t\tindex += aNode.descendantsCount || 0;\n\n\t\t\t\t\tindex++;\n\t\t\t\t\tdiffHelp(aNextNode, bNextNode, localPatches, index);\n\t\t\t\t\tindex += aNextNode.descendantsCount || 0;\n\n\t\t\t\t\taIndex += 2;\n\t\t\t\t\tbIndex += 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// eat up any remaining nodes with removeNode and insertNode\n\n\t\t\twhile (aIndex < aLen) {\n\t\t\t\tindex++;\n\t\t\t\tvar a = aChildren[aIndex];\n\t\t\t\tvar aNode = a._1;\n\t\t\t\tremoveNode(changes, localPatches, a._0, aNode, index);\n\t\t\t\tindex += aNode.descendantsCount || 0;\n\t\t\t\taIndex++;\n\t\t\t}\n\n\t\t\tvar endInserts;\n\t\t\twhile (bIndex < bLen) {\n\t\t\t\tendInserts = endInserts || [];\n\t\t\t\tvar b = bChildren[bIndex];\n\t\t\t\tinsertNode(changes, localPatches, b._0, b._1, undefined, endInserts);\n\t\t\t\tbIndex++;\n\t\t\t}\n\n\t\t\tif (localPatches.length > 0 || inserts.length > 0 || typeof endInserts !== 'undefined') {\n\t\t\t\tpatches.push(makePatch('p-reorder', rootIndex, {\n\t\t\t\t\tpatches: localPatches,\n\t\t\t\t\tinserts: inserts,\n\t\t\t\t\tendInserts: endInserts\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t////////////  CHANGES FROM KEYED DIFF  ////////////\n\n\n\t\tvar POSTFIX = '_elmW6BL';\n\n\t\tfunction insertNode(changes, localPatches, key, vnode, bIndex, inserts) {\n\t\t\tvar entry = changes[key];\n\n\t\t\t// never seen this key before\n\t\t\tif (typeof entry === 'undefined') {\n\t\t\t\tentry = {\n\t\t\t\t\ttag: 'insert',\n\t\t\t\t\tvnode: vnode,\n\t\t\t\t\tindex: bIndex,\n\t\t\t\t\tdata: undefined\n\t\t\t\t};\n\n\t\t\t\tinserts.push({ index: bIndex, entry: entry });\n\t\t\t\tchanges[key] = entry;\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// this key was removed earlier, a match!\n\t\t\tif (entry.tag === 'remove') {\n\t\t\t\tinserts.push({ index: bIndex, entry: entry });\n\n\t\t\t\tentry.tag = 'move';\n\t\t\t\tvar subPatches = [];\n\t\t\t\tdiffHelp(entry.vnode, vnode, subPatches, entry.index);\n\t\t\t\tentry.index = bIndex;\n\t\t\t\tentry.data.data = {\n\t\t\t\t\tpatches: subPatches,\n\t\t\t\t\tentry: entry\n\t\t\t\t};\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// this key has already been inserted or moved, a duplicate!\n\t\t\tinsertNode(changes, localPatches, key + POSTFIX, vnode, bIndex, inserts);\n\t\t}\n\n\t\tfunction removeNode(changes, localPatches, key, vnode, index) {\n\t\t\tvar entry = changes[key];\n\n\t\t\t// never seen this key before\n\t\t\tif (typeof entry === 'undefined') {\n\t\t\t\tvar patch = makePatch('p-remove', index, undefined);\n\t\t\t\tlocalPatches.push(patch);\n\n\t\t\t\tchanges[key] = {\n\t\t\t\t\ttag: 'remove',\n\t\t\t\t\tvnode: vnode,\n\t\t\t\t\tindex: index,\n\t\t\t\t\tdata: patch\n\t\t\t\t};\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// this key was inserted earlier, a match!\n\t\t\tif (entry.tag === 'insert') {\n\t\t\t\tentry.tag = 'move';\n\t\t\t\tvar subPatches = [];\n\t\t\t\tdiffHelp(vnode, entry.vnode, subPatches, index);\n\n\t\t\t\tvar patch = makePatch('p-remove', index, {\n\t\t\t\t\tpatches: subPatches,\n\t\t\t\t\tentry: entry\n\t\t\t\t});\n\t\t\t\tlocalPatches.push(patch);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// this key has already been removed or moved, a duplicate!\n\t\t\tremoveNode(changes, localPatches, key + POSTFIX, vnode, index);\n\t\t}\n\n\t\t////////////  ADD DOM NODES  ////////////\n\t\t//\n\t\t// Each DOM node has an \"index\" assigned in order of traversal. It is important\n\t\t// to minimize our crawl over the actual DOM, so these indexes (along with the\n\t\t// descendantsCount of virtual nodes) let us skip touching entire subtrees of\n\t\t// the DOM if we know there are no patches there.\n\n\n\t\tfunction addDomNodes(domNode, vNode, patches, eventNode) {\n\t\t\taddDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);\n\t\t}\n\n\t\t// assumes `patches` is non-empty and indexes increase monotonically.\n\t\tfunction addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode) {\n\t\t\tvar patch = patches[i];\n\t\t\tvar index = patch.index;\n\n\t\t\twhile (index === low) {\n\t\t\t\tvar patchType = patch.type;\n\n\t\t\t\tif (patchType === 'p-thunk') {\n\t\t\t\t\taddDomNodes(domNode, vNode.node, patch.data, eventNode);\n\t\t\t\t} else if (patchType === 'p-reorder') {\n\t\t\t\t\tpatch.domNode = domNode;\n\t\t\t\t\tpatch.eventNode = eventNode;\n\n\t\t\t\t\tvar subPatches = patch.data.patches;\n\t\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\t\taddDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t\t}\n\t\t\t\t} else if (patchType === 'p-remove') {\n\t\t\t\t\tpatch.domNode = domNode;\n\t\t\t\t\tpatch.eventNode = eventNode;\n\n\t\t\t\t\tvar data = patch.data;\n\t\t\t\t\tif (typeof data !== 'undefined') {\n\t\t\t\t\t\tdata.entry.data = domNode;\n\t\t\t\t\t\tvar subPatches = data.patches;\n\t\t\t\t\t\tif (subPatches.length > 0) {\n\t\t\t\t\t\t\taddDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpatch.domNode = domNode;\n\t\t\t\t\tpatch.eventNode = eventNode;\n\t\t\t\t}\n\n\t\t\t\ti++;\n\n\t\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (vNode.type) {\n\t\t\t\tcase 'tagger':\n\t\t\t\t\tvar subNode = vNode.node;\n\n\t\t\t\t\twhile (subNode.type === \"tagger\") {\n\t\t\t\t\t\tsubNode = subNode.node;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tvar vChildren = vNode.children;\n\t\t\t\t\tvar childNodes = domNode.childNodes;\n\t\t\t\t\tfor (var j = 0; j < vChildren.length; j++) {\n\t\t\t\t\t\tlow++;\n\t\t\t\t\t\tvar vChild = vChildren[j];\n\t\t\t\t\t\tvar nextLow = low + (vChild.descendantsCount || 0);\n\t\t\t\t\t\tif (low <= index && index <= nextLow) {\n\t\t\t\t\t\t\ti = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);\n\t\t\t\t\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlow = nextLow;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\n\t\t\t\tcase 'keyed-node':\n\t\t\t\t\tvar vChildren = vNode.children;\n\t\t\t\t\tvar childNodes = domNode.childNodes;\n\t\t\t\t\tfor (var j = 0; j < vChildren.length; j++) {\n\t\t\t\t\t\tlow++;\n\t\t\t\t\t\tvar vChild = vChildren[j]._1;\n\t\t\t\t\t\tvar nextLow = low + (vChild.descendantsCount || 0);\n\t\t\t\t\t\tif (low <= index && index <= nextLow) {\n\t\t\t\t\t\t\ti = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);\n\t\t\t\t\t\t\tif (!(patch = patches[i]) || (index = patch.index) > high) {\n\t\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlow = nextLow;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\n\t\t\t\tcase 'text':\n\t\t\t\tcase 'thunk':\n\t\t\t\t\tthrow new Error('should never traverse `text` or `thunk` nodes like this');\n\t\t\t}\n\t\t}\n\n\t\t////////////  APPLY PATCHES  ////////////\n\n\n\t\tfunction applyPatches(rootDomNode, oldVirtualNode, patches, eventNode) {\n\t\t\tif (patches.length === 0) {\n\t\t\t\treturn rootDomNode;\n\t\t\t}\n\n\t\t\taddDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);\n\t\t\treturn applyPatchesHelp(rootDomNode, patches);\n\t\t}\n\n\t\tfunction applyPatchesHelp(rootDomNode, patches) {\n\t\t\tfor (var i = 0; i < patches.length; i++) {\n\t\t\t\tvar patch = patches[i];\n\t\t\t\tvar localDomNode = patch.domNode;\n\t\t\t\tvar newNode = applyPatch(localDomNode, patch);\n\t\t\t\tif (localDomNode === rootDomNode) {\n\t\t\t\t\trootDomNode = newNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn rootDomNode;\n\t\t}\n\n\t\tfunction applyPatch(domNode, patch) {\n\t\t\tswitch (patch.type) {\n\t\t\t\tcase 'p-redraw':\n\t\t\t\t\treturn applyPatchRedraw(domNode, patch.data, patch.eventNode);\n\n\t\t\t\tcase 'p-facts':\n\t\t\t\t\tapplyFacts(domNode, patch.eventNode, patch.data);\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-text':\n\t\t\t\t\tdomNode.replaceData(0, domNode.length, patch.data);\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-thunk':\n\t\t\t\t\treturn applyPatchesHelp(domNode, patch.data);\n\n\t\t\t\tcase 'p-tagger':\n\t\t\t\t\tif (typeof domNode.elm_event_node_ref !== 'undefined') {\n\t\t\t\t\t\tdomNode.elm_event_node_ref.tagger = patch.data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdomNode.elm_event_node_ref = { tagger: patch.data, parent: patch.eventNode };\n\t\t\t\t\t}\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-remove-last':\n\t\t\t\t\tvar i = patch.data;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tdomNode.removeChild(domNode.lastChild);\n\t\t\t\t\t}\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-append':\n\t\t\t\t\tvar newNodes = patch.data;\n\t\t\t\t\tfor (var i = 0; i < newNodes.length; i++) {\n\t\t\t\t\t\tdomNode.appendChild(render(newNodes[i], patch.eventNode));\n\t\t\t\t\t}\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-remove':\n\t\t\t\t\tvar data = patch.data;\n\t\t\t\t\tif (typeof data === 'undefined') {\n\t\t\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\t\t\treturn domNode;\n\t\t\t\t\t}\n\t\t\t\t\tvar entry = data.entry;\n\t\t\t\t\tif (typeof entry.index !== 'undefined') {\n\t\t\t\t\t\tdomNode.parentNode.removeChild(domNode);\n\t\t\t\t\t}\n\t\t\t\t\tentry.data = applyPatchesHelp(domNode, data.patches);\n\t\t\t\t\treturn domNode;\n\n\t\t\t\tcase 'p-reorder':\n\t\t\t\t\treturn applyPatchReorder(domNode, patch);\n\n\t\t\t\tcase 'p-custom':\n\t\t\t\t\tvar impl = patch.data;\n\t\t\t\t\treturn impl.applyPatch(domNode, impl.data);\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Ran into an unknown patch!');\n\t\t\t}\n\t\t}\n\n\t\tfunction applyPatchRedraw(domNode, vNode, eventNode) {\n\t\t\tvar parentNode = domNode.parentNode;\n\t\t\tvar newNode = render(vNode, eventNode);\n\n\t\t\tif (typeof newNode.elm_event_node_ref === 'undefined') {\n\t\t\t\tnewNode.elm_event_node_ref = domNode.elm_event_node_ref;\n\t\t\t}\n\n\t\t\tif (parentNode && newNode !== domNode) {\n\t\t\t\tparentNode.replaceChild(newNode, domNode);\n\t\t\t}\n\t\t\treturn newNode;\n\t\t}\n\n\t\tfunction applyPatchReorder(domNode, patch) {\n\t\t\tvar data = patch.data;\n\n\t\t\t// remove end inserts\n\t\t\tvar frag = applyPatchReorderEndInsertsHelp(data.endInserts, patch);\n\n\t\t\t// removals\n\t\t\tdomNode = applyPatchesHelp(domNode, data.patches);\n\n\t\t\t// inserts\n\t\t\tvar inserts = data.inserts;\n\t\t\tfor (var i = 0; i < inserts.length; i++) {\n\t\t\t\tvar insert = inserts[i];\n\t\t\t\tvar entry = insert.entry;\n\t\t\t\tvar node = entry.tag === 'move' ? entry.data : render(entry.vnode, patch.eventNode);\n\t\t\t\tdomNode.insertBefore(node, domNode.childNodes[insert.index]);\n\t\t\t}\n\n\t\t\t// add end inserts\n\t\t\tif (typeof frag !== 'undefined') {\n\t\t\t\tdomNode.appendChild(frag);\n\t\t\t}\n\n\t\t\treturn domNode;\n\t\t}\n\n\t\tfunction applyPatchReorderEndInsertsHelp(endInserts, patch) {\n\t\t\tif (typeof endInserts === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar frag = localDoc.createDocumentFragment();\n\t\t\tfor (var i = 0; i < endInserts.length; i++) {\n\t\t\t\tvar insert = endInserts[i];\n\t\t\t\tvar entry = insert.entry;\n\t\t\t\tfrag.appendChild(entry.tag === 'move' ? entry.data : render(entry.vnode, patch.eventNode));\n\t\t\t}\n\t\t\treturn frag;\n\t\t}\n\n\t\t// PROGRAMS\n\n\t\tvar program = makeProgram(checkNoFlags);\n\t\tvar programWithFlags = makeProgram(checkYesFlags);\n\n\t\tfunction makeProgram(flagChecker) {\n\t\t\treturn F2(function (debugWrap, impl) {\n\t\t\t\treturn function (flagDecoder) {\n\t\t\t\t\treturn function (object, moduleName, debugMetadata) {\n\t\t\t\t\t\tvar checker = flagChecker(flagDecoder, moduleName);\n\t\t\t\t\t\tif (typeof debugMetadata === 'undefined') {\n\t\t\t\t\t\t\tnormalSetup(impl, object, moduleName, checker);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdebugSetup(A2(debugWrap, debugMetadata, impl), object, moduleName, checker);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tfunction staticProgram(vNode) {\n\t\t\tvar nothing = _elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.Tuple0, _elm_lang$core$Platform_Cmd$none);\n\t\t\treturn A2(program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, {\n\t\t\t\tinit: nothing,\n\t\t\t\tview: function view() {\n\t\t\t\t\treturn vNode;\n\t\t\t\t},\n\t\t\t\tupdate: F2(function () {\n\t\t\t\t\treturn nothing;\n\t\t\t\t}),\n\t\t\t\tsubscriptions: function subscriptions() {\n\t\t\t\t\treturn _elm_lang$core$Platform_Sub$none;\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\t// FLAG CHECKERS\n\n\t\tfunction checkNoFlags(flagDecoder, moduleName) {\n\t\t\treturn function (init, flags, domNode) {\n\t\t\t\tif (typeof flags === 'undefined') {\n\t\t\t\t\treturn init;\n\t\t\t\t}\n\n\t\t\t\tvar errorMessage = 'The `' + moduleName + '` module does not need flags.\\n' + 'Initialize it with no arguments and you should be all set!';\n\n\t\t\t\tcrash(errorMessage, domNode);\n\t\t\t};\n\t\t}\n\n\t\tfunction checkYesFlags(flagDecoder, moduleName) {\n\t\t\treturn function (init, flags, domNode) {\n\t\t\t\tif (typeof flagDecoder === 'undefined') {\n\t\t\t\t\tvar errorMessage = 'Are you trying to sneak a Never value into Elm? Trickster!\\n' + 'It looks like ' + moduleName + '.main is defined with `programWithFlags` but has type `Program Never`.\\n' + 'Use `program` instead if you do not want flags.';\n\n\t\t\t\t\tcrash(errorMessage, domNode);\n\t\t\t\t}\n\n\t\t\t\tvar result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);\n\t\t\t\tif (result.ctor === 'Ok') {\n\t\t\t\t\treturn init(result._0);\n\t\t\t\t}\n\n\t\t\t\tvar errorMessage = 'Trying to initialize the `' + moduleName + '` module with an unexpected flag.\\n' + 'I tried to convert it to an Elm value, but ran into this problem:\\n\\n' + result._0;\n\n\t\t\t\tcrash(errorMessage, domNode);\n\t\t\t};\n\t\t}\n\n\t\tfunction crash(errorMessage, domNode) {\n\t\t\tif (domNode) {\n\t\t\t\tdomNode.innerHTML = '<div style=\"padding-left:1em;\">' + '<h2 style=\"font-weight:normal;\"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>' + '<pre style=\"padding-left:1em;\">' + errorMessage + '</pre>' + '</div>';\n\t\t\t}\n\n\t\t\tthrow new Error(errorMessage);\n\t\t}\n\n\t\t//  NORMAL SETUP\n\n\t\tfunction normalSetup(impl, object, moduleName, flagChecker) {\n\t\t\tobject['embed'] = function embed(node, flags) {\n\t\t\t\twhile (node.lastChild) {\n\t\t\t\t\tnode.removeChild(node.lastChild);\n\t\t\t\t}\n\n\t\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, node), impl.update, impl.subscriptions, normalRenderer(node, impl.view));\n\t\t\t};\n\n\t\t\tobject['fullscreen'] = function fullscreen(flags) {\n\t\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, document.body), impl.update, impl.subscriptions, normalRenderer(document.body, impl.view));\n\t\t\t};\n\t\t}\n\n\t\tfunction normalRenderer(parentNode, view) {\n\t\t\treturn function (tagger, initialModel) {\n\t\t\t\tvar eventNode = { tagger: tagger, parent: undefined };\n\t\t\t\tvar initialVirtualNode = view(initialModel);\n\t\t\t\tvar domNode = render(initialVirtualNode, eventNode);\n\t\t\t\tparentNode.appendChild(domNode);\n\t\t\t\treturn makeStepper(domNode, view, initialVirtualNode, eventNode);\n\t\t\t};\n\t\t}\n\n\t\t// STEPPER\n\n\t\tvar rAF = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : function (callback) {\n\t\t\tsetTimeout(callback, 1000 / 60);\n\t\t};\n\n\t\tfunction makeStepper(domNode, view, initialVirtualNode, eventNode) {\n\t\t\tvar state = 'NO_REQUEST';\n\t\t\tvar currNode = initialVirtualNode;\n\t\t\tvar nextModel;\n\n\t\t\tfunction updateIfNeeded() {\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase 'NO_REQUEST':\n\t\t\t\t\t\tthrow new Error('Unexpected draw callback.\\n' + 'Please report this to <https://github.com/elm-lang/virtual-dom/issues>.');\n\n\t\t\t\t\tcase 'PENDING_REQUEST':\n\t\t\t\t\t\trAF(updateIfNeeded);\n\t\t\t\t\t\tstate = 'EXTRA_REQUEST';\n\n\t\t\t\t\t\tvar nextNode = view(nextModel);\n\t\t\t\t\t\tvar patches = diff(currNode, nextNode);\n\t\t\t\t\t\tdomNode = applyPatches(domNode, currNode, patches, eventNode);\n\t\t\t\t\t\tcurrNode = nextNode;\n\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tcase 'EXTRA_REQUEST':\n\t\t\t\t\t\tstate = 'NO_REQUEST';\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn function stepper(model) {\n\t\t\t\tif (state === 'NO_REQUEST') {\n\t\t\t\t\trAF(updateIfNeeded);\n\t\t\t\t}\n\t\t\t\tstate = 'PENDING_REQUEST';\n\t\t\t\tnextModel = model;\n\t\t\t};\n\t\t}\n\n\t\t// DEBUG SETUP\n\n\t\tfunction debugSetup(impl, object, moduleName, flagChecker) {\n\t\t\tobject['fullscreen'] = function fullscreen(flags) {\n\t\t\t\tvar popoutRef = { doc: undefined };\n\t\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, document.body), impl.update(scrollTask(popoutRef)), impl.subscriptions, debugRenderer(moduleName, document.body, popoutRef, impl.view, impl.viewIn, impl.viewOut));\n\t\t\t};\n\n\t\t\tobject['embed'] = function fullscreen(node, flags) {\n\t\t\t\tvar popoutRef = { doc: undefined };\n\t\t\t\treturn _elm_lang$core$Native_Platform.initialize(flagChecker(impl.init, flags, node), impl.update(scrollTask(popoutRef)), impl.subscriptions, debugRenderer(moduleName, node, popoutRef, impl.view, impl.viewIn, impl.viewOut));\n\t\t\t};\n\t\t}\n\n\t\tfunction scrollTask(popoutRef) {\n\t\t\treturn _elm_lang$core$Native_Scheduler.nativeBinding(function (callback) {\n\t\t\t\tvar doc = popoutRef.doc;\n\t\t\t\tif (doc) {\n\t\t\t\t\tvar msgs = doc.getElementsByClassName('debugger-sidebar-messages')[0];\n\t\t\t\t\tif (msgs) {\n\t\t\t\t\t\tmsgs.scrollTop = msgs.scrollHeight;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcallback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));\n\t\t\t});\n\t\t}\n\n\t\tfunction debugRenderer(moduleName, parentNode, popoutRef, view, viewIn, viewOut) {\n\t\t\treturn function (tagger, initialModel) {\n\t\t\t\tvar appEventNode = { tagger: tagger, parent: undefined };\n\t\t\t\tvar eventNode = { tagger: tagger, parent: undefined };\n\n\t\t\t\t// make normal stepper\n\t\t\t\tvar appVirtualNode = view(initialModel);\n\t\t\t\tvar appNode = render(appVirtualNode, appEventNode);\n\t\t\t\tparentNode.appendChild(appNode);\n\t\t\t\tvar appStepper = makeStepper(appNode, view, appVirtualNode, appEventNode);\n\n\t\t\t\t// make overlay stepper\n\t\t\t\tvar overVirtualNode = viewIn(initialModel)._1;\n\t\t\t\tvar overNode = render(overVirtualNode, eventNode);\n\t\t\t\tparentNode.appendChild(overNode);\n\t\t\t\tvar wrappedViewIn = wrapViewIn(appEventNode, overNode, viewIn);\n\t\t\t\tvar overStepper = makeStepper(overNode, wrappedViewIn, overVirtualNode, eventNode);\n\n\t\t\t\t// make debugger stepper\n\t\t\t\tvar debugStepper = makeDebugStepper(initialModel, viewOut, eventNode, parentNode, moduleName, popoutRef);\n\n\t\t\t\treturn function stepper(model) {\n\t\t\t\t\tappStepper(model);\n\t\t\t\t\toverStepper(model);\n\t\t\t\t\tdebugStepper(model);\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\n\t\tfunction makeDebugStepper(initialModel, view, eventNode, parentNode, moduleName, popoutRef) {\n\t\t\tvar curr;\n\t\t\tvar domNode;\n\n\t\t\treturn function stepper(model) {\n\t\t\t\tif (!model.isDebuggerOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!popoutRef.doc) {\n\t\t\t\t\tcurr = view(model);\n\t\t\t\t\tdomNode = openDebugWindow(moduleName, popoutRef, curr, eventNode);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// switch to document of popout\n\t\t\t\tlocalDoc = popoutRef.doc;\n\n\t\t\t\tvar next = view(model);\n\t\t\t\tvar patches = diff(curr, next);\n\t\t\t\tdomNode = applyPatches(domNode, curr, patches, eventNode);\n\t\t\t\tcurr = next;\n\n\t\t\t\t// switch back to normal document\n\t\t\t\tlocalDoc = document;\n\t\t\t};\n\t\t}\n\n\t\tfunction openDebugWindow(moduleName, popoutRef, virtualNode, eventNode) {\n\t\t\tvar w = 900;\n\t\t\tvar h = 360;\n\t\t\tvar x = screen.width - w;\n\t\t\tvar y = screen.height - h;\n\t\t\tvar debugWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);\n\n\t\t\t// switch to window document\n\t\t\tlocalDoc = debugWindow.document;\n\n\t\t\tpopoutRef.doc = localDoc;\n\t\t\tlocalDoc.title = 'Debugger - ' + moduleName;\n\t\t\tlocalDoc.body.style.margin = '0';\n\t\t\tlocalDoc.body.style.padding = '0';\n\t\t\tvar domNode = render(virtualNode, eventNode);\n\t\t\tlocalDoc.body.appendChild(domNode);\n\n\t\t\tlocalDoc.addEventListener('keydown', function (event) {\n\t\t\t\tif (event.metaKey && event.which === 82) {\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}\n\t\t\t\tif (event.which === 38) {\n\t\t\t\t\teventNode.tagger({ ctor: 'Up' });\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t\tif (event.which === 40) {\n\t\t\t\t\teventNode.tagger({ ctor: 'Down' });\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction close() {\n\t\t\t\tpopoutRef.doc = undefined;\n\t\t\t\tdebugWindow.close();\n\t\t\t}\n\t\t\twindow.addEventListener('unload', close);\n\t\t\tdebugWindow.addEventListener('unload', function () {\n\t\t\t\tpopoutRef.doc = undefined;\n\t\t\t\twindow.removeEventListener('unload', close);\n\t\t\t\teventNode.tagger({ ctor: 'Close' });\n\t\t\t});\n\n\t\t\t// switch back to the normal document\n\t\t\tlocalDoc = document;\n\n\t\t\treturn domNode;\n\t\t}\n\n\t\t// BLOCK EVENTS\n\n\t\tfunction wrapViewIn(appEventNode, overlayNode, viewIn) {\n\t\t\tvar ignorer = makeIgnorer(overlayNode);\n\t\t\tvar blocking = 'Normal';\n\t\t\tvar overflow;\n\n\t\t\tvar normalTagger = appEventNode.tagger;\n\t\t\tvar blockTagger = function blockTagger() {};\n\n\t\t\treturn function (model) {\n\t\t\t\tvar tuple = viewIn(model);\n\t\t\t\tvar newBlocking = tuple._0.ctor;\n\t\t\t\tappEventNode.tagger = newBlocking === 'Normal' ? normalTagger : blockTagger;\n\t\t\t\tif (blocking !== newBlocking) {\n\t\t\t\t\ttraverse('removeEventListener', ignorer, blocking);\n\t\t\t\t\ttraverse('addEventListener', ignorer, newBlocking);\n\n\t\t\t\t\tif (blocking === 'Normal') {\n\t\t\t\t\t\toverflow = document.body.style.overflow;\n\t\t\t\t\t\tdocument.body.style.overflow = 'hidden';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newBlocking === 'Normal') {\n\t\t\t\t\t\tdocument.body.style.overflow = overflow;\n\t\t\t\t\t}\n\n\t\t\t\t\tblocking = newBlocking;\n\t\t\t\t}\n\t\t\t\treturn tuple._1;\n\t\t\t};\n\t\t}\n\n\t\tfunction traverse(verbEventListener, ignorer, blocking) {\n\t\t\tswitch (blocking) {\n\t\t\t\tcase 'Normal':\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'Pause':\n\t\t\t\t\treturn traverseHelp(verbEventListener, ignorer, mostEvents);\n\n\t\t\t\tcase 'Message':\n\t\t\t\t\treturn traverseHelp(verbEventListener, ignorer, allEvents);\n\t\t\t}\n\t\t}\n\n\t\tfunction traverseHelp(verbEventListener, handler, eventNames) {\n\t\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\t\tdocument.body[verbEventListener](eventNames[i], handler, true);\n\t\t\t}\n\t\t}\n\n\t\tfunction makeIgnorer(overlayNode) {\n\t\t\treturn function (event) {\n\t\t\t\tif (event.type === 'keydown' && event.metaKey && event.which === 82) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar isScroll = event.type === 'scroll' || event.type === 'wheel';\n\n\t\t\t\tvar node = event.target;\n\t\t\t\twhile (node !== null) {\n\t\t\t\t\tif (node.className === 'elm-overlay-message-details' && isScroll) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (node === overlayNode && !isScroll) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tnode = node.parentNode;\n\t\t\t\t}\n\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tevent.preventDefault();\n\t\t\t};\n\t\t}\n\n\t\tvar mostEvents = ['click', 'dblclick', 'mousemove', 'mouseup', 'mousedown', 'mouseenter', 'mouseleave', 'touchstart', 'touchend', 'touchcancel', 'touchmove', 'pointerdown', 'pointerup', 'pointerover', 'pointerout', 'pointerenter', 'pointerleave', 'pointermove', 'pointercancel', 'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop', 'keyup', 'keydown', 'keypress', 'input', 'change', 'focus', 'blur'];\n\n\t\tvar allEvents = mostEvents.concat('wheel', 'scroll');\n\n\t\treturn {\n\t\t\tnode: node,\n\t\t\ttext: text,\n\t\t\tcustom: custom,\n\t\t\tmap: F2(map),\n\n\t\t\ton: F3(on),\n\t\t\tstyle: style,\n\t\t\tproperty: F2(property),\n\t\t\tattribute: F2(attribute),\n\t\t\tattributeNS: F3(attributeNS),\n\t\t\tmapProperty: F2(mapProperty),\n\n\t\t\tlazy: F2(lazy),\n\t\t\tlazy2: F3(lazy2),\n\t\t\tlazy3: F4(lazy3),\n\t\t\tkeyedNode: F3(keyedNode),\n\n\t\t\tprogram: program,\n\t\t\tprogramWithFlags: programWithFlags,\n\t\t\tstaticProgram: staticProgram\n\t\t};\n\t}();\n\n\tvar _elm_lang$virtual_dom$VirtualDom$programWithFlags = function _elm_lang$virtual_dom$VirtualDom$programWithFlags(impl) {\n\t\treturn A2(_elm_lang$virtual_dom$Native_VirtualDom.programWithFlags, _elm_lang$virtual_dom$VirtualDom_Debug$wrapWithFlags, impl);\n\t};\n\tvar _elm_lang$virtual_dom$VirtualDom$program = function _elm_lang$virtual_dom$VirtualDom$program(impl) {\n\t\treturn A2(_elm_lang$virtual_dom$Native_VirtualDom.program, _elm_lang$virtual_dom$VirtualDom_Debug$wrap, impl);\n\t};\n\tvar _elm_lang$virtual_dom$VirtualDom$keyedNode = _elm_lang$virtual_dom$Native_VirtualDom.keyedNode;\n\tvar _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;\n\tvar _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;\n\tvar _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;\n\tvar _elm_lang$virtual_dom$VirtualDom$defaultOptions = { stopPropagation: false, preventDefault: false };\n\tvar _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;\n\tvar _elm_lang$virtual_dom$VirtualDom$on = F2(function (eventName, decoder) {\n\t\treturn A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);\n\t});\n\tvar _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;\n\tvar _elm_lang$virtual_dom$VirtualDom$mapProperty = _elm_lang$virtual_dom$Native_VirtualDom.mapProperty;\n\tvar _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;\n\tvar _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;\n\tvar _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;\n\tvar _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;\n\tvar _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;\n\tvar _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;\n\tvar _elm_lang$virtual_dom$VirtualDom$Options = F2(function (a, b) {\n\t\treturn { stopPropagation: a, preventDefault: b };\n\t});\n\tvar _elm_lang$virtual_dom$VirtualDom$Node = { ctor: 'Node' };\n\tvar _elm_lang$virtual_dom$VirtualDom$Property = { ctor: 'Property' };\n\n\tvar _elm_lang$html$Html$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;\n\tvar _elm_lang$html$Html$program = _elm_lang$virtual_dom$VirtualDom$program;\n\tvar _elm_lang$html$Html$beginnerProgram = function _elm_lang$html$Html$beginnerProgram(_p0) {\n\t\tvar _p1 = _p0;\n\t\treturn _elm_lang$html$Html$program({\n\t\t\tinit: A2(_elm_lang$core$Platform_Cmd_ops['!'], _p1.model, { ctor: '[]' }),\n\t\t\tupdate: F2(function (msg, model) {\n\t\t\t\treturn A2(_elm_lang$core$Platform_Cmd_ops['!'], A2(_p1.update, msg, model), { ctor: '[]' });\n\t\t\t}),\n\t\t\tview: _p1.view,\n\t\t\tsubscriptions: function subscriptions(_p2) {\n\t\t\t\treturn _elm_lang$core$Platform_Sub$none;\n\t\t\t}\n\t\t});\n\t};\n\tvar _elm_lang$html$Html$map = _elm_lang$virtual_dom$VirtualDom$map;\n\tvar _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;\n\tvar _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;\n\tvar _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');\n\tvar _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');\n\tvar _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');\n\tvar _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');\n\tvar _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');\n\tvar _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');\n\tvar _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');\n\tvar _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');\n\tvar _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');\n\tvar _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');\n\tvar _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');\n\tvar _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');\n\tvar _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');\n\tvar _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');\n\tvar _elm_lang$html$Html$main_ = _elm_lang$html$Html$node('main');\n\tvar _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');\n\tvar _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');\n\tvar _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');\n\tvar _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');\n\tvar _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');\n\tvar _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');\n\tvar _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');\n\tvar _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');\n\tvar _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');\n\tvar _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');\n\tvar _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');\n\tvar _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');\n\tvar _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');\n\tvar _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');\n\tvar _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');\n\tvar _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');\n\tvar _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');\n\tvar _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');\n\tvar _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');\n\tvar _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');\n\tvar _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');\n\tvar _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');\n\tvar _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');\n\tvar _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');\n\tvar _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');\n\tvar _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');\n\tvar _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');\n\tvar _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');\n\tvar _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');\n\tvar _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');\n\tvar _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');\n\tvar _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');\n\tvar _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');\n\tvar _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');\n\tvar _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');\n\tvar _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');\n\tvar _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');\n\tvar _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');\n\tvar _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');\n\tvar _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');\n\tvar _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');\n\tvar _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');\n\tvar _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');\n\tvar _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');\n\tvar _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');\n\tvar _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');\n\tvar _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');\n\tvar _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');\n\tvar _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');\n\tvar _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');\n\tvar _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');\n\tvar _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');\n\tvar _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');\n\tvar _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');\n\tvar _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');\n\tvar _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');\n\tvar _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');\n\tvar _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');\n\tvar _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');\n\tvar _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');\n\tvar _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');\n\tvar _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');\n\tvar _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');\n\tvar _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');\n\tvar _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');\n\tvar _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');\n\tvar _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');\n\tvar _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');\n\tvar _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');\n\tvar _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');\n\tvar _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');\n\tvar _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');\n\tvar _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');\n\tvar _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');\n\tvar _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');\n\tvar _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');\n\tvar _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');\n\tvar _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');\n\tvar _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');\n\tvar _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');\n\tvar _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');\n\tvar _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');\n\tvar _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');\n\n\tvar _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(_elm_lang$html$Html$text('Terraformed Robot World! Rocket.rs + Elm'));\n\n\tvar Elm = {};\n\tElm['Main'] = Elm['Main'] || {};\n\tif (typeof _user$project$Main$main !== 'undefined') {\n\t\t_user$project$Main$main(Elm['Main'], 'Main', undefined);\n\t}\n\n\tif (typeof define === \"function\" && define['amd']) {\n\t\tdefine([], function () {\n\t\t\treturn Elm;\n\t\t});\n\t\treturn;\n\t}\n\n\tif ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === \"object\") {\n\t\tmodule['exports'] = Elm;\n\t\treturn;\n\t}\n\n\tvar globalElm = this['Elm'];\n\tif (typeof globalElm === \"undefined\") {\n\t\tthis['Elm'] = Elm;\n\t\treturn;\n\t}\n\n\tfor (var publicModule in Elm) {\n\t\tif (publicModule in globalElm) {\n\t\t\tthrow new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');\n\t\t}\n\t\tglobalElm[publicModule] = Elm[publicModule];\n\t}\n}).call(undefined);\n"]}